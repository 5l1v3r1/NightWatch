./doc/designstyle.css:  list-style-type: none;
./doc/designstyle.css:  list-style-image: none;
./src/page_heap.cc:    DLL_Prepend(&list->normal, span);
./src/page_heap.cc:    DLL_Prepend(&list->returned, span);
./src/page_heap.cc:  Span* s = slist->normal.prev;
./src/page_heap.cc:      if (!DLL_IsEmpty(&slist->normal)) {
./src/page_heap.cc:  for (Span* s = list->next; s != list; s = s->next) {
./src/thread_cache.h:  if (list->empty()) {
./src/thread_cache.h:  return list->Pop();
./src/thread_cache.h:  ASSERT(ptr != list->Next());
./src/thread_cache.h:  list->Push(ptr);
./src/thread_cache.h:      static_cast<ssize_t>(list->max_length()) - list->length();
./src/thread_cache.h:  printf("                        list->max_length=%zd list->length_=%zd list_headroom=%zd\n",
./src/thread_cache.h:		  static_cast<ssize_t>(list->max_length()), list->length(), list_headroom);
./src/span.h:  return list->next == list;
./src/tests/malloc_hook_test.cc:  return list->Add(reinterpret_cast<MallocHook::NewHook>(val));
./src/tests/malloc_hook_test.cc:  return list->Remove(reinterpret_cast<MallocHook::NewHook>(val));
./src/thread_cache.cc:  ASSERT(list->empty());
./src/thread_cache.cc:  const int num_to_move = min<int>(list->max_length(), batch_size);
./src/thread_cache.cc:    list->PushRange(fetch_count, SLL_Next(start), end);
./src/thread_cache.cc:  if (list->max_length() < batch_size) {
./src/thread_cache.cc:    list->set_max_length(list->max_length() + 1);
./src/thread_cache.cc:    int new_length = min<int>(list->max_length() + batch_size,
./src/thread_cache.cc:    list->set_max_length(new_length);
./src/thread_cache.cc:  if (list->max_length() < batch_size) {
./src/thread_cache.cc:    list->set_max_length(list->max_length() + 1);
./src/thread_cache.cc:  } else if (list->max_length() > batch_size) {
./src/thread_cache.cc:    list->set_length_overages(list->length_overages() + 1);
./src/thread_cache.cc:    if (list->length_overages() > kMaxOverages) {
./src/thread_cache.cc:      ASSERT(list->max_length() > batch_size);
./src/thread_cache.cc:      list->set_max_length(list->max_length() - batch_size);
./src/thread_cache.cc:      list->set_length_overages(0);
./src/thread_cache.cc:    const int lowmark = list->lowwatermark();
./src/thread_cache.cc:      if (list->max_length() > batch_size) {
./src/thread_cache.cc:        list->set_max_length(
./src/thread_cache.cc:            max<int>(list->max_length() - batch_size, batch_size));
./src/thread_cache.cc:    list->clear_lowwatermark();
./src/span.cc:  list->next = list;
./src/span.cc:  list->prev = list;
./src/span.cc:  for (Span* s = list->next; s != list; s = s->next) {
./src/span.cc:  span->next = list->next;
./src/span.cc:  list->next->prev = span;
./src/span.cc:  list->next = span;
./src/pprof:    my $shortname = $symlist->[0];
./src/pprof:    my $fullname = $symlist->[2];
./src/pprof:    my $shortname = $symlist->[0];
./src/pprof:    my $fullname = $symlist->[2];
./src/pprof:    # store in the map if $symlist->[1] is in that list.  Saves space.
./src/pprof:      my $func = $symlist->[$j-2];
./src/pprof:      my $fileline = $symlist->[$j-1];
./src/pprof:      my $fullfunc = $symlist->[$j];
./src/pprof:    if ($debug) { printf STDERR ("%s\n", $pclist->[$i]); }
./src/pprof:    printf ADDRESSES ("%s\n", AddressSub($pclist->[$i], $offset));
./src/pprof:    my $pcstr = $pclist->[$count];
./bak_Makefile:cscopelist: cscopelist-am
./bak_Makefile:cscopelist-am: $(am__tagged_files)
./bak_Makefile:	cscopelist-am ctags ctags-am dist dist-all dist-bzip2 \
./ChangeLog:	* Change malloc-hook to use a list-like structure (llib)
./Makefile:cscopelist: cscopelist-am
./Makefile:cscopelist-am: $(am__tagged_files)
./Makefile:	cscopelist-am ctags ctags-am dist dist-all dist-bzip2 \
./Makefile.in:cscopelist: cscopelist-am
./Makefile.in:cscopelist-am: $(am__tagged_files)
./Makefile.in:	cscopelist-am ctags ctags-am dist dist-all dist-bzip2 \
