!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
-sourcedir	packages/deb/rules	/^	dh_install --sourcedir=debian\/tmp$/;"	m
A	src/tests/heap-checker_unittest.cc	/^  virtual void A() { }$/;"	f	class:ClassMltD1
A	src/tests/heap-checker_unittest.cc	/^  virtual void A() { }$/;"	f	class:ClassMltD2
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/root\/grt\/tcmalloc\/gperftools-2.4_NW_externed_v2.0\/missing aclocal-1.14$/;"	m
ACLOCAL_AMFLAGS	Makefile	/^ACLOCAL_AMFLAGS = -I m4$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACMRandom	src/tests/tcmalloc_unittest.cc	/^    explicit ACMRandom(int32 seed) { seed_ = seed; }$/;"	f	class:testing::TesterThread::ACMRandom
ACMRandom	src/tests/tcmalloc_unittest.cc	/^  class ACMRandom {$/;"	c	class:testing::TesterThread	file:
ACQUIRED_AFTER	src/base/thread_annotations.h	84;"	d
ACQUIRED_BEFORE	src/base/thread_annotations.h	86;"	d
ADCDF	src/tests/sampler_test.cc	/^void ADCDF() {$/;"	f
ADDRESSMAP_UNITTEST_INCLUDES	Makefile	/^ADDRESSMAP_UNITTEST_INCLUDES = src\/addressmap-inl.h \\$/;"	m
ADDR_IN_ATTRIBUTE_SECTION	src/malloc_hook.cc	570;"	d	file:
ADDR_IN_ATTRIBUTE_SECTION	src/malloc_hook.cc	586;"	d	file:
ADJUST_ADDRESS_RANGE_FROM_RA	src/tests/stacktrace_unittest.cc	77;"	d	file:
ADJUST_ADDRESS_RANGE_FROM_RA	src/tests/stacktrace_unittest.cc	96;"	d	file:
ADTestTest	src/tests/sampler_test.cc	/^void ADTestTest(int n) {$/;"	f
ALARM	heap-checker-death_unittest.sh	/^ALARM() {$/;"	f
ALARM	src/tests/heap-checker-death_unittest.sh	/^ALARM() {$/;"	f
ALIAS	src/libc_override_gcc_and_weak.h	101;"	d
ALIAS	src/libc_override_gcc_and_weak.h	55;"	d
ALIAS	src/libc_override_glibc.h	76;"	d
ALIAS	src/libc_override_glibc.h	88;"	d
ALIGN	src/common.h	55;"	d
ALLOC	src/tests/tcmalloc_unittest.cc	/^  enum Type { ALLOC, FREE, UPDATE, PASS };$/;"	e	enum:testing::TesterThread::Type	file:
ALLOC_COUNT	src/addressmap-inl.h	/^  static const int ALLOC_COUNT = 64;$/;"	m	class:AddressMap
ALT_STACKSIZE	src/base/linuxthreads.cc	246;"	d	file:
AMTAR	Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_A	src/windows/mini_disassembler_types.h	/^  AM_A = 0x00010000,    \/\/ A addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_C	src/windows/mini_disassembler_types.h	/^  AM_C = 0x00020000,    \/\/ C addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_CPPFLAGS	Makefile	/^AM_CPPFLAGS = -I$(top_srcdir)\/src $(am__append_1)$/;"	m
AM_CXXFLAGS	Makefile	/^AM_CXXFLAGS = $(am__append_2) $(am__append_4) $(am__append_5) \\$/;"	m
AM_D	src/windows/mini_disassembler_types.h	/^  AM_D = 0x00030000,    \/\/ D addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_DEFAULT_VERBOSITY	Makefile	/^AM_DEFAULT_VERBOSITY = 1$/;"	m
AM_E	src/windows/mini_disassembler_types.h	/^  AM_E = 0x00040000,    \/\/ E addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_F	src/windows/mini_disassembler_types.h	/^  AM_F = 0x00050000,    \/\/ F addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_G	src/windows/mini_disassembler_types.h	/^  AM_G = 0x00060000,    \/\/ G addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_I	src/windows/mini_disassembler_types.h	/^  AM_I = 0x00070000,    \/\/ I addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_IMPLICIT	src/windows/mini_disassembler_types.h	/^  AM_IMPLICIT = 0x00150000,  \/\/ An implicit, fixed value is used$/;"	e	enum:sidestep::AddressingMethod
AM_J	src/windows/mini_disassembler_types.h	/^  AM_J = 0x00080000,    \/\/ J addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_LDFLAGS	Makefile	/^AM_LDFLAGS = -no-undefined $(LIBSTDCXX_LA_LINKER_FLAG)$/;"	m
AM_M	src/windows/mini_disassembler_types.h	/^  AM_M = 0x00090000,    \/\/ M addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_MASK	src/windows/mini_disassembler_types.h	/^  AM_MASK = 0x00FF0000,  \/\/ Mask for the rest of the values in this enumeration$/;"	e	enum:sidestep::AddressingMethod
AM_NOT_USED	src/windows/mini_disassembler_types.h	/^  AM_NOT_USED = 0,        \/\/ This operand is not used for this instruction$/;"	e	enum:sidestep::AddressingMethod
AM_O	src/windows/mini_disassembler_types.h	/^  AM_O = 0x000A0000,    \/\/ O addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_P	src/windows/mini_disassembler_types.h	/^  AM_P = 0x000B0000,    \/\/ P addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_Q	src/windows/mini_disassembler_types.h	/^  AM_Q = 0x000C0000,    \/\/ Q addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_R	src/windows/mini_disassembler_types.h	/^  AM_R = 0x000D0000,    \/\/ R addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_RECURSIVE_TARGETS	Makefile	/^AM_RECURSIVE_TARGETS = cscope check recheck$/;"	m
AM_REGISTER	src/windows/mini_disassembler_types.h	/^  AM_REGISTER = 0x00140000,  \/\/ Specific register is always used as this op$/;"	e	enum:sidestep::AddressingMethod
AM_S	src/windows/mini_disassembler_types.h	/^  AM_S = 0x000E0000,    \/\/ S addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_T	src/windows/mini_disassembler_types.h	/^  AM_T = 0x000F0000,    \/\/ T addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_V	src/windows/mini_disassembler_types.h	/^  AM_V = 0x00100000,    \/\/ V addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_V_CC	Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCLD	Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CXX	Makefile	/^AM_V_CXX = $(am__v_CXX_$(V))$/;"	m
AM_V_CXXLD	Makefile	/^AM_V_CXXLD = $(am__v_CXXLD_$(V))$/;"	m
AM_V_GEN	Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_P	Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_lt	Makefile	/^AM_V_lt = $(am__v_lt_$(V))$/;"	m
AM_W	src/windows/mini_disassembler_types.h	/^  AM_W = 0x00110000,    \/\/ W addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_X	src/windows/mini_disassembler_types.h	/^  AM_X = 0x00120000,    \/\/ X addressing type$/;"	e	enum:sidestep::AddressingMethod
AM_Y	src/windows/mini_disassembler_types.h	/^  AM_Y = 0x00130000,    \/\/ Y addressing type$/;"	e	enum:sidestep::AddressingMethod
ANNOTALYSIS_IGNORE_READS_BEGIN	src/base/dynamic_annotations.h	381;"	d
ANNOTALYSIS_IGNORE_READS_BEGIN	src/base/dynamic_annotations.h	400;"	d
ANNOTALYSIS_IGNORE_READS_BEGIN	src/base/dynamic_annotations.h	401;"	d
ANNOTALYSIS_IGNORE_READS_END	src/base/dynamic_annotations.h	382;"	d
ANNOTALYSIS_IGNORE_READS_END	src/base/dynamic_annotations.h	402;"	d
ANNOTALYSIS_IGNORE_READS_END	src/base/dynamic_annotations.h	403;"	d
ANNOTALYSIS_IGNORE_WRITES_BEGIN	src/base/dynamic_annotations.h	383;"	d
ANNOTALYSIS_IGNORE_WRITES_BEGIN	src/base/dynamic_annotations.h	404;"	d
ANNOTALYSIS_IGNORE_WRITES_BEGIN	src/base/dynamic_annotations.h	405;"	d
ANNOTALYSIS_IGNORE_WRITES_END	src/base/dynamic_annotations.h	384;"	d
ANNOTALYSIS_IGNORE_WRITES_END	src/base/dynamic_annotations.h	406;"	d
ANNOTALYSIS_IGNORE_WRITES_END	src/base/dynamic_annotations.h	407;"	d
ANNOTALYSIS_ONLY	src/base/dynamic_annotations.h	391;"	d
ANNOTALYSIS_ONLY	src/base/dynamic_annotations.h	576;"	d
ANNOTALYSIS_SEMICOLON_OR_EMPTY_BODY	src/base/dynamic_annotations.h	380;"	d
ANNOTALYSIS_SEMICOLON_OR_EMPTY_BODY	src/base/dynamic_annotations.h	394;"	d
ANNOTALYSIS_SEMICOLON_OR_EMPTY_BODY	src/base/dynamic_annotations.h	395;"	d
ANNOTALYSIS_SEMICOLON_OR_EMPTY_BODY	src/base/dynamic_annotations.h	625;"	d
ANNOTALYSIS_STATIC_INLINE	src/base/dynamic_annotations.h	379;"	d
ANNOTALYSIS_STATIC_INLINE	src/base/dynamic_annotations.h	392;"	d
ANNOTALYSIS_STATIC_INLINE	src/base/dynamic_annotations.h	393;"	d
ANNOTALYSIS_STATIC_INLINE	src/base/dynamic_annotations.h	624;"	d
ANNOTALYSIS_UNPROTECTED_READ	src/base/dynamic_annotations.h	385;"	d
ANNOTALYSIS_UNPROTECTED_READ	src/base/dynamic_annotations.h	408;"	d
ANNOTALYSIS_UNPROTECTED_READ	src/base/dynamic_annotations.h	409;"	d
ANNOTATE_BARRIER_DESTROY	src/base/dynamic_annotations.h	309;"	d
ANNOTATE_BARRIER_DESTROY	src/base/dynamic_annotations.h	339;"	d
ANNOTATE_BARRIER_INIT	src/base/dynamic_annotations.h	296;"	d
ANNOTATE_BARRIER_INIT	src/base/dynamic_annotations.h	336;"	d
ANNOTATE_BARRIER_WAIT_AFTER	src/base/dynamic_annotations.h	305;"	d
ANNOTATE_BARRIER_WAIT_AFTER	src/base/dynamic_annotations.h	338;"	d
ANNOTATE_BARRIER_WAIT_BEFORE	src/base/dynamic_annotations.h	301;"	d
ANNOTATE_BARRIER_WAIT_BEFORE	src/base/dynamic_annotations.h	337;"	d
ANNOTATE_BENIGN_RACE	src/base/dynamic_annotations.h	206;"	d
ANNOTATE_BENIGN_RACE	src/base/dynamic_annotations.h	355;"	d
ANNOTATE_BENIGN_RACE_SIZED	src/base/dynamic_annotations.h	212;"	d
ANNOTATE_BENIGN_RACE_SIZED	src/base/dynamic_annotations.h	356;"	d
ANNOTATE_BENIGN_RACE_STATIC	src/base/dynamic_annotations.h	545;"	d
ANNOTATE_BENIGN_RACE_STATIC	src/base/dynamic_annotations.h	560;"	d
ANNOTATE_CONDVAR_LOCK_WAIT	src/base/dynamic_annotations.h	106;"	d
ANNOTATE_CONDVAR_LOCK_WAIT	src/base/dynamic_annotations.h	340;"	d
ANNOTATE_CONDVAR_SIGNAL	src/base/dynamic_annotations.h	116;"	d
ANNOTATE_CONDVAR_SIGNAL	src/base/dynamic_annotations.h	342;"	d
ANNOTATE_CONDVAR_SIGNAL_ALL	src/base/dynamic_annotations.h	120;"	d
ANNOTATE_CONDVAR_SIGNAL_ALL	src/base/dynamic_annotations.h	343;"	d
ANNOTATE_CONDVAR_WAIT	src/base/dynamic_annotations.h	111;"	d
ANNOTATE_CONDVAR_WAIT	src/base/dynamic_annotations.h	341;"	d
ANNOTATE_ENABLE_RACE_DETECTION	src/base/dynamic_annotations.h	252;"	d
ANNOTATE_ENABLE_RACE_DETECTION	src/base/dynamic_annotations.h	367;"	d
ANNOTATE_EXPECT_RACE	src/base/dynamic_annotations.h	317;"	d
ANNOTATE_EXPECT_RACE	src/base/dynamic_annotations.h	354;"	d
ANNOTATE_FLUSH_STATE	src/base/dynamic_annotations.h	326;"	d
ANNOTATE_FLUSH_STATE	src/base/dynamic_annotations.h	369;"	d
ANNOTATE_HAPPENS_AFTER	src/base/dynamic_annotations.h	125;"	d
ANNOTATE_HAPPENS_AFTER	src/base/dynamic_annotations.h	345;"	d
ANNOTATE_HAPPENS_BEFORE	src/base/dynamic_annotations.h	124;"	d
ANNOTATE_HAPPENS_BEFORE	src/base/dynamic_annotations.h	344;"	d
ANNOTATE_IGNORE_READS_AND_WRITES_BEGIN	src/base/dynamic_annotations.h	236;"	d
ANNOTATE_IGNORE_READS_AND_WRITES_BEGIN	src/base/dynamic_annotations.h	365;"	d
ANNOTATE_IGNORE_READS_AND_WRITES_BEGIN	src/base/dynamic_annotations.h	595;"	d
ANNOTATE_IGNORE_READS_AND_WRITES_BEGIN	src/base/dynamic_annotations.h	596;"	d
ANNOTATE_IGNORE_READS_AND_WRITES_END	src/base/dynamic_annotations.h	243;"	d
ANNOTATE_IGNORE_READS_AND_WRITES_END	src/base/dynamic_annotations.h	366;"	d
ANNOTATE_IGNORE_READS_AND_WRITES_END	src/base/dynamic_annotations.h	602;"	d
ANNOTATE_IGNORE_READS_AND_WRITES_END	src/base/dynamic_annotations.h	603;"	d
ANNOTATE_IGNORE_READS_BEGIN	src/base/dynamic_annotations.h	220;"	d
ANNOTATE_IGNORE_READS_BEGIN	src/base/dynamic_annotations.h	361;"	d
ANNOTATE_IGNORE_READS_BEGIN	src/base/dynamic_annotations.h	579;"	d
ANNOTATE_IGNORE_READS_BEGIN	src/base/dynamic_annotations.h	580;"	d
ANNOTATE_IGNORE_READS_END	src/base/dynamic_annotations.h	224;"	d
ANNOTATE_IGNORE_READS_END	src/base/dynamic_annotations.h	362;"	d
ANNOTATE_IGNORE_READS_END	src/base/dynamic_annotations.h	583;"	d
ANNOTATE_IGNORE_READS_END	src/base/dynamic_annotations.h	584;"	d
ANNOTATE_IGNORE_WRITES_BEGIN	src/base/dynamic_annotations.h	228;"	d
ANNOTATE_IGNORE_WRITES_BEGIN	src/base/dynamic_annotations.h	363;"	d
ANNOTATE_IGNORE_WRITES_BEGIN	src/base/dynamic_annotations.h	587;"	d
ANNOTATE_IGNORE_WRITES_BEGIN	src/base/dynamic_annotations.h	588;"	d
ANNOTATE_IGNORE_WRITES_END	src/base/dynamic_annotations.h	232;"	d
ANNOTATE_IGNORE_WRITES_END	src/base/dynamic_annotations.h	364;"	d
ANNOTATE_IGNORE_WRITES_END	src/base/dynamic_annotations.h	591;"	d
ANNOTATE_IGNORE_WRITES_END	src/base/dynamic_annotations.h	592;"	d
ANNOTATE_MUTEX_IS_USED_AS_CONDVAR	src/base/dynamic_annotations.h	159;"	d
ANNOTATE_MUTEX_IS_USED_AS_CONDVAR	src/base/dynamic_annotations.h	358;"	d
ANNOTATE_NEW_MEMORY	src/base/dynamic_annotations.h	170;"	d
ANNOTATE_NEW_MEMORY	src/base/dynamic_annotations.h	353;"	d
ANNOTATE_NO_OP	src/base/dynamic_annotations.h	321;"	d
ANNOTATE_NO_OP	src/base/dynamic_annotations.h	368;"	d
ANNOTATE_PCQ_CREATE	src/base/dynamic_annotations.h	181;"	d
ANNOTATE_PCQ_CREATE	src/base/dynamic_annotations.h	349;"	d
ANNOTATE_PCQ_DESTROY	src/base/dynamic_annotations.h	185;"	d
ANNOTATE_PCQ_DESTROY	src/base/dynamic_annotations.h	350;"	d
ANNOTATE_PCQ_GET	src/base/dynamic_annotations.h	194;"	d
ANNOTATE_PCQ_GET	src/base/dynamic_annotations.h	352;"	d
ANNOTATE_PCQ_PUT	src/base/dynamic_annotations.h	190;"	d
ANNOTATE_PCQ_PUT	src/base/dynamic_annotations.h	351;"	d
ANNOTATE_PUBLISH_MEMORY_RANGE	src/base/dynamic_annotations.h	134;"	d
ANNOTATE_PUBLISH_MEMORY_RANGE	src/base/dynamic_annotations.h	346;"	d
ANNOTATE_PURE_HAPPENS_BEFORE_MUTEX	src/base/dynamic_annotations.h	155;"	d
ANNOTATE_PURE_HAPPENS_BEFORE_MUTEX	src/base/dynamic_annotations.h	357;"	d
ANNOTATE_RWLOCK_ACQUIRED	src/base/dynamic_annotations.h	281;"	d
ANNOTATE_RWLOCK_ACQUIRED	src/base/dynamic_annotations.h	334;"	d
ANNOTATE_RWLOCK_CREATE	src/base/dynamic_annotations.h	272;"	d
ANNOTATE_RWLOCK_CREATE	src/base/dynamic_annotations.h	332;"	d
ANNOTATE_RWLOCK_DESTROY	src/base/dynamic_annotations.h	276;"	d
ANNOTATE_RWLOCK_DESTROY	src/base/dynamic_annotations.h	333;"	d
ANNOTATE_RWLOCK_RELEASED	src/base/dynamic_annotations.h	285;"	d
ANNOTATE_RWLOCK_RELEASED	src/base/dynamic_annotations.h	335;"	d
ANNOTATE_SWAP_MEMORY_RANGE	src/base/dynamic_annotations.h	142;"	d
ANNOTATE_SWAP_MEMORY_RANGE	src/base/dynamic_annotations.h	348;"	d
ANNOTATE_THREAD_NAME	src/base/dynamic_annotations.h	263;"	d
ANNOTATE_THREAD_NAME	src/base/dynamic_annotations.h	360;"	d
ANNOTATE_TRACE_MEMORY	src/base/dynamic_annotations.h	259;"	d
ANNOTATE_TRACE_MEMORY	src/base/dynamic_annotations.h	359;"	d
ANNOTATE_UNPROTECTED_READ	src/base/dynamic_annotations.h	559;"	d
ANNOTATE_UNPROTECTED_READ	src/base/dynamic_annotations.h	610;"	d
ANNOTATE_UNPUBLISH_MEMORY_RANGE	src/base/dynamic_annotations.h	138;"	d
ANNOTATE_UNPUBLISH_MEMORY_RANGE	src/base/dynamic_annotations.h	347;"	d
AR	Makefile	/^AR = ar$/;"	m
ARMV2	src/base/arm_instruction_set_select.h	76;"	d
ARMV3	src/base/arm_instruction_set_select.h	71;"	d
ARMV4	src/base/arm_instruction_set_select.h	65;"	d
ARMV5	src/base/arm_instruction_set_select.h	59;"	d
ARMV6	src/base/arm_instruction_set_select.h	51;"	d
ARMV7	src/base/arm_instruction_set_select.h	41;"	d
ARM_INSTRUCTION_SET_SELECT_H_	src/base/arm_instruction_set_select.h	36;"	d
ARRAYSIZE	src/tests/stack_trace_table_test.cc	16;"	d	file:
ARRAYSIZE	src/tests/stack_trace_table_test.cc	17;"	d	file:
ASM_INT3	src/windows/preamble_patcher.cc	47;"	d	file:
ASM_INT3	src/windows/preamble_patcher_with_stub.cc	44;"	d	file:
ASM_JCC32REL_0	src/windows/preamble_patcher.cc	51;"	d	file:
ASM_JCC32REL_1_MASK	src/windows/preamble_patcher.cc	52;"	d	file:
ASM_JMP	src/windows/preamble_patcher.cc	57;"	d	file:
ASM_JMP	src/windows/preamble_patcher_with_stub.cc	49;"	d	file:
ASM_JMP32ABS_0	src/windows/preamble_patcher.cc	48;"	d	file:
ASM_JMP32ABS_1	src/windows/preamble_patcher.cc	49;"	d	file:
ASM_JMP32REL	src/windows/preamble_patcher.cc	46;"	d	file:
ASM_JMP32REL	src/windows/preamble_patcher_with_stub.cc	43;"	d	file:
ASM_JMP8REL	src/windows/preamble_patcher.cc	50;"	d	file:
ASM_JMP_RAX	src/windows/preamble_patcher.cc	58;"	d	file:
ASM_JMP_RAX	src/windows/preamble_patcher_with_stub.cc	50;"	d	file:
ASM_MOVRAX_IMM	src/windows/preamble_patcher.cc	56;"	d	file:
ASM_MOVRAX_IMM	src/windows/preamble_patcher_with_stub.cc	47;"	d	file:
ASM_NOP	src/windows/preamble_patcher.cc	53;"	d	file:
ASM_NOP	src/windows/preamble_patcher_with_stub.cc	45;"	d	file:
ASM_PUSH	src/windows/preamble_patcher_with_stub.cc	51;"	d	file:
ASM_RET	src/windows/preamble_patcher_with_stub.cc	52;"	d	file:
ASM_REXW	src/windows/preamble_patcher.cc	55;"	d	file:
ASM_REXW	src/windows/preamble_patcher_with_stub.cc	48;"	d	file:
ASSERT	src/internal_logging.h	120;"	d
ASSERT_EQ	src/base/logging.h	157;"	d
ASSERT_FALSE	src/base/logging.h	168;"	d
ASSERT_GE	src/base/logging.h	161;"	d
ASSERT_GT	src/base/logging.h	162;"	d
ASSERT_LE	src/base/logging.h	159;"	d
ASSERT_LT	src/base/logging.h	160;"	d
ASSERT_NE	src/base/logging.h	158;"	d
ASSERT_STREQ	src/base/logging.h	169;"	d
ASSERT_TRUE	src/base/logging.h	167;"	d
ATOMICOPS_COMPILER_BARRIER	src/base/atomicops-internals-x86.h	389;"	d
ATOMICOPS_COMPILER_BARRIER	src/base/atomicops-internals-x86.h	64;"	d
ATOMICOPS_UNITTEST_INCLUDES	Makefile	/^ATOMICOPS_UNITTEST_INCLUDES = src\/base\/atomicops.h \\$/;"	m
ATTRIBUTE_NOINLINE	src/base/basictypes.h	228;"	d
ATTRIBUTE_NOINLINE	src/base/basictypes.h	231;"	d
ATTRIBUTE_NOINSTRUMENT	src/stacktrace_instrument-inl.h	63;"	d
ATTRIBUTE_SECTION	src/base/basictypes.h	260;"	d
ATTRIBUTE_SECTION	src/base/basictypes.h	279;"	d
ATTRIBUTE_SECTION	src/base/basictypes.h	338;"	d
ATTRIBUTE_SECTION_START	src/base/basictypes.h	274;"	d
ATTRIBUTE_SECTION_START	src/base/basictypes.h	333;"	d
ATTRIBUTE_SECTION_START	src/base/basictypes.h	342;"	d
ATTRIBUTE_SECTION_STOP	src/base/basictypes.h	275;"	d
ATTRIBUTE_SECTION_STOP	src/base/basictypes.h	334;"	d
ATTRIBUTE_SECTION_STOP	src/base/basictypes.h	343;"	d
ATTRIBUTE_UNUSED	src/base/basictypes.h	190;"	d
ATTRIBUTE_UNUSED	src/base/basictypes.h	192;"	d
ATTRIBUTE_VISIBILITY_HIDDEN	src/base/basictypes.h	235;"	d
ATTRIBUTE_VISIBILITY_HIDDEN	src/base/basictypes.h	237;"	d
ATTRIBUTE_WEAK	src/base/atomicops-internals-arm-generic.h	/^LinuxKernelCmpxchgFunc pLinuxKernelCmpxchg ATTRIBUTE_WEAK =$/;"	m	namespace:base::subtle
ATTRIBUTE_WEAK	src/base/atomicops-internals-arm-generic.h	/^LinuxKernelMemoryBarrierFunc pLinuxKernelMemoryBarrier ATTRIBUTE_WEAK =$/;"	m	namespace:base::subtle
ATTRIBUTE_WEAK	src/base/basictypes.h	227;"	d
ATTRIBUTE_WEAK	src/base/basictypes.h	230;"	d
ATTRIBUTE_WEAK	src/maybe_threads.cc	/^      __THROW ATTRIBUTE_WEAK;$/;"	v
ATTR_INITIAL_EXEC	src/tcmalloc.cc	/^    ATTR_INITIAL_EXEC$/;"	v	file:
ATTR_INITIAL_EXEC	src/thread_cache.cc	/^    ATTR_INITIAL_EXEC$/;"	m	namespace:tcmalloc	file:
ATTR_INITIAL_EXEC	src/thread_cache.h	/^  static __thread ThreadLocalData threadlocal_data_ ATTR_INITIAL_EXEC;$/;"	m	class:tcmalloc::ThreadCache
ATTR_INITIAL_EXEC	src/thread_cache.h	265;"	d
ATTR_INITIAL_EXEC	src/thread_cache.h	267;"	d
AT_FDCWD	src/base/linux_syscall_support.h	511;"	d
AT_REMOVEDIR	src/base/linux_syscall_support.h	517;"	d
AT_SYMLINK_NOFOLLOW	src/base/linux_syscall_support.h	514;"	d
AT_SYSINFO_EHDR	src/base/vdso_support.cc	54;"	d	file:
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/root\/grt\/tcmalloc\/gperftools-2.4_NW_externed_v2.0\/missing autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/root\/grt\/tcmalloc\/gperftools-2.4_NW_externed_v2.0\/missing autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/root\/grt\/tcmalloc\/gperftools-2.4_NW_externed_v2.0\/missing automake-1.14$/;"	m
AUTOMAKE_OPTIONS	Makefile	/^AUTOMAKE_OPTIONS = subdir-objects$/;"	m
AWK	Makefile	/^AWK = gawk$/;"	m
AcquirePassedObjects	src/tests/tcmalloc_unittest.cc	/^  void AcquirePassedObjects() {$/;"	f	class:testing::TesterThread
Acquire_AtomicExchange	src/base/atomicops-internals-arm-generic.h	/^inline Atomic32 Acquire_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Acquire_AtomicExchange	src/base/atomicops-internals-arm-generic.h	/^inline Atomic64 Acquire_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Acquire_AtomicExchange	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic32 Acquire_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Acquire_AtomicExchange	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic64 Acquire_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Acquire_AtomicExchange	src/base/atomicops-internals-gcc.h	/^inline Atomic32 Acquire_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Acquire_AtomicExchange	src/base/atomicops-internals-gcc.h	/^inline Atomic64 Acquire_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Acquire_AtomicExchange	src/base/atomicops-internals-linuxppc.h	/^inline Atomic32 Acquire_AtomicExchange(volatile Atomic32 *ptr,$/;"	f	namespace:base::subtle
Acquire_AtomicExchange	src/base/atomicops-internals-linuxppc.h	/^inline Atomic64 Acquire_AtomicExchange(volatile Atomic64 *ptr,$/;"	f	namespace:base::subtle
Acquire_AtomicExchange	src/base/atomicops-internals-macosx.h	/^inline Atomic32 Acquire_AtomicExchange(volatile Atomic32 *ptr,$/;"	f	namespace:base::subtle
Acquire_AtomicExchange	src/base/atomicops-internals-macosx.h	/^inline Atomic64 Acquire_AtomicExchange(volatile Atomic64 *ptr,$/;"	f	namespace:base::subtle
Acquire_AtomicExchange	src/base/atomicops-internals-mips.h	/^inline Atomic32 Acquire_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Acquire_AtomicExchange	src/base/atomicops-internals-mips.h	/^inline Atomic64 Acquire_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Acquire_AtomicExchange	src/base/atomicops-internals-windows.h	/^inline Atomic32 Acquire_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Acquire_AtomicExchange	src/base/atomicops-internals-windows.h	/^inline Atomic64 Acquire_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Acquire_AtomicExchange	src/base/atomicops-internals-x86.h	/^inline Atomic32 Acquire_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Acquire_AtomicExchange	src/base/atomicops-internals-x86.h	/^inline Atomic64 Acquire_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Acquire_AtomicExchange	src/base/atomicops.h	/^inline AtomicWord Acquire_AtomicExchange(volatile AtomicWord* ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops-internals-arm-generic.h	/^inline Atomic32 Acquire_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops-internals-arm-generic.h	/^inline Atomic64 Acquire_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic32 Acquire_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic64 Acquire_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops-internals-gcc.h	/^inline Atomic32 Acquire_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops-internals-gcc.h	/^inline Atomic64 Acquire_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops-internals-linuxppc.h	/^inline Atomic32 Acquire_CompareAndSwap(volatile Atomic32 *ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops-internals-linuxppc.h	/^inline Atomic64 Acquire_CompareAndSwap(volatile Atomic64 *ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops-internals-macosx.h	/^inline Atomic32 Acquire_CompareAndSwap(volatile Atomic32 *ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops-internals-macosx.h	/^inline Atomic64 Acquire_CompareAndSwap(volatile Atomic64 *ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops-internals-mips.h	/^inline Atomic32 Acquire_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops-internals-mips.h	/^inline Atomic64 Acquire_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops-internals-windows.h	/^inline Atomic32 Acquire_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops-internals-windows.h	/^inline Atomic64 Acquire_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops-internals-x86.h	/^inline Atomic32 Acquire_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops-internals-x86.h	/^inline Atomic64 Acquire_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops.h	/^inline Atomic32 Acquire_CompareAndSwap(volatile Atomic32* ptr,$/;"	f
Acquire_CompareAndSwap	src/base/atomicops.h	/^inline AtomicWord Acquire_CompareAndSwap(volatile AtomicWord* ptr,$/;"	f
Acquire_CompareAndSwap	src/base/atomicops.h	/^inline AtomicWord Acquire_CompareAndSwap(volatile AtomicWord* ptr,$/;"	f	namespace:base::subtle
Acquire_CompareAndSwap	src/base/atomicops.h	/^inline base::subtle::Atomic64 Acquire_CompareAndSwap($/;"	f
Acquire_Load	src/base/atomicops-internals-arm-generic.h	/^inline Atomic32 Acquire_Load(volatile const Atomic32* ptr) {$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops-internals-arm-generic.h	/^inline Atomic64 Acquire_Load(volatile const Atomic64* ptr) {$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic32 Acquire_Load(volatile const Atomic32* ptr) {$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic64 Acquire_Load(volatile const Atomic64* ptr) {$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops-internals-gcc.h	/^inline Atomic32 Acquire_Load(volatile const Atomic32* ptr) {$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops-internals-gcc.h	/^inline Atomic64 Acquire_Load(volatile const Atomic64* ptr) {$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops-internals-linuxppc.h	/^inline Atomic32 Acquire_Load(volatile const Atomic32 *ptr) {$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops-internals-linuxppc.h	/^inline Atomic64 Acquire_Load(volatile const Atomic64 *ptr) {$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops-internals-macosx.h	/^inline Atomic32 Acquire_Load(volatile const Atomic32 *ptr) {$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops-internals-macosx.h	/^inline Atomic64 Acquire_Load(volatile const Atomic64 *ptr) {$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops-internals-mips.h	/^inline Atomic32 Acquire_Load(volatile const Atomic32* ptr)$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops-internals-mips.h	/^inline Atomic64 Acquire_Load(volatile const Atomic64* ptr)$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops-internals-windows.h	/^inline Atomic32 Acquire_Load(volatile const Atomic32* ptr) {$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops-internals-windows.h	/^inline Atomic64 Acquire_Load(volatile const Atomic64* ptr) {$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops-internals-x86.h	/^inline Atomic32 Acquire_Load(volatile const Atomic32* ptr) {$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops-internals-x86.h	/^inline Atomic64 Acquire_Load(volatile const Atomic64* ptr) {$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops.h	/^inline Atomic32 Acquire_Load(volatile const Atomic32* ptr) {$/;"	f
Acquire_Load	src/base/atomicops.h	/^inline AtomicWord Acquire_Load(volatile const AtomicWord* ptr) {$/;"	f
Acquire_Load	src/base/atomicops.h	/^inline AtomicWord Acquire_Load(volatile const AtomicWord* ptr) {$/;"	f	namespace:base::subtle
Acquire_Load	src/base/atomicops.h	/^inline base::subtle::Atomic64 Acquire_Load($/;"	f
Acquire_Store	src/base/atomicops-internals-arm-generic.h	/^inline void Acquire_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
Acquire_Store	src/base/atomicops-internals-arm-generic.h	/^inline void Acquire_Store(volatile Atomic64* ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
Acquire_Store	src/base/atomicops-internals-arm-v6plus.h	/^inline void Acquire_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
Acquire_Store	src/base/atomicops-internals-arm-v6plus.h	/^inline void Acquire_Store(volatile Atomic64* ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
Acquire_Store	src/base/atomicops-internals-gcc.h	/^inline void Acquire_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
Acquire_Store	src/base/atomicops-internals-gcc.h	/^inline void Acquire_Store(volatile Atomic64* ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
Acquire_Store	src/base/atomicops-internals-linuxppc.h	/^inline void Acquire_Store(volatile Atomic32 *ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
Acquire_Store	src/base/atomicops-internals-linuxppc.h	/^inline void Acquire_Store(volatile Atomic64 *ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
Acquire_Store	src/base/atomicops-internals-macosx.h	/^inline void Acquire_Store(volatile Atomic32 *ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
Acquire_Store	src/base/atomicops-internals-macosx.h	/^inline void Acquire_Store(volatile Atomic64 *ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
Acquire_Store	src/base/atomicops-internals-mips.h	/^inline void Acquire_Store(volatile Atomic32* ptr, Atomic32 value)$/;"	f	namespace:base::subtle
Acquire_Store	src/base/atomicops-internals-mips.h	/^inline void Acquire_Store(volatile Atomic64* ptr, Atomic64 value)$/;"	f	namespace:base::subtle
Acquire_Store	src/base/atomicops-internals-windows.h	/^inline void Acquire_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
Acquire_Store	src/base/atomicops-internals-windows.h	/^inline void Acquire_Store(volatile Atomic64* ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
Acquire_Store	src/base/atomicops-internals-x86.h	/^inline void Acquire_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
Acquire_Store	src/base/atomicops-internals-x86.h	/^inline void Acquire_Store(volatile Atomic64* ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
Acquire_Store	src/base/atomicops.h	/^inline void Acquire_Store($/;"	f
Acquire_Store	src/base/atomicops.h	/^inline void Acquire_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f
Acquire_Store	src/base/atomicops.h	/^inline void Acquire_Store(volatile AtomicWord* ptr, AtomicWord value) {$/;"	f
Acquire_Store	src/base/atomicops.h	/^inline void Acquire_Store(volatile AtomicWord* ptr, AtomicWord value) {$/;"	f	namespace:base::subtle
Add	src/heap-profile-table.h	/^  inline void Add(const void* ptr, const AllocValue& v) {$/;"	f	class:HeapProfileTable::Snapshot
Add	src/internal_logging.cc	/^bool Logger::Add(const LogItem& item) {$/;"	f	class:tcmalloc::Logger
Add	src/malloc_hook.cc	/^bool HookList<T>::Add(T value_as_t) {$/;"	f	class:base::internal::HookList
Add	src/profiledata.cc	/^void ProfileData::Add(int depth, const void* const* stack) {$/;"	f	class:ProfileData
Add	src/symbolize.cc	/^void SymbolTable::Add(const void* addr) {$/;"	f	class:SymbolTable
AddDeleteHook	src/gperftools/malloc_hook.h	/^  inline static bool AddDeleteHook(DeleteHook hook) {$/;"	f	class:MallocHook
AddEntries	src/pprof	/^sub AddEntries {$/;"	s
AddEntry	src/pprof	/^sub AddEntry {$/;"	s
AddFetchTimeout	src/pprof	/^sub AddFetchTimeout {$/;"	s
AddIfNonLive	src/heap-profile-table.cc	/^void HeapProfileTable::AddIfNonLive(const void* ptr, AllocValue* v,$/;"	f	class:HeapProfileTable
AddMmapHook	src/gperftools/malloc_hook.h	/^  inline static bool AddMmapHook(MmapHook hook) {$/;"	f	class:MallocHook
AddMremapHook	src/gperftools/malloc_hook.h	/^  inline static bool AddMremapHook(MremapHook hook) {$/;"	f	class:MallocHook
AddMunmapHook	src/gperftools/malloc_hook.h	/^  inline static bool AddMunmapHook(MunmapHook hook) {$/;"	f	class:MallocHook
AddNewHook	src/gperftools/malloc_hook.h	/^  inline static bool AddNewHook(NewHook hook) {$/;"	f	class:MallocHook
AddNonLiveArgs	src/heap-profile-table.h	/^  struct AddNonLiveArgs {$/;"	s	class:HeapProfileTable
AddNum	src/internal_logging.cc	/^bool Logger::AddNum(uint64_t num, int base) {$/;"	f	class:tcmalloc::Logger
AddPcs	src/pprof	/^sub AddPcs {$/;"	s
AddPreMmapHook	src/gperftools/malloc_hook.h	/^  inline static bool AddPreMmapHook(PreMmapHook hook) {$/;"	f	class:MallocHook
AddPreSbrkHook	src/gperftools/malloc_hook.h	/^  inline static bool AddPreSbrkHook(PreSbrkHook hook) {$/;"	f	class:MallocHook
AddProfile	src/pprof	/^sub AddProfile {$/;"	s
AddSbrkHook	src/gperftools/malloc_hook.h	/^  inline static bool AddSbrkHook(SbrkHook hook) {$/;"	f	class:MallocHook
AddStr	src/internal_logging.cc	/^bool Logger::AddStr(const char* str, int n) {$/;"	f	class:tcmalloc::Logger
AddToFreelist	src/base/low_level_alloc.cc	/^static void AddToFreelist(void *v, LowLevelAlloc::Arena *arena) {$/;"	f	file:
AddToSnapshot	src/heap-profile-table.cc	/^void HeapProfileTable::AddToSnapshot(const void* ptr, AllocValue* v,$/;"	f	class:HeapProfileTable
AddTrace	src/stack_trace_table.cc	/^void StackTraceTable::AddTrace(const StackTrace& t) {$/;"	f	class:tcmalloc::StackTraceTable
AddTrace	src/tests/stack_trace_table_test.cc	/^static void AddTrace(tcmalloc::StackTraceTable* table,$/;"	f	file:
AddType	src/tests/tcmalloc_unittest.cc	/^void TestHarness::AddType(int type, int weight, const char* name) {$/;"	f	class:testing::TestHarness
AddressAdd	src/pprof	/^sub AddressAdd {$/;"	s
AddressAddUnitTest	src/pprof	/^sub AddressAddUnitTest {$/;"	s
AddressInc	src/pprof	/^sub AddressInc {$/;"	s
AddressIncUnitTest	src/pprof	/^sub AddressIncUnitTest {$/;"	s
AddressMap	src/addressmap-inl.h	/^AddressMap<Value>::AddressMap(Allocator alloc, DeAllocator dealloc)$/;"	f	class:AddressMap
AddressMap	src/addressmap-inl.h	/^class AddressMap {$/;"	c
AddressRange	src/tests/stacktrace_unittest.cc	/^struct AddressRange {$/;"	s	namespace:__anon26	file:
AddressSub	src/pprof	/^sub AddressSub {$/;"	s
AddressSubUnitTest	src/pprof	/^sub AddressSubUnitTest {$/;"	s
AddressingMethod	src/windows/mini_disassembler_types.h	/^enum AddressingMethod {$/;"	g	namespace:sidestep
AggressiveDecommitChanger	src/tests/tcmalloc_unittest.cc	/^  AggressiveDecommitChanger(size_t new_value) {$/;"	f	class:testing::AggressiveDecommitChanger
AggressiveDecommitChanger	src/tests/tcmalloc_unittest.cc	/^class AggressiveDecommitChanger {$/;"	c	namespace:testing	file:
AlignmentForSize	src/common.cc	/^int AlignmentForSize(size_t size) {$/;"	f	namespace:tcmalloc
Alloc	src/base/low_level_alloc.cc	/^void *LowLevelAlloc::Alloc(size_t request) {$/;"	f	class:LowLevelAlloc
Alloc	src/memfs_malloc.cc	/^void* HugetlbSysAllocator::Alloc(size_t size, size_t *actual_size,$/;"	f	class:HugetlbSysAllocator
Alloc	src/system-alloc.cc	/^void* DefaultSysAllocator::Alloc(size_t size, size_t *actual_size,$/;"	f	class:DefaultSysAllocator
Alloc	src/system-alloc.cc	/^void* DevMemSysAllocator::Alloc(size_t size, size_t *actual_size,$/;"	f	class:DevMemSysAllocator
Alloc	src/system-alloc.cc	/^void* MmapSysAllocator::Alloc(size_t size, size_t *actual_size,$/;"	f	class:MmapSysAllocator
Alloc	src/system-alloc.cc	/^void* SbrkSysAllocator::Alloc(size_t size, size_t *actual_size,$/;"	f	class:SbrkSysAllocator
Alloc	src/tests/system-alloc_unittest.cc	/^  void* Alloc(size_t size, size_t *actual_size, size_t alignment, int flags) {$/;"	f	class:ArraySysAllocator
Alloc	src/windows/system-alloc.cc	/^void* VirtualSysAllocator::Alloc(size_t size, size_t *actual_size,$/;"	f	class:VirtualSysAllocator
AllocContextInfo	src/heap-profile-table.h	/^  struct AllocContextInfo : public Stats {$/;"	s	class:HeapProfileTable
AllocContextIterator	src/heap-profile-table.h	/^  typedef void (*AllocContextIterator)(const AllocContextInfo& info);$/;"	t	class:HeapProfileTable
AllocHidden	src/tests/heap-checker_unittest.cc	/^static void* AllocHidden(size_t size) {$/;"	f	file:
AllocHook	src/tests/low_level_alloc_unittest.cc	/^static void AllocHook(const void *p, size_t size) {$/;"	f	file:
AllocInfo	src/heap-profile-table.h	/^  struct AllocInfo {$/;"	s	class:HeapProfileTable
AllocInternal	src/memfs_malloc.cc	/^void* HugetlbSysAllocator::AllocInternal(size_t size, size_t* actual_size,$/;"	f	class:HugetlbSysAllocator
AllocIterator	src/heap-profile-table.h	/^  typedef void (*AllocIterator)(const void* ptr, const AllocInfo& info);$/;"	t	class:HeapProfileTable
AllocLarge	src/page_heap.cc	/^Span* PageHeap::AllocLarge(Length n) {$/;"	f	class:tcmalloc::PageHeap
AllocList	src/base/low_level_alloc.cc	/^  struct AllocList {$/;"	s	namespace:low_level_alloc_internal	file:
AllocMap	src/debugallocation.cc	/^  typedef AddressMap<int> AllocMap;$/;"	t	class:MallocBlock	file:
AllocName	src/debugallocation.cc	/^  static const char* AllocName(int type) {$/;"	f	class:MallocBlock	file:
AllocObject	src/heap-checker.cc	/^  AllocObject(const void* p, size_t s, ObjectPlacement l)$/;"	f	struct:AllocObject
AllocObject	src/heap-checker.cc	/^struct AllocObject {$/;"	s	file:
AllocPageNear	src/windows/preamble_patcher.cc	/^void* PreamblePatcher::AllocPageNear(void* target) {$/;"	f	class:sidestep::PreamblePatcher
AllocPreambleBlockNear	src/windows/preamble_patcher.cc	/^unsigned char* PreamblePatcher::AllocPreambleBlockNear(void* target) {$/;"	f	class:sidestep::PreamblePatcher
AllocStuff	src/tests/thread_dealloc_unittest.cc	/^static void AllocStuff() {$/;"	f	file:
AllocValue	src/heap-profile-table.h	/^  struct AllocValue {$/;"	s	class:HeapProfileTable
AllocValueSize	src/heap-profile-table.h	/^  static size_t AllocValueSize(const AllocValue& v) { return v.bytes; }$/;"	f	class:HeapProfileTable
AllocWithArena	src/base/low_level_alloc.cc	/^void *LowLevelAlloc::AllocWithArena(size_t request, Arena *arena) {$/;"	f	class:LowLevelAlloc
Allocate	src/debugallocation.cc	/^  static MallocBlock* Allocate(size_t size, int type) {$/;"	f	class:MallocBlock
Allocate	src/heap-checker.cc	/^  static void* Allocate(size_t n) {$/;"	f	class:HeapLeakChecker::Allocator
Allocate	src/memory_region_map.h	/^    static void *Allocate(size_t n) {$/;"	f	struct:MemoryRegionMap::MyAllocator
Allocate	src/tests/heap-profiler_unittest.cc	/^static ATTRIBUTE_NOINLINE void Allocate(int start, int end, int size) {$/;"	f	file:
Allocate	src/thread_cache.h	/^inline void* ThreadCache::Allocate(size_t size, size_t cl) {$/;"	f	class:tcmalloc::ThreadCache
Allocate2	src/tests/heap-profiler_unittest.cc	/^static ATTRIBUTE_NOINLINE void Allocate2(int start, int end, int size) {$/;"	f	file:
AllocateAllocate	src/tests/sampling_test.cc	/^extern "C" void* AllocateAllocate() {$/;"	f
AllocateObject	src/tests/tcmalloc_unittest.cc	/^  void AllocateObject() {$/;"	f	class:testing::TesterThread
AllocationMap	src/heap-profile-table.h	/^  typedef AddressMap<AllocValue> AllocationMap;$/;"	t	class:HeapProfileTable
Allocator	src/addressmap-inl.h	/^  typedef void* (*Allocator)(size_t size);$/;"	t	class:AddressMap
Allocator	src/heap-checker.cc	/^class HeapLeakChecker::Allocator {$/;"	c	class:HeapLeakChecker	file:
Allocator	src/heap-profile-table.h	/^  typedef void* (*Allocator)(size_t size);$/;"	t	class:HeapProfileTable
AllocatorState	src/tests/tcmalloc_unittest.cc	/^  explicit AllocatorState(int seed) : TestHarness(seed), memalign_fraction_(0) {$/;"	f	class:testing::AllocatorState
AllocatorState	src/tests/tcmalloc_unittest.cc	/^class AllocatorState : public TestHarness {$/;"	c	namespace:testing	file:
AndersonDarlingErrFix	src/tests/sampler_test.cc	/^double AndersonDarlingErrFix(int n, double x) {$/;"	f
AndersonDarlingInf	src/tests/sampler_test.cc	/^double AndersonDarlingInf(double z) {$/;"	f
AndersonDarlingPValue	src/tests/sampler_test.cc	/^double AndersonDarlingPValue(int n, double z) {$/;"	f
AndersonDarlingStatistic	src/tests/sampler_test.cc	/^double AndersonDarlingStatistic(int n, double* random_sample) {$/;"	f
AndersonDarlingTest	src/tests/sampler_test.cc	/^double AndersonDarlingTest(int n, double* random_sample) {$/;"	f
AnnotateBarrierDestroy	src/base/dynamic_annotations.c	/^void AnnotateBarrierDestroy(const char *file, int line,$/;"	f
AnnotateBarrierInit	src/base/dynamic_annotations.c	/^void AnnotateBarrierInit(const char *file, int line,$/;"	f
AnnotateBarrierWaitAfter	src/base/dynamic_annotations.c	/^void AnnotateBarrierWaitAfter(const char *file, int line,$/;"	f
AnnotateBarrierWaitBefore	src/base/dynamic_annotations.c	/^void AnnotateBarrierWaitBefore(const char *file, int line,$/;"	f
AnnotateBenignRace	src/base/dynamic_annotations.c	/^void AnnotateBenignRace(const char *file, int line,$/;"	f
AnnotateBenignRaceSized	src/base/dynamic_annotations.c	/^void AnnotateBenignRaceSized(const char *file, int line,$/;"	f
AnnotateCondVarSignal	src/base/dynamic_annotations.c	/^void AnnotateCondVarSignal(const char *file, int line,$/;"	f
AnnotateCondVarSignalAll	src/base/dynamic_annotations.c	/^void AnnotateCondVarSignalAll(const char *file, int line,$/;"	f
AnnotateCondVarWait	src/base/dynamic_annotations.c	/^void AnnotateCondVarWait(const char *file, int line,$/;"	f
AnnotateEnableRaceDetection	src/base/dynamic_annotations.c	/^void AnnotateEnableRaceDetection(const char *file, int line, int enable){}$/;"	f
AnnotateExpectRace	src/base/dynamic_annotations.c	/^void AnnotateExpectRace(const char *file, int line,$/;"	f
AnnotateFlushState	src/base/dynamic_annotations.c	/^void AnnotateFlushState(const char *file, int line){}$/;"	f
AnnotateIgnoreReadsBegin	src/base/dynamic_annotations.c	/^void AnnotateIgnoreReadsBegin(const char *file, int line){}$/;"	f
AnnotateIgnoreReadsEnd	src/base/dynamic_annotations.c	/^void AnnotateIgnoreReadsEnd(const char *file, int line){}$/;"	f
AnnotateIgnoreWritesBegin	src/base/dynamic_annotations.c	/^void AnnotateIgnoreWritesBegin(const char *file, int line){}$/;"	f
AnnotateIgnoreWritesEnd	src/base/dynamic_annotations.c	/^void AnnotateIgnoreWritesEnd(const char *file, int line){}$/;"	f
AnnotateMutexIsUsedAsCondVar	src/base/dynamic_annotations.c	/^void AnnotateMutexIsUsedAsCondVar(const char *file, int line,$/;"	f
AnnotateNewMemory	src/base/dynamic_annotations.c	/^void AnnotateNewMemory(const char *file, int line,$/;"	f
AnnotateNoOp	src/base/dynamic_annotations.c	/^void AnnotateNoOp(const char *file, int line,$/;"	f
AnnotatePCQCreate	src/base/dynamic_annotations.c	/^void AnnotatePCQCreate(const char *file, int line,$/;"	f
AnnotatePCQDestroy	src/base/dynamic_annotations.c	/^void AnnotatePCQDestroy(const char *file, int line,$/;"	f
AnnotatePCQGet	src/base/dynamic_annotations.c	/^void AnnotatePCQGet(const char *file, int line,$/;"	f
AnnotatePCQPut	src/base/dynamic_annotations.c	/^void AnnotatePCQPut(const char *file, int line,$/;"	f
AnnotatePublishMemoryRange	src/base/dynamic_annotations.c	/^void AnnotatePublishMemoryRange(const char *file, int line,$/;"	f
AnnotateRWLockAcquired	src/base/dynamic_annotations.c	/^void AnnotateRWLockAcquired(const char *file, int line,$/;"	f
AnnotateRWLockCreate	src/base/dynamic_annotations.c	/^void AnnotateRWLockCreate(const char *file, int line,$/;"	f
AnnotateRWLockDestroy	src/base/dynamic_annotations.c	/^void AnnotateRWLockDestroy(const char *file, int line,$/;"	f
AnnotateRWLockReleased	src/base/dynamic_annotations.c	/^void AnnotateRWLockReleased(const char *file, int line,$/;"	f
AnnotateThreadName	src/base/dynamic_annotations.c	/^void AnnotateThreadName(const char *file, int line,$/;"	f
AnnotateTraceMemory	src/base/dynamic_annotations.c	/^void AnnotateTraceMemory(const char *file, int line,$/;"	f
AnnotateUnpublishMemoryRange	src/base/dynamic_annotations.c	/^void AnnotateUnpublishMemoryRange(const char *file, int line,$/;"	f
Arena	src/base/low_level_alloc.cc	/^  Arena() : mu(SpinLock::LINKER_INITIALIZED) {} \/\/ does nothing; for static init$/;"	f	struct:LowLevelAlloc::Arena
Arena	src/base/low_level_alloc.cc	/^  explicit Arena(int) : pagesize(0) {}  \/\/ set pagesize to zero explicitly$/;"	f	struct:LowLevelAlloc::Arena
Arena	src/base/low_level_alloc.cc	/^struct LowLevelAlloc::Arena {$/;"	s	class:LowLevelAlloc	file:
ArenaInit	src/base/low_level_alloc.cc	/^static void ArenaInit(LowLevelAlloc::Arena *arena) {$/;"	f	file:
ArenaLock	src/base/low_level_alloc.cc	/^  class SCOPED_LOCKABLE ArenaLock {$/;"	c	namespace:__anon43	file:
Array	src/tests/heap-checker_unittest.cc	/^  Array() {$/;"	f	struct:Array
Array	src/tests/heap-checker_unittest.cc	/^  Array(const Array& x) {$/;"	f	struct:Array
Array	src/tests/heap-checker_unittest.cc	/^struct Array {$/;"	s	file:
ArraySysAllocator	src/tests/system-alloc_unittest.cc	/^  ArraySysAllocator() : SysAllocator() {$/;"	f	class:ArraySysAllocator
ArraySysAllocator	src/tests/system-alloc_unittest.cc	/^class ArraySysAllocator : public SysAllocator {$/;"	c	file:
AsInt	src/heap-checker.cc	/^inline static uintptr_t AsInt(const void* ptr) {$/;"	f	file:
AsPtr	src/heap-checker.cc	/^inline static const void* AsPtr(T addr) {$/;"	f	file:
AssertIsConsistent	src/memory_region_map.h	/^    void AssertIsConsistent() const {$/;"	f	struct:MemoryRegionMap::Region
AssignAttributeStartEnd	src/base/basictypes.h	/^  AssignAttributeStartEnd(const char* name, char** pstart, char** pend) {$/;"	f	class:AssignAttributeStartEnd
AssignAttributeStartEnd	src/base/basictypes.h	/^class AssignAttributeStartEnd {$/;"	c
Atomic32	src/base/atomicops-internals-arm-generic.h	/^typedef int32_t Atomic32;$/;"	t
Atomic32	src/base/atomicops-internals-arm-v6plus.h	/^typedef int32_t Atomic32;$/;"	t
Atomic32	src/base/atomicops-internals-gcc.h	/^typedef int32_t Atomic32;$/;"	t
Atomic32	src/base/atomicops-internals-linuxppc.h	/^typedef int32_t Atomic32;$/;"	t
Atomic32	src/base/atomicops-internals-macosx.h	/^typedef int32_t Atomic32;$/;"	t
Atomic32	src/base/atomicops-internals-mips.h	/^typedef int32_t Atomic32;$/;"	t
Atomic32	src/base/atomicops-internals-windows.h	/^typedef int32 Atomic32;$/;"	t
Atomic32	src/base/atomicops-internals-x86.h	/^typedef int32_t Atomic32;$/;"	t
Atomic64	src/base/atomicops-internals-arm-generic.h	/^typedef int64_t Atomic64;$/;"	t	namespace:base::subtle
Atomic64	src/base/atomicops-internals-arm-v6plus.h	/^typedef int64_t Atomic64;$/;"	t	namespace:base::subtle
Atomic64	src/base/atomicops-internals-gcc.h	/^typedef int64_t Atomic64;$/;"	t	namespace:base::subtle
Atomic64	src/base/atomicops-internals-linuxppc.h	/^typedef int64_t Atomic64;$/;"	t	namespace:base::subtle
Atomic64	src/base/atomicops-internals-macosx.h	/^typedef int64_t Atomic64;$/;"	t	namespace:base::subtle
Atomic64	src/base/atomicops-internals-mips.h	/^typedef int64_t Atomic64;$/;"	t	namespace:base::subtle
Atomic64	src/base/atomicops-internals-windows.h	/^typedef int64 Atomic64;$/;"	t	namespace:base::subtle
Atomic64	src/base/atomicops-internals-x86.h	/^typedef int64_t Atomic64;$/;"	t	namespace:base::subtle
AtomicOps_Internalx86CPUFeatures	src/base/atomicops-internals-x86.cc	/^struct AtomicOps_x86CPUFeatureStruct AtomicOps_Internalx86CPUFeatures = {$/;"	v	typeref:struct:AtomicOps_x86CPUFeatureStruct
AtomicOps_Internalx86CPUFeaturesInit	src/base/atomicops-internals-x86.cc	/^static void AtomicOps_Internalx86CPUFeaturesInit() {$/;"	f	file:
AtomicOps_x86CPUFeatureStruct	src/base/atomicops-internals-x86.h	/^struct AtomicOps_x86CPUFeatureStruct {$/;"	s
AtomicWord	src/base/atomicops.h	/^typedef intptr_t AtomicWord;$/;"	t
AtomicWordCastType	src/base/atomicops-internals-macosx.h	46;"	d
AtomicWordCastType	src/base/atomicops-internals-macosx.h	48;"	d
AutoHookIncrementNumber	src/windows/preamble_patcher_test.cc	/^int __declspec(noinline) AutoHookIncrementNumber(int i) {$/;"	f	namespace:__anon6
AutoTestingHook	src/windows/auto_testing_hook.h	/^typedef const AutoTestingHookBase& AutoTestingHook;$/;"	t	namespace:sidestep
AutoTestingHookBase	src/windows/auto_testing_hook.h	/^class AutoTestingHookBase {$/;"	c	namespace:sidestep
AutoTestingHookHolder	src/windows/auto_testing_hook.h	/^  AutoTestingHookHolder() {}  \/\/ disallow$/;"	f	class:sidestep::AutoTestingHookHolder
AutoTestingHookHolder	src/windows/auto_testing_hook.h	/^  explicit AutoTestingHookHolder(AutoTestingHookBase* hook) : hook_(hook) {}$/;"	f	class:sidestep::AutoTestingHookHolder
AutoTestingHookHolder	src/windows/auto_testing_hook.h	/^class AutoTestingHookHolder {$/;"	c	namespace:sidestep
AutoTestingHookImpl	src/windows/auto_testing_hook.h	/^  AutoTestingHookImpl(T target_function, T replacement_function, bool do_it)$/;"	f	class:sidestep::AutoTestingHookImpl
AutoTestingHookImpl	src/windows/auto_testing_hook.h	/^class AutoTestingHookImpl : public AutoTestingHookBase {$/;"	c	namespace:sidestep
AutoTestingHookInContainerTest	src/windows/preamble_patcher_test.cc	/^bool AutoTestingHookInContainerTest() {$/;"	f	namespace:sidestep
AutoTestingHookTest	src/windows/preamble_patcher_test.cc	/^bool AutoTestingHookTest() {$/;"	f	namespace:sidestep
B	src/tests/heap-checker_unittest.cc	/^  virtual void B() { }$/;"	f	class:ClassMltD1
B	src/tests/heap-checker_unittest.cc	/^  virtual void B() { }$/;"	f	class:ClassMltD2
BACKTRACE_STEPS	src/tests/stacktrace_unittest.cc	/^const int BACKTRACE_STEPS = 6;$/;"	m	namespace:__anon26	file:
BACK_TRACE	src/stacktrace_instrument-inl.h	/^}BACK_TRACE;$/;"	t	typeref:struct:__anon16
BASE_ADDRESSMAP_INL_H_	src/addressmap-inl.h	82;"	d
BASE_ATOMICOPS_HAS_LDREXD_AND_STREXD	src/base/atomicops-internals-arm-v6plus.h	50;"	d
BASE_ATOMICOPS_INTERNALS_ARM_GENERIC_H_	src/base/atomicops-internals-arm-generic.h	39;"	d
BASE_ATOMICOPS_INTERNALS_ARM_V6PLUS_H_	src/base/atomicops-internals-arm-v6plus.h	40;"	d
BASE_ATOMICOPS_INTERNALS_GCC_GENERIC_H_	src/base/atomicops-internals-gcc.h	39;"	d
BASE_ATOMICOPS_INTERNALS_LINUXPPC_H_	src/base/atomicops-internals-linuxppc.h	39;"	d
BASE_ATOMICOPS_INTERNALS_MACOSX_H_	src/base/atomicops-internals-macosx.h	37;"	d
BASE_ATOMICOPS_INTERNALS_MIPS_H_	src/base/atomicops-internals-mips.h	40;"	d
BASE_ATOMICOPS_INTERNALS_WINDOWS_H_	src/base/atomicops-internals-windows.h	40;"	d
BASE_ATOMICOPS_INTERNALS_X86_H_	src/base/atomicops-internals-x86.h	40;"	d
BASE_AUXILIARY_SYNCHRONIZATION_PROFILING_H_	src/base/synchronization_profiling.h	36;"	d
BASE_COMMANDLINEFLAGS_H_	src/base/commandlineflags.h	50;"	d
BASE_DYNAMIC_ANNOTATIONS_H_	src/base/dynamic_annotations.h	58;"	d
BASE_ELF_MEM_IMAGE_H_	src/base/elf_mem_image.h	37;"	d
BASE_GETPC_H_	src/getpc.h	45;"	d
BASE_HAS_ATOMIC64	src/base/atomicops-internals-arm-v6plus.h	168;"	d
BASE_HAS_ATOMIC64	src/base/atomicops-internals-linuxppc.h	44;"	d
BASE_HAS_ATOMIC64	src/base/atomicops-internals-macosx.h	52;"	d
BASE_HAS_ATOMIC64	src/base/atomicops-internals-mips.h	43;"	d
BASE_HAS_ATOMIC64	src/base/atomicops-internals-windows.h	49;"	d
BASE_HAS_ATOMIC64	src/base/atomicops-internals-x86.h	44;"	d
BASE_HEAP_CHECKER_H_	src/gperftools/heap-checker.h	53;"	d
BASE_HEAP_PROFILER_H_	src/gperftools/heap-profiler.h	52;"	d
BASE_HEAP_PROFILE_TABLE_H_	src/heap-profile-table.h	37;"	d
BASE_MALLOC_EXTENSION_H_	src/gperftools/malloc_extension.h	43;"	d
BASE_MEMORY_REGION_MAP_H_	src/memory_region_map.h	36;"	d
BASE_PROFILEDATA_H_	src/profiledata.h	42;"	d
BASE_PROFILER_H_	src/gperftools/profiler.h	61;"	d
BASE_PROFILE_HANDLER_H_	src/profile-handler.h	47;"	d
BASE_RAW_PRINTER_H_	src/raw_printer.h	44;"	d
BASE_SPINLOCK_H_	src/base/spinlock.h	40;"	d
BASE_SPINLOCK_INTERNAL_H_	src/base/spinlock_internal.h	37;"	d
BASE_STACKTRACE_ARM_INL_H_	src/stacktrace_arm-inl.h	37;"	d
BASE_STACKTRACE_GENERIC_INL_H_	src/stacktrace_generic-inl.h	40;"	d
BASE_STACKTRACE_INSTRUMENT_INL_H_	src/stacktrace_instrument-inl.h	46;"	d
BASE_STACKTRACE_LIBINWIND_INL_H_	src/stacktrace_libunwind-inl.h	37;"	d
BASE_STACKTRACE_POWERPC_INL_H_	src/stacktrace_powerpc-darwin-inl.h	38;"	d
BASE_STACKTRACE_POWERPC_INL_H_	src/stacktrace_powerpc-inl.h	41;"	d
BASE_STACKTRACE_POWERPC_INL_H_	src/stacktrace_powerpc-linux-inl.h	41;"	d
BASE_STACKTRACE_UNW_CONTEXT_IS_UCONTEXT	src/stacktrace_libunwind-inl.h	62;"	d
BASE_STACKTRACE_WIN32_INL_H_	src/stacktrace_win32-inl.h	54;"	d
BASE_STACKTRACE_X86_INL_H_	src/stacktrace_x86-inl.h	37;"	d
BASE_STL_ALLOCATOR_H_	src/base/stl_allocator.h	37;"	d
BASE_THREAD_ANNOTATIONS_H_	src/base/thread_annotations.h	46;"	d
BASE_VDSO_SUPPORT_H_	src/base/vdso_support.h	56;"	d
BP	src/base/elfcore.h	70;"	d
BP	src/base/elfcore.h	94;"	d
BaseName	src/pprof	/^sub BaseName {$/;"	s
BecomeIdle	src/thread_cache.cc	/^void ThreadCache::BecomeIdle() {$/;"	f	class:tcmalloc::ThreadCache
BeforeConstructorsLocked	src/heap-checker.cc	/^void HeapLeakChecker::BeforeConstructorsLocked() {$/;"	f	class:HeapLeakChecker
BeginRegionLocked	src/memory_region_map.cc	/^MemoryRegionMap::RegionIterator MemoryRegionMap::BeginRegionLocked() {$/;"	f	class:MemoryRegionMap
BlockDesc	src/tests/low_level_alloc_unittest.cc	/^struct BlockDesc {$/;"	s	file:
BlockID	src/addressmap-inl.h	/^  static int BlockID(Number address) {$/;"	f	class:AddressMap
BriefNoLeaks	src/gperftools/heap-checker.h	/^  bool BriefNoLeaks()  { return NoLeaks(); }$/;"	f	class:HeapLeakChecker
BriefSameHeap	src/gperftools/heap-checker.h	/^  bool BriefSameHeap() { return NoLeaks(); }$/;"	f	class:HeapLeakChecker
Bucket	src/heap-profile-table.h	/^  typedef HeapProfileBucket Bucket;$/;"	t	class:HeapProfileTable
Bucket	src/profiledata.h	/^  struct Bucket {$/;"	s	class:ProfileData
Bucket	src/stack_trace_table.h	/^  struct Bucket {$/;"	s	class:tcmalloc::StackTraceTable
Buffer	src/base/sysinfo.h	/^  struct Buffer {$/;"	s	class:ProcMapsIterator
BufferArgs	src/heap-profile-table.h	/^    BufferArgs(char* buf_arg, int buflen_arg, int bufsize_arg)$/;"	f	struct:HeapProfileTable::BufferArgs
BufferArgs	src/heap-profile-table.h	/^  struct BufferArgs {$/;"	s	class:HeapProfileTable
BusyThread	src/tests/profile-handler_unittest.cc	/^  BusyThread() : stop_work_(false) {$/;"	f	class:__anon28::BusyThread
BusyThread	src/tests/profile-handler_unittest.cc	/^class BusyThread : public Thread {$/;"	c	namespace:__anon28	file:
ByAllocatedSpace	src/heap-profile-table.cc	/^static bool ByAllocatedSpace(HeapProfileTable::Stats* a,$/;"	f	file:
ByName	src/pprof	/^sub ByName {$/;"	s
ByteSizeForClass	src/common.h	/^  inline size_t ByteSizeForClass(size_t cl) {$/;"	f	class:tcmalloc::SizeMap
BytesLeaked	src/heap-checker.cc	/^ssize_t HeapLeakChecker::BytesLeaked() const {$/;"	f	class:HeapLeakChecker
C	src/tests/heap-checker_unittest.cc	/^  virtual void C() { }$/;"	f	class:ClassMltD1
CACHEEX_H_	src/cacheex.h	2;"	d
CACHEEX_LIBS	Makefile	/^CACHEEX_LIBS = ${LIBCACHEEX_DIR}\/libcacheex.so ${PAPI_LIBS} ${TCMALLOC_LIBS}$/;"	m
CACHELINE_ALIGNED	src/base/basictypes.h	349;"	d
CACHELINE_ALIGNED	src/base/basictypes.h	351;"	d
CACHELINE_ALIGNED	src/base/basictypes.h	353;"	d
CACHELINE_ALIGNED	src/base/basictypes.h	356;"	d
CACHELINE_ALIGNED	src/base/basictypes.h	358;"	d
CACHELINE_ALIGNED	src/base/basictypes.h	364;"	d
CACHELINE_ALIGNED	src/system-alloc.cc	/^} CACHELINE_ALIGNED;$/;"	v	typeref:union:MemoryAligner
CACHELINE_ALIGNED	src/thread_cache.h	/^} CACHELINE_ALIGNED;$/;"	m	namespace:tcmalloc	typeref:class:tcmalloc::ThreadCache
CACHE_LINE_SZ	src/cacheex.h	22;"	d
CALLBACK_COMPLETED	src/heap-checker.cc	/^  CALLBACK_COMPLETED,$/;"	e	enum:__anon34	file:
CALLBACK_NOT_STARTED	src/heap-checker.cc	/^  CALLBACK_NOT_STARTED,$/;"	e	enum:__anon34	file:
CALLBACK_STARTED	src/heap-checker.cc	/^  CALLBACK_STARTED,$/;"	e	enum:__anon34	file:
CALL_FN_W_10W	src/third_party/valgrind.h	1322;"	d
CALL_FN_W_10W	src/third_party/valgrind.h	1765;"	d
CALL_FN_W_10W	src/third_party/valgrind.h	2271;"	d
CALL_FN_W_10W	src/third_party/valgrind.h	2826;"	d
CALL_FN_W_10W	src/third_party/valgrind.h	3387;"	d
CALL_FN_W_10W	src/third_party/valgrind.h	888;"	d
CALL_FN_W_11W	src/third_party/valgrind.h	1362;"	d
CALL_FN_W_11W	src/third_party/valgrind.h	1811;"	d
CALL_FN_W_11W	src/third_party/valgrind.h	2323;"	d
CALL_FN_W_11W	src/third_party/valgrind.h	2880;"	d
CALL_FN_W_11W	src/third_party/valgrind.h	3441;"	d
CALL_FN_W_11W	src/third_party/valgrind.h	926;"	d
CALL_FN_W_12W	src/third_party/valgrind.h	1404;"	d
CALL_FN_W_12W	src/third_party/valgrind.h	1861;"	d
CALL_FN_W_12W	src/third_party/valgrind.h	2379;"	d
CALL_FN_W_12W	src/third_party/valgrind.h	2938;"	d
CALL_FN_W_12W	src/third_party/valgrind.h	3499;"	d
CALL_FN_W_12W	src/third_party/valgrind.h	967;"	d
CALL_FN_W_5W	src/third_party/valgrind.h	1156;"	d
CALL_FN_W_5W	src/third_party/valgrind.h	1597;"	d
CALL_FN_W_5W	src/third_party/valgrind.h	2073;"	d
CALL_FN_W_5W	src/third_party/valgrind.h	2618;"	d
CALL_FN_W_5W	src/third_party/valgrind.h	3179;"	d
CALL_FN_W_5W	src/third_party/valgrind.h	730;"	d
CALL_FN_W_6W	src/third_party/valgrind.h	1184;"	d
CALL_FN_W_6W	src/third_party/valgrind.h	1625;"	d
CALL_FN_W_6W	src/third_party/valgrind.h	2107;"	d
CALL_FN_W_6W	src/third_party/valgrind.h	2654;"	d
CALL_FN_W_6W	src/third_party/valgrind.h	3215;"	d
CALL_FN_W_6W	src/third_party/valgrind.h	757;"	d
CALL_FN_W_7W	src/third_party/valgrind.h	1214;"	d
CALL_FN_W_7W	src/third_party/valgrind.h	1655;"	d
CALL_FN_W_7W	src/third_party/valgrind.h	2143;"	d
CALL_FN_W_7W	src/third_party/valgrind.h	2692;"	d
CALL_FN_W_7W	src/third_party/valgrind.h	3253;"	d
CALL_FN_W_7W	src/third_party/valgrind.h	786;"	d
CALL_FN_W_8W	src/third_party/valgrind.h	1248;"	d
CALL_FN_W_8W	src/third_party/valgrind.h	1688;"	d
CALL_FN_W_8W	src/third_party/valgrind.h	2182;"	d
CALL_FN_W_8W	src/third_party/valgrind.h	2733;"	d
CALL_FN_W_8W	src/third_party/valgrind.h	3294;"	d
CALL_FN_W_8W	src/third_party/valgrind.h	818;"	d
CALL_FN_W_9W	src/third_party/valgrind.h	1284;"	d
CALL_FN_W_9W	src/third_party/valgrind.h	1723;"	d
CALL_FN_W_9W	src/third_party/valgrind.h	2223;"	d
CALL_FN_W_9W	src/third_party/valgrind.h	2776;"	d
CALL_FN_W_9W	src/third_party/valgrind.h	3337;"	d
CALL_FN_W_9W	src/third_party/valgrind.h	852;"	d
CALL_FN_W_W	src/third_party/valgrind.h	1064;"	d
CALL_FN_W_W	src/third_party/valgrind.h	1505;"	d
CALL_FN_W_W	src/third_party/valgrind.h	1957;"	d
CALL_FN_W_W	src/third_party/valgrind.h	2494;"	d
CALL_FN_W_W	src/third_party/valgrind.h	3055;"	d
CALL_FN_W_W	src/third_party/valgrind.h	642;"	d
CALL_FN_W_WW	src/third_party/valgrind.h	1084;"	d
CALL_FN_W_WW	src/third_party/valgrind.h	1525;"	d
CALL_FN_W_WW	src/third_party/valgrind.h	1983;"	d
CALL_FN_W_WW	src/third_party/valgrind.h	2522;"	d
CALL_FN_W_WW	src/third_party/valgrind.h	3083;"	d
CALL_FN_W_WW	src/third_party/valgrind.h	661;"	d
CALL_FN_W_WWW	src/third_party/valgrind.h	1106;"	d
CALL_FN_W_WWW	src/third_party/valgrind.h	1547;"	d
CALL_FN_W_WWW	src/third_party/valgrind.h	2011;"	d
CALL_FN_W_WWW	src/third_party/valgrind.h	2552;"	d
CALL_FN_W_WWW	src/third_party/valgrind.h	3113;"	d
CALL_FN_W_WWW	src/third_party/valgrind.h	682;"	d
CALL_FN_W_WWWW	src/third_party/valgrind.h	1130;"	d
CALL_FN_W_WWWW	src/third_party/valgrind.h	1571;"	d
CALL_FN_W_WWWW	src/third_party/valgrind.h	2041;"	d
CALL_FN_W_WWWW	src/third_party/valgrind.h	2584;"	d
CALL_FN_W_WWWW	src/third_party/valgrind.h	3145;"	d
CALL_FN_W_WWWW	src/third_party/valgrind.h	705;"	d
CALL_FN_W_v	src/third_party/valgrind.h	1046;"	d
CALL_FN_W_v	src/third_party/valgrind.h	1487;"	d
CALL_FN_W_v	src/third_party/valgrind.h	1933;"	d
CALL_FN_W_v	src/third_party/valgrind.h	2468;"	d
CALL_FN_W_v	src/third_party/valgrind.h	3029;"	d
CALL_FN_W_v	src/third_party/valgrind.h	626;"	d
CALL_FN_v_W	src/third_party/valgrind.h	603;"	d
CALL_FN_v_WW	src/third_party/valgrind.h	607;"	d
CALL_FN_v_WWW	src/third_party/valgrind.h	611;"	d
CALL_FN_v_v	src/third_party/valgrind.h	599;"	d
CANT_OPEN_PROC_MAPS	src/gperftools/heap-checker.h	/^    CANT_OPEN_PROC_MAPS,$/;"	e	enum:HeapLeakChecker::ProcMapsResult
CC	Makefile	/^CC = gcc$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CEEE_TESTING_SIDESTEP_AUTO_TESTING_HOOK_H_	src/windows/auto_testing_hook.h	33;"	d
CFI_ADJUST_CFA_OFFSET	src/base/linux_syscall_support.h	811;"	d
CFI_ADJUST_CFA_OFFSET	src/base/linux_syscall_support.h	814;"	d
CFLAGS	Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	packages/deb/rules	/^CFLAGS = -Wall -g$/;"	m
CHECK	src/base/logging.h	84;"	d
CHECK_CONDITION	src/internal_logging.h	109;"	d
CHECK_CONDITION	src/internal_logging.h	110;"	d
CHECK_EQ	src/base/logging.h	143;"	d
CHECK_ERR	src/base/logging.h	172;"	d
CHECK_GE	src/base/logging.h	147;"	d
CHECK_GT	src/base/logging.h	148;"	d
CHECK_LE	src/base/logging.h	145;"	d
CHECK_LT	src/base/logging.h	146;"	d
CHECK_NE	src/base/logging.h	144;"	d
CHECK_OP	src/base/logging.h	135;"	d
CHUNK_HEAD_MARK	src/tcmalloc.cc	615;"	d	file:
CLEANFILES	Makefile	/^CLEANFILES = $(pkgconfig_DATA)$/;"	m
CLONE_STACK_SIZE	src/base/linuxthreads.cc	103;"	d	file:
CLONE_STACK_SIZE	src/base/linuxthreads.cc	105;"	d	file:
CLONE_UNTRACED	src/base/linuxthreads.cc	56;"	d	file:
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILE_ASSERT	src/base/basictypes.h	195;"	d
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES = src\/gperftools\/tcmalloc.h \\$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = $(top_builddir)\/src\/config.h$/;"	m
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = $/;"	m
CPU_PROFILER_INCLUDES	Makefile	/^CPU_PROFILER_INCLUDES = $(S_CPU_PROFILER_INCLUDES) $(SG_CPU_PROFILER_INCLUDES) \\$/;"	m
CPU_PROFILER_SYMBOLS	Makefile	/^CPU_PROFILER_SYMBOLS = '(ProfilerStart|ProfilerStartWithOptions|ProfilerStop|ProfilerFlush|ProfilerEnable|ProfilerDisable|ProfilingIsEnabledForAllThreads|ProfilerRegisterThread|ProfilerGetCurrentState|ProfilerState|ProfileData|ProfileHandler)'$/;"	m
CSCOPE	Makefile	/^CSCOPE = cscope$/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CXX	Makefile	/^CXX = g++$/;"	m
CXXCOMPILE	Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXLD	Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	Makefile	/^CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
C_SHIM	src/malloc_extension.cc	346;"	d	file:
CacheManagementEnabled	src/tcmalloc.cc	/^CacheManagementEnabled() {$/;"	f	file:
CacheManagerData	src/tcmalloc.cc	/^struct CacheManagerData {$/;"	s	file:
CacheSizeClass	src/page_heap.h	/^  void CacheSizeClass(PageID p, size_t cl) const { pagemap_cache_->Put(p, cl); }$/;"	f	class:tcmalloc::PageHeap
CacheType	src/page_heap.h	/^  typedef PackedCache<32-kPageShift, uint16_t> CacheType;$/;"	t	class:tcmalloc::MapSelector
CacheType	src/page_heap.h	/^  typedef PackedCache<BITS-kPageShift, uint64_t> CacheType;$/;"	t	class:tcmalloc::MapSelector
CalculateWaitCycles	src/base/spinlock.cc	/^inline int32 SpinLock::CalculateWaitCycles(int64 wait_start_time) {$/;"	f	class:SpinLock
CallNearRelativeFunction	src/windows/shortproc.asm	/^CallNearRelativeFunction PROC$/;"	l
CallUnrollInfo	src/getpc.h	/^struct CallUnrollInfo {$/;"	s
Callback0	src/tests/heap-checker_unittest.cc	/^  inline Callback0(FunctionSignature f) : f_(f) {}$/;"	f	class:Callback0
Callback0	src/tests/heap-checker_unittest.cc	/^class Callback0 : public Closure {$/;"	c	file:
Callback1	src/tests/heap-checker_unittest.cc	/^  inline Callback1<P1>(FunctionSignature f, P1 p1) : f_(f), p1_(p1) {}$/;"	f	class:Callback1
Callback1	src/tests/heap-checker_unittest.cc	/^template <class P1> class Callback1 : public Closure {$/;"	c	file:
Callback2	src/tests/heap-checker_unittest.cc	/^  inline Callback2<P1,P2>(FunctionSignature f, P1 p1, P2 p2) : f_(f), p1_(p1), p2_(p2) {}$/;"	f	class:Callback2
Callback2	src/tests/heap-checker_unittest.cc	/^template <class P1, class P2> class Callback2 : public Closure {$/;"	c	file:
CallbackIterator	src/profile-handler.cc	/^  typedef CallbackList::iterator CallbackIterator;$/;"	t	class:ProfileHandler	file:
CallbackList	src/profile-handler.cc	/^  typedef list<ProfileHandlerToken*> CallbackList;$/;"	t	class:ProfileHandler	file:
CancelGlobalCheck	src/heap-checker.cc	/^void HeapLeakChecker::CancelGlobalCheck() {$/;"	f	class:HeapLeakChecker
CanonicalHex	src/pprof	/^sub CanonicalHex {$/;"	s
Carve	src/page_heap.cc	/^Span* PageHeap::Carve(Span* span, Length n) {$/;"	f	class:tcmalloc::PageHeap
CentralCacheLockAll	src/static_vars.cc	/^void CentralCacheLockAll()$/;"	f	namespace:tcmalloc
CentralCacheUnlockAll	src/static_vars.cc	/^void CentralCacheUnlockAll()$/;"	f	namespace:tcmalloc
CentralFreeList	src/central_freelist.h	/^  CentralFreeList() : lock_(base::LINKER_INITIALIZED) { }$/;"	f	class:tcmalloc::CentralFreeList
CentralFreeList	src/central_freelist.h	/^class CentralFreeList {$/;"	c	namespace:tcmalloc
CentralFreeListPadded	src/central_freelist.h	/^class CentralFreeListPadded : public CentralFreeListPaddedTo<$/;"	c	namespace:tcmalloc
CentralFreeListPaddedTo	src/central_freelist.h	/^class CentralFreeListPaddedTo : public CentralFreeList {$/;"	c	namespace:tcmalloc
CentralFreeListPaddedTo	src/central_freelist.h	/^class CentralFreeListPaddedTo<0> : public CentralFreeList {$/;"	c	namespace:tcmalloc
Check	src/debugallocation.cc	/^  void Check(int type) const {$/;"	f	class:MallocBlock
Check	src/page_heap.cc	/^bool PageHeap::Check() {$/;"	f	class:tcmalloc::PageHeap
Check	src/tests/profiledata_unittest.cc	/^  string Check(const ProfileDataSlot* slots, int num_slots) {$/;"	f	class:__anon30::ProfileDataChecker
CheckAddressBits	src/system-alloc.cc	/^template <> bool CheckAddressBits<8 * sizeof(void*)>(uintptr_t ptr) {$/;"	f	namespace:__anon50
CheckAddressBits	src/system-alloc.cc	/^template <int ADDRESS_BITS> bool CheckAddressBits(uintptr_t ptr) {$/;"	f	namespace:__anon50
CheckAlignment	src/tests/memalign_unittest.cc	/^static void CheckAlignment(void* p, int align) {$/;"	f	file:
CheckAndClear	src/debugallocation.cc	/^  size_t CheckAndClear(int type) {$/;"	f	class:MallocBlock	file:
CheckBlockDesc	src/tests/low_level_alloc_unittest.cc	/^static void CheckBlockDesc(const BlockDesc &d) {$/;"	f	file:
CheckCachedSizeClass	src/tcmalloc.cc	/^static inline bool CheckCachedSizeClass(void *ptr) {$/;"	f	file:
CheckCallback	src/debugallocation.cc	/^  static void CheckCallback(const void* ptr, int* type, int dummy) {$/;"	f	class:MallocBlock	file:
CheckContents	src/tests/tcmalloc_unittest.cc	/^  void CheckContents(const Object& object) {$/;"	f	class:testing::TesterThread
CheckEverything	src/debugallocation.cc	/^  static bool CheckEverything() {$/;"	f	class:MallocBlock
CheckExpensive	src/page_heap.cc	/^bool PageHeap::CheckExpensive() {$/;"	f	class:tcmalloc::PageHeap
CheckForCorruptedBuffer	src/debugallocation.cc	/^  static void CheckForCorruptedBuffer(const MallocBlockQueueEntry& queue_entry,$/;"	f	class:MallocBlock
CheckForDanglingWrites	src/debugallocation.cc	/^  static void CheckForDanglingWrites(const MallocBlockQueueEntry& queue_entry) {$/;"	f	class:MallocBlock
CheckInHookCaller	src/malloc_hook.cc	/^static inline void CheckInHookCaller() {$/;"	f	file:
CheckList	src/page_heap.cc	/^bool PageHeap::CheckList(Span* list, Length min_pages, Length max_pages,$/;"	f	class:tcmalloc::PageHeap
CheckLocked	src/debugallocation.cc	/^  void CheckLocked(int type) const {$/;"	f	class:MallocBlock	file:
CheckMean	src/tests/sampler_test.cc	/^bool CheckMean(size_t mean, int num_samples) {$/;"	f
CheckRangeCallback	src/tests/tcmalloc_unittest.cc	/^static void CheckRangeCallback(void* ptr, base::MallocRange::Type type,$/;"	f	namespace:testing::__anon29
CheckRetAddrIsInFunction	src/tests/stacktrace_unittest.cc	/^void CheckRetAddrIsInFunction(void *ret_addr, const AddressRange &range)$/;"	f	namespace:__anon26
CheckStackTrace	src/tests/stacktrace_unittest.cc	/^void ATTRIBUTE_NOINLINE CheckStackTrace(int i) {$/;"	f	namespace:__anon26
CheckStackTrace1	src/tests/stacktrace_unittest.cc	/^void ATTRIBUTE_NOINLINE CheckStackTrace1(int i) {$/;"	f	namespace:__anon26
CheckStackTrace2	src/tests/stacktrace_unittest.cc	/^void ATTRIBUTE_NOINLINE CheckStackTrace2(int i) {$/;"	f	namespace:__anon26
CheckStackTrace3	src/tests/stacktrace_unittest.cc	/^void ATTRIBUTE_NOINLINE CheckStackTrace3(int i) {$/;"	f	namespace:__anon26
CheckStackTrace4	src/tests/stacktrace_unittest.cc	/^void ATTRIBUTE_NOINLINE CheckStackTrace4(int i) {$/;"	f	namespace:__anon26
CheckStackTraceLeaf	src/tests/stacktrace_unittest.cc	/^void ATTRIBUTE_NOINLINE CheckStackTraceLeaf(void) {$/;"	f	namespace:__anon26
CheckStats	src/tests/page_heap_test.cc	/^static void CheckStats(const tcmalloc::PageHeap* ph,$/;"	f	namespace:__anon31
CheckSymbolPage	src/pprof	/^sub CheckSymbolPage {$/;"	s
CheckTracesAndReset	src/tests/stack_trace_table_test.cc	/^static void CheckTracesAndReset(tcmalloc::StackTraceTable* table,$/;"	f	file:
CheckType	src/tests/heap-checker_unittest.cc	/^enum CheckType { SAME_HEAP, NO_LEAKS };$/;"	g	file:
CheckWithSkips	src/tests/profiledata_unittest.cc	/^string ProfileDataChecker::CheckWithSkips(const ProfileDataSlot* slots,$/;"	f	class:__anon30::ProfileDataChecker
CheckedMallocResult	src/tcmalloc.cc	/^static inline void* CheckedMallocResult(void *result) {$/;"	f	file:
ClassA	src/tests/heap-checker_unittest.cc	/^  explicit ClassA(int a) : ptr(NULL) { }$/;"	f	class:ClassA
ClassA	src/tests/heap-checker_unittest.cc	/^class ClassA {$/;"	c	file:
ClassB	src/tests/heap-checker_unittest.cc	/^  ClassB() { }$/;"	f	class:ClassB
ClassB	src/tests/heap-checker_unittest.cc	/^class ClassB {$/;"	c	file:
ClassB2	src/tests/heap-checker_unittest.cc	/^  ClassB2() { }$/;"	f	class:ClassB2
ClassB2	src/tests/heap-checker_unittest.cc	/^class ClassB2 {$/;"	c	file:
ClassD	src/tests/heap-checker_unittest.cc	/^class ClassD : public ClassD1, public ClassD2 {$/;"	c	file:
ClassD1	src/tests/heap-checker_unittest.cc	/^class ClassD1 : public ClassB {$/;"	c	file:
ClassD2	src/tests/heap-checker_unittest.cc	/^class ClassD2 : public ClassB2 {$/;"	c	file:
ClassIndex	src/common.h	/^  static inline size_t ClassIndex(int s) {$/;"	f	class:tcmalloc::SizeMap
ClassMltD1	src/tests/heap-checker_unittest.cc	/^class ClassMltD1 : public ClassB, public InterfaceB, public InterfaceC {$/;"	c	file:
ClassMltD2	src/tests/heap-checker_unittest.cc	/^class ClassMltD2 : public InterfaceA, public InterfaceB, public ClassB {$/;"	c	file:
CleanDisassembly	src/pprof	/^sub CleanDisassembly {$/;"	s
CleanFileName	src/pprof	/^sub CleanFileName {$/;"	s
Cleanup	src/tests/sampler_test.cc	/^  void Cleanup() {}$/;"	f	class:OldSampler
Cleanup	src/thread_cache.cc	/^void ThreadCache::Cleanup() {$/;"	f	class:tcmalloc::ThreadCache
CleanupOldProfiles	src/heap-profile-table.cc	/^void HeapProfileTable::CleanupOldProfiles(const char* prefix) {$/;"	f	class:HeapProfileTable
Clear	src/packed-cache-inl.h	/^  void Clear(V value) {$/;"	f	class:PackedCache
Closure	src/tests/heap-checker_unittest.cc	/^class Closure {$/;"	c	file:
ClrCacheManageSkip	src/tcmalloc.cc	/^ClrCacheManageSkip() {$/;"	f	file:
Cluster	src/addressmap-inl.h	/^  struct Cluster {$/;"	s	class:AddressMap
Coalesce	src/base/low_level_alloc.cc	/^static void Coalesce(AllocList *a) {$/;"	f	file:
Commands	src/pprof	/^Commands:$/;"	l
CommitSpan	src/page_heap.cc	/^void PageHeap::CommitSpan(Span* span) {$/;"	f	class:tcmalloc::PageHeap
CompileAssert	src/base/basictypes.h	/^struct CompileAssert {$/;"	s
CompressedCGName	src/pprof	/^sub CompressedCGName {$/;"	s
ConfigureObjTools	src/pprof	/^sub ConfigureObjTools {$/;"	s
ConfigureTool	src/pprof	/^sub ConfigureTool {$/;"	s
ConstructFilename	src/base/sysinfo.cc	/^static void ConstructFilename(const char* spec, pid_t pid,$/;"	f	file:
CopyFrom	src/windows/patch_functions.cc	/^  void CopyFrom(const LibcInfo& that) {$/;"	f	class:__anon9::LibcInfo
CopyStringUntilChar	src/base/sysinfo.cc	/^static char *CopyStringUntilChar($/;"	f	file:
Count	src/malloc_extension.cc	/^uintptr_t Count(void** entry) {$/;"	f	namespace:__anon52
CountPushInstructions	src/stacktrace_x86-inl.h	/^static int CountPushInstructions(const unsigned char *const addr) {$/;"	f
CpuProfileStream	src/pprof	/^  package CpuProfileStream;$/;"	p
CpuProfiler	src/profiler.cc	/^CpuProfiler::CpuProfiler()$/;"	f	class:CpuProfiler
CpuProfiler	src/profiler.cc	/^class CpuProfiler {$/;"	c	file:
CpuProfilerSwitch	src/profiler.cc	/^static void CpuProfilerSwitch(int signal_number)$/;"	f	file:
Create	src/heap-checker.cc	/^void HeapLeakChecker::Create(const char *name, bool make_start_snapshot) {$/;"	f	class:HeapLeakChecker
Create	src/memory_region_map.h	/^    void Create(const void* start, size_t size) {$/;"	f	struct:MemoryRegionMap::Region
CreateCacheIfNecessary	src/thread_cache.cc	/^ThreadCache* ThreadCache::CreateCacheIfNecessary(int heap_type) {$/;"	f	class:tcmalloc::ThreadCache
CreateProcess	libtool	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateProcess	ltmain.sh	/^   CreateProcess().  We must quote the arguments since Win32 CreateProcess()$/;"	f
CreateThreadTimerKey	src/profile-handler.cc	/^static void CreateThreadTimerKey(pthread_key_t *pkey) {$/;"	f	file:
CumulativeProfile	src/pprof	/^sub CumulativeProfile {$/;"	s
CurrentElfClass	src/base/elf_mem_image.cc	/^typedef ElfClass<__WORDSIZE> CurrentElfClass;$/;"	t	namespace:base::__anon44	file:
CurrentLine	src/base/sysinfo.h	/^  const char *CurrentLine() const { return stext_; }$/;"	f	class:ProcMapsIterator
CurrentlyAllocatedBytes	src/tests/debugallocation_test.cc	/^static size_t CurrentlyAllocatedBytes() {$/;"	f	file:
CycleClock	src/base/cycleclock.h	/^struct CycleClock {$/;"	s
CyclesPerSecond	src/base/sysinfo.cc	/^double CyclesPerSecond(void) {$/;"	f
DATA	Makefile	/^DATA = $(dist_doc_DATA) $(pkgconfig_DATA)$/;"	m
DCHECK_EQ	src/base/logging.h	176;"	d
DCHECK_EQ	src/base/logging.h	183;"	d
DCHECK_GE	src/base/logging.h	180;"	d
DCHECK_GE	src/base/logging.h	187;"	d
DCHECK_GT	src/base/logging.h	181;"	d
DCHECK_GT	src/base/logging.h	188;"	d
DCHECK_LE	src/base/logging.h	178;"	d
DCHECK_LE	src/base/logging.h	185;"	d
DCHECK_LT	src/base/logging.h	179;"	d
DCHECK_LT	src/base/logging.h	186;"	d
DCHECK_NE	src/base/logging.h	177;"	d
DCHECK_NE	src/base/logging.h	184;"	d
DEBUG_MODE	src/base/logging.h	/^enum { DEBUG_MODE = 0 };$/;"	e	enum:__anon47
DEBUG_MODE	src/base/logging.h	/^enum { DEBUG_MODE = 1 };$/;"	e	enum:__anon48
DEB_BUILD_GNU_TYPE	packages/deb/rules	/^DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)$/;"	m
DEB_HOST_GNU_TYPE	packages/deb/rules	/^DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)$/;"	m
DECLARE_ADDRESS_LABEL	src/tests/stacktrace_unittest.cc	71;"	d	file:
DECLARE_ADDRESS_LABEL	src/tests/stacktrace_unittest.cc	95;"	d	file:
DECLARE_ATTRIBUTE_SECTION_VARS	src/base/basictypes.h	265;"	d
DECLARE_ATTRIBUTE_SECTION_VARS	src/base/basictypes.h	320;"	d
DECLARE_ATTRIBUTE_SECTION_VARS	src/base/basictypes.h	339;"	d
DECLARE_VARIABLE	src/base/commandlineflags.h	58;"	d
DECLARE_bool	src/base/commandlineflags.h	72;"	d
DECLARE_double	src/base/commandlineflags.h	95;"	d
DECLARE_int32	src/base/commandlineflags.h	78;"	d
DECLARE_int64	src/base/commandlineflags.h	84;"	d
DECLARE_string	src/base/commandlineflags.h	102;"	d
DECLARE_uint64	src/base/commandlineflags.h	89;"	d
DEFAULT_HEAP_TYPE	config_bak.h	315;"	d
DEFAULT_HEAP_TYPE	src/cacheex.h	15;"	d
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)\/src$/;"	m
DEFINE_ATTRIBUTE_SECTION_VARS	src/base/basictypes.h	269;"	d
DEFINE_ATTRIBUTE_SECTION_VARS	src/base/basictypes.h	329;"	d
DEFINE_ATTRIBUTE_SECTION_VARS	src/base/basictypes.h	341;"	d
DEFINE_VARIABLE	src/base/commandlineflags.h	64;"	d
DEFINE_bool	src/base/commandlineflags.h	74;"	d
DEFINE_double	src/base/commandlineflags.h	97;"	d
DEFINE_int32	src/base/commandlineflags.h	80;"	d
DEFINE_int64	src/base/commandlineflags.h	86;"	d
DEFINE_string	src/base/commandlineflags.h	107;"	d
DEFINE_uint64	src/base/commandlineflags.h	91;"	d
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DISABLE_LIBRARY_ALLOCS	src/gperftools/heap-checker.h	/^    DISABLE_LIBRARY_ALLOCS$/;"	e	enum:HeapLeakChecker::ProcMapsTask
DISALLOW_COPY_AND_ASSIGN	src/base/basictypes.h	127;"	d
DISALLOW_EVIL_CONSTRUCTORS	src/base/basictypes.h	122;"	d
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz $(distdir).zip$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = INSTALL NEWS README AUTHORS ChangeLog \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(liblogging_la_SOURCES) \\$/;"	m
DIST_TARGETS	Makefile	/^DIST_TARGETS = dist-gzip dist-zip$/;"	m
DLLTOOL	Makefile	/^DLLTOOL = false$/;"	m
DLL_Init	src/span.cc	/^void DLL_Init(Span* list) {$/;"	f	namespace:tcmalloc
DLL_IsEmpty	src/span.h	/^inline bool DLL_IsEmpty(const Span* list) {$/;"	f	namespace:tcmalloc
DLL_Length	src/span.cc	/^int DLL_Length(const Span* list) {$/;"	f	namespace:tcmalloc
DLL_Prepend	src/span.cc	/^void DLL_Prepend(Span* list, Span* span) {$/;"	f	namespace:tcmalloc
DLL_Remove	src/span.cc	/^void DLL_Remove(Span* span) {$/;"	f	namespace:tcmalloc
DO_NOT_SYMBOLIZE	src/gperftools/heap-checker.h	/^  enum ShouldSymbolize { SYMBOLIZE, DO_NOT_SYMBOLIZE };$/;"	e	enum:HeapLeakChecker::ShouldSymbolize
DSYMUTIL	Makefile	/^DSYMUTIL = $/;"	m
DTSL	src/tests/heap-checker_unittest.cc	1494;"	d	file:
DTSL	src/tests/heap-checker_unittest.cc	1507;"	d	file:
DUMPBIN	Makefile	/^DUMPBIN = $/;"	m
DUMPER	src/base/elfcore.h	56;"	d
DYNAMIC_ANNOTATIONS_ENABLED	src/base/dynamic_annotations.h	61;"	d
DYNAMIC_ANNOTATIONS_EXTERNAL_IMPL	src/base/dynamic_annotations.c	59;"	d	file:
DanglingWriteChecker	src/debugallocation.cc	/^void DanglingWriteChecker() {$/;"	f
DeAllocHidden	src/tests/heap-checker_unittest.cc	/^static void DeAllocHidden(void** ptr) {$/;"	f	file:
DeAllocator	src/addressmap-inl.h	/^  typedef void  (*DeAllocator)(void* ptr);$/;"	t	class:AddressMap
DeAllocator	src/heap-profile-table.h	/^  typedef void  (*DeAllocator)(void* ptr);$/;"	t	class:HeapProfileTable
DeallocName	src/debugallocation.cc	/^  static const char* DeallocName(int type) {$/;"	f	class:MallocBlock	file:
Deallocate	src/debugallocation.cc	/^  void Deallocate(int type) {$/;"	f	class:MallocBlock
Deallocate	src/tests/heap-profiler_unittest.cc	/^static void Deallocate(int start, int end) {$/;"	f	file:
Deallocate	src/thread_cache.h	/^inline void ThreadCache::Deallocate(void* ptr, size_t cl) {$/;"	f	class:tcmalloc::ThreadCache
Deallocation	doc/tcmalloc.html	/^<h2><A NAME="Deallocation">Deallocation<\/A><\/h2>$/;"	a
DebugAllocate	src/debugallocation.cc	/^static inline void* DebugAllocate(size_t size, int type) {$/;"	f	file:
DebugDeallocate	src/debugallocation.cc	/^static inline void DebugDeallocate(void* ptr, int type) {$/;"	f	file:
DebugMallocImplementation	src/debugallocation.cc	/^class DebugMallocImplementation : public TCMallocImplementation {$/;"	c	file:
DebuggingLibrary	src/pprof	/^sub DebuggingLibrary {$/;"	s
DecommitSpan	src/page_heap.cc	/^bool PageHeap::DecommitSpan(Span* span) {$/;"	f	class:tcmalloc::PageHeap
DefaultArena	src/base/low_level_alloc.cc	/^LowLevelAlloc::Arena *LowLevelAlloc::DefaultArena() {$/;"	f	class:LowLevelAlloc
DefaultSysAllocator	src/system-alloc.cc	/^  DefaultSysAllocator() : SysAllocator() {$/;"	f	class:DefaultSysAllocator
DefaultSysAllocator	src/system-alloc.cc	/^class DefaultSysAllocator : public SysAllocator {$/;"	c	file:
Delay	src/tests/profile-handler_unittest.cc	/^void Delay(int delay_ns) {$/;"	f	namespace:__anon28
Delete	src/page_heap.cc	/^void PageHeap::Delete(Span* span) {$/;"	f	class:tcmalloc::PageHeap
Delete	src/page_heap_allocator.h	/^  void Delete(T* p) {$/;"	f	class:tcmalloc::PageHeapAllocator
DeleteAndNull	src/heap-checker.cc	/^  template<typename T> static void DeleteAndNull(T** p) {$/;"	f	class:HeapLeakChecker::Allocator
DeleteAndNullIfNot	src/heap-checker.cc	/^  template<typename T> static void DeleteAndNullIfNot(T** p) {$/;"	f	class:HeapLeakChecker::Allocator
DeleteArena	src/base/low_level_alloc.cc	/^bool LowLevelAlloc::DeleteArena(Arena *arena) {$/;"	f	class:LowLevelAlloc
DeleteCache	src/thread_cache.cc	/^void ThreadCache::DeleteCache(ThreadCache* heap) {$/;"	f	class:tcmalloc::ThreadCache
DeleteHeap	src/tests/tcmalloc_unittest.cc	/^  void DeleteHeap() {$/;"	f	class:testing::TesterThread
DeleteHook	src/gperftools/malloc_hook.h	/^  typedef MallocHook_DeleteHook DeleteHook;$/;"	t	class:MallocHook
DeleteHook	src/heap-checker.cc	/^static void DeleteHook(const void* ptr) {$/;"	f	file:
DeleteHook	src/heap-profiler.cc	/^void DeleteHook(const void* ptr) {$/;"	f
DeleteMatchingFiles	src/windows/port.cc	/^void DeleteMatchingFiles(const char* prefix, const char* full_glob) {$/;"	f
DeleteSpan	src/span.cc	/^void DeleteSpan(Span* span) {$/;"	f	namespace:tcmalloc
DeleteUnsignedCharArray	src/windows/preamble_patcher.cc	/^  DeleteUnsignedCharArray(unsigned char* array) : array_(array) {$/;"	f	class:sidestep::DeleteUnsignedCharArray
DeleteUnsignedCharArray	src/windows/preamble_patcher.cc	/^class DeleteUnsignedCharArray {$/;"	c	namespace:sidestep	file:
Depth	src/malloc_extension.cc	/^uintptr_t Depth(void** entry) {$/;"	f	namespace:__anon52
DestrFnClosure	src/windows/port.cc	/^struct DestrFnClosure {$/;"	s	file:
DestroyThreadCache	src/thread_cache.cc	/^void ThreadCache::DestroyThreadCache(void* ptr) {$/;"	f	class:tcmalloc::ThreadCache
DevMemSysAllocator	src/system-alloc.cc	/^  DevMemSysAllocator() : SysAllocator() {$/;"	f	class:DevMemSysAllocator
DevMemSysAllocator	src/system-alloc.cc	/^class DevMemSysAllocator : public SysAllocator {$/;"	c	file:
DirectTestSTLAlloc	src/tests/heap-checker_unittest.cc	/^static void DirectTestSTLAlloc(Alloc allocator, const char* name) {$/;"	f	file:
DirtyStack	src/base/linuxthreads.cc	/^static void DirtyStack(size_t amount) {$/;"	f	file:
DisableCacheManagement	src/tcmalloc.cc	/^DisableCacheManagement() {$/;"	f	file:
DisableChecksFromToLocked	src/heap-checker.cc	/^void HeapLeakChecker::DisableChecksFromToLocked(const void* start_address,$/;"	f	class:HeapLeakChecker
DisableChecksIn	src/heap-checker.cc	/^void HeapLeakChecker::DisableChecksIn(const char* pattern) {$/;"	f	class:HeapLeakChecker
DisableHandler	src/profile-handler.cc	/^void ProfileHandler::DisableHandler() {$/;"	f	class:ProfileHandler
DisableHandler	src/profiler.cc	/^void CpuProfiler::DisableHandler() {$/;"	f	class:CpuProfiler
DisableLibraryAllocsLocked	src/heap-checker.cc	/^void HeapLeakChecker::DisableLibraryAllocsLocked(const char* library,$/;"	f	class:HeapLeakChecker
DisabledRangeMap	src/heap-checker.cc	/^           > DisabledRangeMap;$/;"	t	file:
Disabler	src/gperftools/heap-checker.h	/^  class Disabler {$/;"	c	class:HeapLeakChecker
Disabler	src/heap-checker.cc	/^HeapLeakChecker::Disabler::Disabler() {$/;"	f	class:HeapLeakChecker::Disabler
Disassemble	src/pprof	/^sub Disassemble {$/;"	s
Disassemble	src/windows/mini_disassembler.cc	/^InstructionType MiniDisassembler::Disassemble($/;"	f	class:sidestep::MiniDisassembler
DllMain	src/windows/port.cc	/^BOOL WINAPI DllMain(HINSTANCE h, DWORD dwReason, PVOID pv) {$/;"	f
DoAllocHidden	src/tests/heap-checker_unittest.cc	/^static void DoAllocHidden(size_t size, void** ptr) {$/;"	f	file:
DoAllocWithArena	src/base/low_level_alloc.cc	/^static void *DoAllocWithArena(size_t request, LowLevelAlloc::Arena *arena) {$/;"	f	file:
DoDeAllocHidden	src/tests/heap-checker_unittest.cc	/^static void DoDeAllocHidden(void** ptr) {$/;"	f	file:
DoFindRegionLocked	src/memory_region_map.cc	/^MemoryRegionMap::DoFindRegionLocked(uintptr_t addr) {$/;"	f	class:MemoryRegionMap
DoGetHeapProfileLocked	src/heap-profiler.cc	/^static char* DoGetHeapProfileLocked(char* buf, int buflen) {$/;"	f	file:
DoIgnoreObject	src/heap-checker.cc	/^void HeapLeakChecker::DoIgnoreObject(const void* ptr) {$/;"	f	class:HeapLeakChecker
DoInsertRegionLocked	src/memory_region_map.cc	/^inline void MemoryRegionMap::DoInsertRegionLocked(const Region& region) {$/;"	f	class:MemoryRegionMap
DoMainHeapCheck	src/heap-checker.cc	/^bool HeapLeakChecker::DoMainHeapCheck() {$/;"	f	class:HeapLeakChecker
DoNoLeaks	src/heap-checker.cc	/^bool HeapLeakChecker::DoNoLeaks(ShouldSymbolize should_symbolize) {$/;"	f	class:HeapLeakChecker
DoRun	src/tests/profile-handler_unittest.cc	/^  static void* DoRun(void* cls) {$/;"	f	class:__anon28::Thread	file:
DoRunHidden	src/tests/heap-checker_unittest.cc	/^static void DoRunHidden(Closure* c, int n) {$/;"	f	file:
DoSampledAllocation	src/tcmalloc.cc	/^static void* DoSampledAllocation(size_t size) {$/;"	f	file:
DoTestSTLAlloc	src/tests/heap-checker_unittest.cc	/^static void DoTestSTLAlloc() {$/;"	f	file:
DoTestSTLAllocInverse	src/tests/heap-checker_unittest.cc	/^static void DoTestSTLAllocInverse(IntSet** setx) {$/;"	f	file:
DoWipeStack	src/tests/heap-checker_unittest.cc	/^\/*static*\/ void DoWipeStack(int n) {$/;"	f
DumpAddressMap	src/malloc_extension.cc	/^static void DumpAddressMap(string* result) {$/;"	f	file:
DumpArgs	src/heap-profile-table.h	/^    DumpArgs(RawFD fd_arg, Stats* profile_stats_arg)$/;"	f	struct:HeapProfileTable::DumpArgs
DumpArgs	src/heap-profile-table.h	/^  struct DumpArgs {$/;"	s	class:HeapProfileTable
DumpBucketIterator	src/heap-profile-table.cc	/^void HeapProfileTable::DumpBucketIterator(const Bucket* bucket,$/;"	f	class:HeapProfileTable
DumpHeapGrowthStackTraces	src/tcmalloc.cc	/^static void** DumpHeapGrowthStackTraces() {$/;"	f	file:
DumpNonLiveIterator	src/heap-profile-table.cc	/^void HeapProfileTable::DumpNonLiveIterator(const void* ptr, AllocValue* v,$/;"	f	class:HeapProfileTable
DumpProcSelfMaps	src/base/sysinfo.cc	/^void DumpProcSelfMaps(RawFD fd) {$/;"	f	namespace:tcmalloc
DumpProcSelfMaps	src/profiledata.cc	/^static void DumpProcSelfMaps(int fd) {$/;"	f	file:
DumpProfileLocked	src/heap-profiler.cc	/^static void DumpProfileLocked(const char* reason) {$/;"	f	file:
DumpStats	src/tcmalloc.cc	/^static void DumpStats(TCMalloc_Printer* out, int level) {$/;"	f	file:
DumpStats	src/tests/system-alloc_unittest.cc	/^  void DumpStats() {$/;"	f	class:ArraySysAllocator
DumpSystemAllocatorStats	src/windows/system-alloc.cc	/^void DumpSystemAllocatorStats(TCMalloc_Printer* printer) {$/;"	f
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/bin\/grep -E$/;"	m
ERRNO	src/base/linuxthreads.cc	167;"	d	file:
ERROR	src/base/logging.h	/^enum LogSeverity {INFO = -1, WARNING = -2, ERROR = -3, FATAL = -4};$/;"	e	enum:LogSeverity
ERROR	src/base/logging.h	193;"	d
ERROR	src/heap-checker.cc	65;"	d	file:
ETAGS	Makefile	/^ETAGS = etags$/;"	m
EXCLUSIVE_LOCKS_REQUIRED	src/base/thread_annotations.h	93;"	d
EXCLUSIVE_LOCK_FUNCTION	src/base/spinlock.h	/^  inline explicit SpinLockHolder(SpinLock* l) EXCLUSIVE_LOCK_FUNCTION(l)$/;"	f	class:SpinLockHolder
EXCLUSIVE_LOCK_FUNCTION	src/base/thread_annotations.h	115;"	d
EXCLUSIVE_TRYLOCK_FUNCTION	src/base/spinlock.h	/^  inline bool TryLock() EXCLUSIVE_TRYLOCK_FUNCTION(true) {$/;"	f	class:SpinLock
EXCLUSIVE_TRYLOCK_FUNCTION	src/base/thread_annotations.h	121;"	d
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXPECT_EQ	src/base/logging.h	151;"	d
EXPECT_FALSE	src/base/logging.h	165;"	d
EXPECT_GE	src/base/logging.h	155;"	d
EXPECT_GT	src/base/logging.h	156;"	d
EXPECT_LE	src/base/logging.h	153;"	d
EXPECT_LT	src/base/logging.h	154;"	d
EXPECT_NE	src/base/logging.h	152;"	d
EXPECT_STREQ	src/base/logging.h	166;"	d
EXPECT_TRUE	src/base/logging.h	164;"	d
EXTERN_C	src/windows/port.h	490;"	d
EXTERN_C	src/windows/port.h	92;"	d
EXTERN_C	src/windows/port.h	94;"	d
EXTRA_DIST	Makefile	/^EXTRA_DIST = packages\/rpm.sh packages\/rpm\/rpm.spec packages\/deb.sh packages\/deb \\$/;"	m
EXTRA_INSTALL	Makefile	/^EXTRA_INSTALL = $/;"	m
ElfClass	src/base/elf_mem_image.cc	/^template <> class ElfClass<32> {$/;"	c	namespace:base::__anon44	file:
ElfClass	src/base/elf_mem_image.cc	/^template <> class ElfClass<64> {$/;"	c	namespace:base::__anon44	file:
ElfClass	src/base/elf_mem_image.cc	/^template <int N> class ElfClass {$/;"	c	namespace:base::__anon44	file:
ElfMemImage	src/base/elf_mem_image.cc	/^ElfMemImage::ElfMemImage(const void *base) {$/;"	f	class:base::ElfMemImage
ElfMemImage	src/base/elf_mem_image.h	/^class ElfMemImage {$/;"	c	namespace:base
ElfW	src/base/elf_mem_image.cc	/^  static int ElfBind(const ElfW(Sym) *) {$/;"	f	class:base::__anon44::ElfClass
ElfW	src/base/elf_mem_image.cc	/^  static int ElfType(const ElfW(Sym) *) {$/;"	f	class:base::__anon44::ElfClass
Empty	src/heap-profile-table.h	/^  bool Empty() const {$/;"	f	class:HeapProfileTable::Snapshot
EnableCacheManagement	src/tcmalloc.cc	/^EnableCacheManagement() {$/;"	f	file:
EnableHandler	src/profile-handler.cc	/^void ProfileHandler::EnableHandler() {$/;"	f	class:ProfileHandler
EnableHandler	src/profiler.cc	/^void CpuProfiler::EnableHandler() {$/;"	f	class:CpuProfiler
Enabled	src/profiler.cc	/^bool CpuProfiler::Enabled() {$/;"	f	class:CpuProfiler
EndRegionLocked	src/memory_region_map.cc	/^MemoryRegionMap::RegionIterator MemoryRegionMap::EndRegionLocked() {$/;"	f	class:MemoryRegionMap
Ensure	src/pagemap.h	/^  bool Ensure(Number start, size_t n) {$/;"	f	class:TCMalloc_PageMap2
Ensure	src/pagemap.h	/^  bool Ensure(Number start, size_t n) {$/;"	f	class:TCMalloc_PageMap3
Ensure	src/pagemap.h	/^  bool Ensure(Number x, size_t n) {$/;"	f	class:TCMalloc_PageMap1
EnsureLimit	src/page_heap.cc	/^bool PageHeap::EnsureLimit(Length n, bool withRelease)$/;"	f	class:tcmalloc::PageHeap
Entry	src/addressmap-inl.h	/^  struct Entry {$/;"	s	class:AddressMap
Entry	src/heap-profile-table.cc	/^  Entry() : count(0), bytes(0) { }$/;"	f	struct:HeapProfileTable::Snapshot::Entry
Entry	src/heap-profile-table.cc	/^struct HeapProfileTable::Snapshot::Entry {$/;"	s	class:HeapProfileTable::Snapshot	file:
Entry	src/profiledata.h	/^  struct Entry {$/;"	s	class:ProfileData
EntryToValue	src/packed-cache-inl.h	/^  static V EntryToValue(T t) { return t & kValueMask; }$/;"	f	class:PackedCache
EnumSymProc	src/windows/nm-pdb.c	/^static BOOL CALLBACK EnumSymProc(PSYMBOL_INFO symbol_info,$/;"	f	file:
EnvToBool	src/base/commandlineflags.h	154;"	d
EnvToDouble	src/base/commandlineflags.h	163;"	d
EnvToInt	src/base/commandlineflags.h	157;"	d
EnvToInt64	src/base/commandlineflags.h	160;"	d
EnvToString	src/base/commandlineflags.h	151;"	d
Equivalent	src/heap-profile-stats.h	/^  bool Equivalent(const HeapProfileStats& other) const {$/;"	f	struct:HeapProfileStats
EstimateCyclesPerSecond	src/base/sysinfo.cc	/^static int64 EstimateCyclesPerSecond(const int estimate_time_ms) {$/;"	f	file:
Event	src/span.cc	/^void Event(Span* span, char op, int v = 0) {$/;"	f	namespace:tcmalloc
Event	src/span.h	72;"	d
Evict	src/profiledata.cc	/^void ProfileData::Evict(const Entry& entry) {$/;"	f	class:ProfileData
EvictRandomSizeClass	src/central_freelist.cc	/^bool CentralFreeList::EvictRandomSizeClass($/;"	f	class:tcmalloc::CentralFreeList
Examples	src/pprof	/^Examples:$/;"	l
ExchangeSingular	src/malloc_hook.cc	/^T HookList<T>::ExchangeSingular(T value_as_t) {$/;"	f	class:base::internal::HookList
ExpectRunningSamples	src/tests/profiledata_unittest.cc	/^  void ExpectRunningSamples(int samples) {$/;"	f	class:__anon30::ProfileDataTest
ExpectSameState	src/tests/profiledata_unittest.cc	/^  void ExpectSameState(const ProfileData::State& before,$/;"	f	class:__anon30::ProfileDataTest
ExpectStopped	src/tests/profiledata_unittest.cc	/^  void ExpectStopped() {$/;"	f	class:__anon30::ProfileDataTest
ExtractCalls	src/pprof	/^sub ExtractCalls {$/;"	s
ExtractStats	src/tcmalloc.cc	/^static void ExtractStats(TCMallocStats* r, uint64_t* class_count,$/;"	f	file:
ExtractSymbolLocation	src/pprof	/^sub ExtractSymbolLocation {$/;"	s
ExtractSymbols	src/pprof	/^sub ExtractSymbols {$/;"	s
ExtractUntilChar	src/base/sysinfo.cc	/^static bool ExtractUntilChar(char *text, int c, char **endptr) {$/;"	f	file:
FAIL	src/tests/malloc_extension_c_test.c	47;"	d	file:
FATAL	src/base/logging.h	/^enum LogSeverity {INFO = -1, WARNING = -2, ERROR = -3, FATAL = -4};$/;"	e	enum:LogSeverity
FDWrite	src/profiledata.cc	/^static void FDWrite(int fd, const char* buf, size_t len) {$/;"	f	file:
FGREP	Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FLAGS_allocweight	src/tests/tcmalloc_unittest.cc	/^static const int FLAGS_allocweight = 50;    \/\/ Weight for picking allocation$/;"	m	namespace:testing	file:
FLAGS_freeweight	src/tests/tcmalloc_unittest.cc	/^static const int FLAGS_freeweight = 50;     \/\/ Weight for picking free$/;"	m	namespace:testing	file:
FLAGS_lg_max_memalign	src/tests/tcmalloc_unittest.cc	/^static const int FLAGS_lg_max_memalign = 18; \/\/ lg of max alignment for memalign$/;"	m	namespace:testing	file:
FLAGS_lgmaxsize	src/tests/tcmalloc_unittest.cc	/^static const int FLAGS_lgmaxsize = 16;   \/\/ lg() of the max size object to alloc$/;"	m	namespace:testing	file:
FLAGS_log_every_n_tests	src/tests/tcmalloc_unittest.cc	/^static const int FLAGS_log_every_n_tests = 50000; \/\/ log exactly once$/;"	m	namespace:testing	file:
FLAGS_memalign_max_alignment_ratio	src/tests/tcmalloc_unittest.cc	/^static const double FLAGS_memalign_max_alignment_ratio = 6;  \/\/ alignment\/size$/;"	m	namespace:testing	file:
FLAGS_memalign_max_fraction	src/tests/tcmalloc_unittest.cc	/^static const double FLAGS_memalign_max_fraction = 0.4;  \/\/ max expected%$/;"	m	namespace:testing	file:
FLAGS_memalign_min_fraction	src/tests/tcmalloc_unittest.cc	/^static const double FLAGS_memalign_min_fraction = 0;    \/\/ min expected%$/;"	m	namespace:testing	file:
FLAGS_mock_tcmalloc_sample_parameter	src/tests/sampler_test.cc	/^const int64 FLAGS_mock_tcmalloc_sample_parameter = 1<<19;$/;"	v
FLAGS_numtests	src/tests/tcmalloc_unittest.cc	/^static const int FLAGS_numtests = 50000;$/;"	m	namespace:testing	file:
FLAGS_numthreads	src/tests/tcmalloc_unittest.cc	/^static const int FLAGS_numthreads = 10;  \/\/ Number of threads$/;"	m	namespace:testing	file:
FLAGS_passweight	src/tests/tcmalloc_unittest.cc	/^static const int FLAGS_passweight = 1;      \/\/ Weight for passing object$/;"	m	namespace:testing	file:
FLAGS_tcmalloc_transfer_num_objects	src/common.cc	/^static int32 FLAGS_tcmalloc_transfer_num_objects;$/;"	m	namespace:tcmalloc	file:
FLAGS_threadmb	src/tests/tcmalloc_unittest.cc	/^static const int FLAGS_threadmb = 4;     \/\/ Max memory size allocated by thread$/;"	m	namespace:testing	file:
FLAGS_updateweight	src/tests/tcmalloc_unittest.cc	/^static const int FLAGS_updateweight = 10;   \/\/ Weight for picking update$/;"	m	namespace:testing	file:
FRAME	src/base/elfcore.h	139;"	d
FRAME	src/base/elfcore.h	192;"	d
FRAME	src/base/elfcore.h	257;"	d
FRAME	src/base/elfcore.h	289;"	d
FRAME	src/base/elfcore.h	351;"	d
FRAME_MIN_SIZE	src/base/linux_syscall_support.h	1816;"	d
FRAME_TOC_SAVE	src/base/linux_syscall_support.h	1817;"	d
FREE	src/gperftools/malloc_extension.h	/^    FREE,                 \/\/ Range is currently free$/;"	e	enum:base::MallocRange::Type
FREE	src/tests/tcmalloc_unittest.cc	/^  enum Type { ALLOC, FREE, UPDATE, PASS };$/;"	e	enum:testing::TesterThread::Type	file:
FUTEX_PRIVATE_FLAG	src/base/spinlock_linux-inl.h	43;"	d
FUTEX_WAIT	src/base/spinlock_linux-inl.h	41;"	d
FUTEX_WAKE	src/base/spinlock_linux-inl.h	42;"	d
FastInterlockedCompareExchange	src/base/atomicops-internals-windows.h	/^inline LONG FastInterlockedCompareExchange(volatile LONG* ptr,$/;"	f
FastInterlockedCompareExchangePointer	src/base/atomicops-internals-windows.h	/^inline PVOID FastInterlockedCompareExchangePointer(volatile PVOID* ptr,$/;"	f
FastInterlockedExchange	src/base/atomicops-internals-windows.h	/^inline LONG FastInterlockedExchange(volatile LONG* ptr, LONG newval) {$/;"	f
FastInterlockedExchangeAdd	src/base/atomicops-internals-windows.h	/^inline LONG FastInterlockedExchangeAdd(volatile LONG* ptr, LONG increment) {$/;"	f
FastInterlockedExchangeAdd64	src/base/atomicops-internals-windows.h	/^inline LONGLONG FastInterlockedExchangeAdd64(volatile LONGLONG* ptr,$/;"	f
FastInterlockedExchangePointer	src/base/atomicops-internals-windows.h	/^inline PVOID FastInterlockedExchangePointer(volatile PVOID* ptr, PVOID newval) {$/;"	f
FastLog2	src/sampler.h	/^inline double Sampler::FastLog2(const double & d) {$/;"	f	class:tcmalloc::Sampler
FetchDynamicProfile	src/pprof	/^sub FetchDynamicProfile {$/;"	s
FetchDynamicProfiles	src/pprof	/^sub FetchDynamicProfiles {$/;"	s
FetchDynamicProfilesRecurse	src/pprof	/^sub FetchDynamicProfilesRecurse {$/;"	s
FetchFromCentralCache	src/thread_cache.cc	/^void* ThreadCache::FetchFromCentralCache(size_t cl, size_t byte_size) {$/;"	f	class:tcmalloc::ThreadCache
FetchFromOneSpans	src/central_freelist.cc	/^int CentralFreeList::FetchFromOneSpans(int N, void **start, void **end) {$/;"	f	class:tcmalloc::CentralFreeList
FetchFromOneSpansSafe	src/central_freelist.cc	/^int CentralFreeList::FetchFromOneSpansSafe(int N, void **start, void **end) {$/;"	f	class:tcmalloc::CentralFreeList
FetchProgramName	src/pprof	/^sub FetchProgramName() {$/;"	s
FetchSymbols	src/pprof	/^sub FetchSymbols {$/;"	s
FileDescriptor	src/tests/profiledata_unittest.cc	/^  explicit FileDescriptor(int fd) : fd_(fd) {}$/;"	f	struct:__anon30::FileDescriptor
FileDescriptor	src/tests/profiledata_unittest.cc	/^struct FileDescriptor {$/;"	s	namespace:__anon30	file:
Fill	src/tests/memalign_unittest.cc	/^static void Fill(void* p, int n, char seed) {$/;"	f	file:
Fill	src/tests/realloc_unittest.cc	/^static void Fill(unsigned char* buffer, int n) {$/;"	f	file:
FillContents	src/tests/tcmalloc_unittest.cc	/^  void FillContents(Object* object) {$/;"	f	class:testing::TesterThread
FillFullnameToShortnameMap	src/pprof	/^sub FillFullnameToShortnameMap {$/;"	s
FillOrderedProfile	src/heap-profile-table.cc	/^int HeapProfileTable::FillOrderedProfile(char buf[], int size) const {$/;"	f	class:HeapProfileTable
FillProcSelfMaps	src/base/sysinfo.cc	/^int FillProcSelfMaps(char buf[], int size, bool* wrote_all) {$/;"	f	namespace:tcmalloc
Find	src/addressmap-inl.h	/^inline const Value* AddressMap<Value>::Find(Key key) const {$/;"	f	class:AddressMap
FindAlloc	src/heap-profile-table.cc	/^bool HeapProfileTable::FindAlloc(const void* ptr, size_t* object_size) const {$/;"	f	class:HeapProfileTable
FindAllocDetails	src/heap-profile-table.cc	/^bool HeapProfileTable::FindAllocDetails(const void* ptr,$/;"	f	class:HeapProfileTable
FindAndMarkStackRegion	src/memory_region_map.cc	/^bool MemoryRegionMap::FindAndMarkStackRegion(uintptr_t stack_top,$/;"	f	class:MemoryRegionMap
FindAndRemove	src/addressmap-inl.h	/^bool AddressMap<Value>::FindAndRemove(Key key, Value* removed_value) {$/;"	f	class:AddressMap
FindCluster	src/addressmap-inl.h	/^  Cluster* FindCluster(Number address, bool create) {$/;"	f	class:AddressMap
FindInside	src/addressmap-inl.h	/^const Value* AddressMap<Value>::FindInside(ValueSizeFunc size_func,$/;"	f	class:AddressMap
FindInsideAlloc	src/heap-profile-table.cc	/^bool HeapProfileTable::FindInsideAlloc(const void* ptr,$/;"	f	class:HeapProfileTable
FindLibrary	src/pprof	/^sub FindLibrary {$/;"	s
FindMutable	src/addressmap-inl.h	/^inline Value* AddressMap<Value>::FindMutable(Key key) {$/;"	f	class:AddressMap
FindRegion	src/memory_region_map.cc	/^bool MemoryRegionMap::FindRegion(uintptr_t addr, Region* result) {$/;"	f	class:MemoryRegionMap
FixCallerAddresses	src/pprof	/^sub FixCallerAddresses {$/;"	s
FixupPrivEndLocked	src/malloc_hook.cc	/^void HookList<T>::FixupPrivEndLocked() {$/;"	f	class:base::internal::HookList
FlatProfile	src/pprof	/^sub FlatProfile {$/;"	s
FlushEvicted	src/profiledata.cc	/^void ProfileData::FlushEvicted() {$/;"	f	class:ProfileData
FlushTable	src/profiledata.cc	/^void ProfileData::FlushTable() {$/;"	f	class:ProfileData
FlushTable	src/profiler.cc	/^void CpuProfiler::FlushTable() {$/;"	f	class:CpuProfiler
FocusProfile	src/pprof	/^sub FocusProfile {$/;"	s
FormatLine	src/base/sysinfo.cc	/^int ProcMapsIterator::FormatLine(char* buffer, int bufsize,$/;"	f	class:ProcMapsIterator
Frame	src/base/elfcore.h	/^  typedef struct Frame {$/;"	s
Frame	src/base/elfcore.h	/^  } Frame;$/;"	t	typeref:struct:Frame
Free	src/base/low_level_alloc.cc	/^void LowLevelAlloc::Free(void *v) {$/;"	f	class:LowLevelAlloc
Free	src/heap-checker.cc	/^  static void Free(void* p) {$/;"	f	class:HeapLeakChecker::Allocator
Free	src/heap-checker.cc	/^  static void Free(void* p, size_t \/* n *\/) {$/;"	f	class:HeapLeakChecker::Allocator
Free	src/memory_region_map.h	/^    static void Free(const void *p, size_t \/* n *\/) {$/;"	f	struct:MemoryRegionMap::MyAllocator
FreeHook	src/tests/low_level_alloc_unittest.cc	/^static void FreeHook(const void *p) {$/;"	f	file:
FreeList	src/thread_cache.h	/^  class FreeList {$/;"	c	class:tcmalloc::ThreadCache
FreeListInfo	src/gperftools/malloc_extension.h	/^  struct FreeListInfo {$/;"	s	class:MallocExtension
FreeObject	src/tests/tcmalloc_unittest.cc	/^  void FreeObject() {$/;"	f	class:testing::TesterThread
FreePreambleBlock	src/windows/preamble_patcher.cc	/^void PreamblePatcher::FreePreambleBlock(unsigned char* block) {$/;"	f	class:sidestep::PreamblePatcher
FreeQueue	src/debugallocation.cc	/^  FreeQueue() : q_front_(0), q_back_(0) {}$/;"	f	class:FreeQueue
FreeQueue	src/debugallocation.cc	/^class FreeQueue {$/;"	c	file:
FreeQueueSize	src/debugallocation.cc	/^  static size_t FreeQueueSize() {$/;"	f	class:MallocBlock
FreeTestSTLAllocInverse	src/tests/heap-checker_unittest.cc	/^static void FreeTestSTLAllocInverse(IntSet** setx) {$/;"	f	file:
FromRawPointer	src/debugallocation.cc	/^  static MallocBlock* FromRawPointer(void* p) {$/;"	f	class:MallocBlock
FromRawPointer	src/debugallocation.cc	/^  static const MallocBlock* FromRawPointer(const void* p) {$/;"	f	class:MallocBlock
Full	src/debugallocation.cc	/^  bool Full() {$/;"	f	class:FreeQueue
FunctionAndId	src/tests/testutil.cc	/^struct FunctionAndId {$/;"	s	file:
FunctionInfo	src/windows/patch_functions.cc	/^  struct FunctionInfo {$/;"	s	class:__anon9::WindowsInfo	file:
FunctionSignature	src/tests/heap-checker_unittest.cc	/^  typedef void (*FunctionSignature)();$/;"	t	class:Callback0	file:
FunctionSignature	src/tests/heap-checker_unittest.cc	/^  typedef void (*FunctionSignature)(P1);$/;"	t	class:Callback1	file:
FunctionSignature	src/tests/heap-checker_unittest.cc	/^  typedef void (*FunctionSignature)(P1,P2);$/;"	t	class:Callback2	file:
GCC_VERSION	src/base/atomicops.h	101;"	d
GETDENTS	src/base/linux_syscall_support.h	2104;"	d
GETENV_SAFE_H	src/getenv_safe.h	33;"	d
GET_STACK_TRACE_OR_FRAMES	src/stacktrace_impl_setup-inl.h	49;"	d
GET_STACK_TRACE_OR_FRAMES	src/stacktrace_impl_setup-inl.h	54;"	d
GET_STACK_TRACE_OR_FRAMES	src/stacktrace_impl_setup-inl.h	58;"	d
GET_STACK_TRACE_OR_FRAMES	src/stacktrace_impl_setup-inl.h	63;"	d
GET_STACK_TRACE_OR_FRAMES	src/stacktrace_impl_setup-inl.h	67;"	d
GET_STACK_TRACE_OR_FRAMES	src/stacktrace_impl_setup-inl.h	73;"	d
GET_STACK_TRACE_OR_FRAMES	src/stacktrace_impl_setup-inl.h	77;"	d
GET_STACK_TRACE_OR_FRAMES	src/stacktrace_impl_setup-inl.h	83;"	d
GG_ULONGLONG	src/tests/atomicops_unittest.cc	39;"	d	file:
GLOB_NOMATCH	src/heap-profile-table.cc	45;"	d	file:
GOOGLE_BASE_CYCLECLOCK_H_	src/base/cycleclock.h	47;"	d
GOOGLE_BASE_WINDOWS_H_	src/windows/port.h	42;"	d
GOOGLE_MAYBE_THREADS_H_	src/maybe_threads.h	40;"	d
GOOGLE_MAYBE_THREADS_H_	src/windows/port.h	141;"	d
GOOGLE_MUTEX_H_	src/base/simple_mutex.h	106;"	d
GOOGLE_PERFTOOLS_MINI_DISASSEMBLER_H_	src/windows/mini_disassembler.h	38;"	d
GOOGLE_PERFTOOLS_MINI_DISASSEMBLER_TYPES_H_	src/windows/mini_disassembler_types.h	39;"	d
GOOGLE_PERFTOOLS_PREAMBLE_PATCHER_H_	src/windows/preamble_patcher.h	39;"	d
GOOGLE_PERFTOOLS_WINDOWS_CONFIG_H_	src/windows/config.h	13;"	d
GOOGLE_PERFTOOLS_WINDOWS_CONFIG_H_	src/windows/config.h	17;"	d
GOOGLE_PERFTOOLS_WINDOWS_MINGW_H_	src/windows/mingw.h	40;"	d
GOOGLE_STACKTRACE_H_	src/gperftools/stacktrace.h	38;"	d
GPERFTOOLS_CONFIG_H_	config_bak.h	6;"	d
GPERFTOOLS_CONFIG_H_	src/config.h	6;"	d
GPRIuPTHREAD	src/base/basictypes.h	112;"	d
GPRIxPTHREAD	src/base/basictypes.h	113;"	d
GREP	Makefile	/^GREP = \/bin\/grep$/;"	m
GROWS_TOWARDS_HIGH_ADDRESSES	src/heap-checker.cc	/^  GROWS_TOWARDS_HIGH_ADDRESSES,$/;"	e	enum:StackDirection	file:
GROWS_TOWARDS_LOW_ADDRESSES	src/heap-checker.cc	/^  GROWS_TOWARDS_LOW_ADDRESSES,$/;"	e	enum:StackDirection	file:
GST_SUFFIX	src/stacktrace.cc	106;"	d	file:
GST_SUFFIX	src/stacktrace.cc	108;"	d	file:
GST_SUFFIX	src/stacktrace.cc	119;"	d	file:
GST_SUFFIX	src/stacktrace.cc	121;"	d	file:
GST_SUFFIX	src/stacktrace.cc	128;"	d	file:
GST_SUFFIX	src/stacktrace.cc	130;"	d	file:
GST_SUFFIX	src/stacktrace.cc	137;"	d	file:
GST_SUFFIX	src/stacktrace.cc	139;"	d	file:
GST_SUFFIX	src/stacktrace.cc	148;"	d	file:
GST_SUFFIX	src/stacktrace.cc	150;"	d	file:
GST_SUFFIX	src/stacktrace.cc	86;"	d	file:
GST_SUFFIX	src/stacktrace.cc	88;"	d	file:
GST_SUFFIX	src/stacktrace.cc	97;"	d	file:
GST_SUFFIX	src/stacktrace.cc	99;"	d	file:
GUARDED_BY	src/base/thread_annotations.h	63;"	d
GUARDED_VAR	src/base/thread_annotations.h	64;"	d
GZIP_ENV	Makefile	/^GZIP_ENV = --best$/;"	m
Garbage_Collection	doc/tcmalloc.html	/^<h2><A NAME="Garbage_Collection">Garbage Collection of Thread Caches<\/A><\/h2>$/;"	a
GenericFnPtr	src/windows/patch_functions.cc	/^typedef void (*GenericFnPtr)();$/;"	t	namespace:__anon9	file:
GetAggressiveDecommit	src/page_heap.h	/^  bool GetAggressiveDecommit(void) {return aggressive_decommit_;}$/;"	f	class:tcmalloc::PageHeap
GetAllocCaller	src/heap-checker.cc	/^const void* HeapLeakChecker::GetAllocCaller(void* ptr) {$/;"	f	class:HeapLeakChecker
GetAllocatedSize	src/debugallocation.cc	/^  virtual size_t GetAllocatedSize(const void* p) {$/;"	f	class:DebugMallocImplementation
GetAllocatedSize	src/malloc_extension.cc	/^size_t MallocExtension::GetAllocatedSize(const void* p) {$/;"	f	class:MallocExtension
GetBucket	src/heap-profile-table.cc	/^HeapProfileTable::Bucket* HeapProfileTable::GetBucket(int depth,$/;"	f	class:HeapProfileTable
GetBucket	src/memory_region_map.cc	/^HeapProfileBucket* MemoryRegionMap::GetBucket(int depth,$/;"	f	class:MemoryRegionMap
GetCache	src/thread_cache.h	/^inline ThreadCache* ThreadCache::GetCache(int heap_type) {$/;"	f	class:tcmalloc::ThreadCache
GetCacheIfPresent	src/thread_cache.h	/^inline ThreadCache* ThreadCache::GetCacheIfPresent(int heap_type) {$/;"	f	class:tcmalloc::ThreadCache
GetCacheManagerPrivate	src/tcmalloc.cc	/^GetCacheManagerPrivate() {$/;"	f	file:
GetCacheWhichMustBePresent	src/thread_cache.h	/^inline ThreadCache* ThreadCache::GetCacheWhichMustBePresent(int heap_type) {$/;"	f	class:tcmalloc::ThreadCache
GetCallbackCount	src/tests/profile-handler_unittest.cc	/^  uint32 GetCallbackCount() {$/;"	f	class:__anon28::ProfileHandlerTest
GetCallerStackTrace	src/gperftools/malloc_hook.h	/^  inline static int GetCallerStackTrace(void** result, int max_depth,$/;"	f	class:MallocHook
GetCallerStackTrace	src/heap-profile-table.cc	/^int HeapProfileTable::GetCallerStackTrace($/;"	f	class:HeapProfileTable
GetCurrentState	src/profiledata.cc	/^void ProfileData::GetCurrentState(State* state) const {$/;"	f	class:ProfileData
GetCurrentState	src/profiler.cc	/^void CpuProfiler::GetCurrentState(ProfilerState* state) {$/;"	f	class:CpuProfiler
GetDeleteHook	src/malloc_hook-inl.h	/^inline MallocHook::DeleteHook MallocHook::GetDeleteHook() {$/;"	f	class:MallocHook
GetDescriptor	src/page_heap.h	/^  inline Span* GetDescriptor(PageID p) const {$/;"	f	class:tcmalloc::PageHeap
GetDynsym	src/base/elf_mem_image.cc	/^const ElfW(Sym) *ElfMemImage::GetDynsym(int index) const {$/;"	f	class:base::ElfMemImage
GetEntry	src/pprof	/^sub GetEntry {$/;"	s
GetEstimatedAllocatedSize	src/debugallocation.cc	/^  virtual size_t GetEstimatedAllocatedSize(size_t size) {$/;"	f	class:DebugMallocImplementation
GetEstimatedAllocatedSize	src/malloc_extension.cc	/^size_t MallocExtension::GetEstimatedAllocatedSize(size_t size) {$/;"	f	class:MallocExtension
GetEstimatedAllocatedSize	src/tcmalloc.cc	/^  virtual size_t GetEstimatedAllocatedSize(size_t size) {$/;"	f	class:TCMallocImplementation
GetFreeListSizes	src/debugallocation.cc	/^  virtual void GetFreeListSizes(vector<MallocExtension::FreeListInfo>* v) {$/;"	f	class:DebugMallocImplementation
GetFreeListSizes	src/malloc_extension.cc	/^void MallocExtension::GetFreeListSizes($/;"	f	class:MallocExtension
GetFreeListSizes	src/tcmalloc.cc	/^  virtual void GetFreeListSizes(vector<MallocExtension::FreeListInfo>* v) {$/;"	f	class:TCMallocImplementation
GetFunctionAddress	src/tests/heap-checker_unittest.cc	/^static inline uintptr_t GetFunctionAddress (void* (*func)(uintptr_t*))$/;"	f	file:
GetHeapGrowthStacks	src/malloc_extension.cc	/^void MallocExtension::GetHeapGrowthStacks(MallocExtensionWriter* writer) {$/;"	f	class:MallocExtension
GetHeapProfile	src/heap-profiler.cc	/^extern "C" char* GetHeapProfile() {$/;"	f
GetHeapSample	src/malloc_extension.cc	/^void MallocExtension::GetHeapSample(MallocExtensionWriter* writer) {$/;"	f	class:MallocExtension
GetHeapSample	src/tcmalloc.cc	/^  virtual void GetHeapSample(MallocExtensionWriter* writer) {$/;"	f	class:TCMallocImplementation
GetInterruptCount	src/tests/profile-handler_unittest.cc	/^  uint64 GetInterruptCount() {$/;"	f	class:__anon28::ProfileHandlerTest
GetLargeSpanStats	src/page_heap.cc	/^void PageHeap::GetLargeSpanStats(LargeSpanStats* result) {$/;"	f	class:tcmalloc::PageHeap
GetMemoryReleaseRate	src/malloc_extension.cc	/^double MallocExtension::GetMemoryReleaseRate() {$/;"	f	class:MallocExtension
GetMemoryReleaseRate	src/tcmalloc.cc	/^  virtual double GetMemoryReleaseRate() {$/;"	f	class:TCMallocImplementation
GetMmapHook	src/malloc_hook-inl.h	/^inline MallocHook::MmapHook MallocHook::GetMmapHook() {$/;"	f	class:MallocHook
GetMremapHook	src/malloc_hook-inl.h	/^inline MallocHook::MremapHook MallocHook::GetMremapHook() {$/;"	f	class:MallocHook
GetMunmapHook	src/malloc_hook-inl.h	/^inline MallocHook::MunmapHook MallocHook::GetMunmapHook() {$/;"	f	class:MallocHook
GetNewHook	src/malloc_hook-inl.h	/^inline MallocHook::NewHook MallocHook::GetNewHook() {$/;"	f	class:MallocHook
GetNextRange	src/page_heap.cc	/^bool PageHeap::GetNextRange(PageID start, base::MallocRange* r) {$/;"	f	class:tcmalloc::PageHeap
GetNumSymbols	src/base/elf_mem_image.cc	/^int ElfMemImage::GetNumSymbols() const {$/;"	f	class:base::ElfMemImage
GetNumericProperty	src/debugallocation.cc	/^  virtual bool GetNumericProperty(const char* name, size_t* value) {$/;"	f	class:DebugMallocImplementation
GetNumericProperty	src/malloc_extension.cc	/^bool MallocExtension::GetNumericProperty(const char* property, size_t* value) {$/;"	f	class:MallocExtension
GetNumericProperty	src/tcmalloc.cc	/^  virtual bool GetNumericProperty(const char* name, size_t* value) {$/;"	f	class:TCMallocImplementation
GetOrDefault	src/packed-cache-inl.h	/^  V GetOrDefault(K key, V default_value) const {$/;"	f	class:PackedCache
GetOwnership	src/debugallocation.cc	/^  virtual MallocExtension::Ownership GetOwnership(const void* p) {$/;"	f	class:DebugMallocImplementation
GetOwnership	src/malloc_extension.cc	/^MallocExtension::Ownership MallocExtension::GetOwnership(const void* p) {$/;"	f	class:MallocExtension
GetOwnership	src/tcmalloc.cc	/^  virtual Ownership GetOwnership(const void* ptr) {$/;"	f	class:TCMallocImplementation
GetPC	src/getpc.h	/^inline void* GetPC(const struct ucontext_t& signal_ucontext) {$/;"	f
GetPC	src/getpc.h	/^inline void* GetPC(const ucontext_t& signal_ucontext) {$/;"	f
GetPhdr	src/base/elf_mem_image.cc	/^const ElfW(Phdr) *ElfMemImage::GetPhdr(int index) const {$/;"	f	class:base::ElfMemImage
GetPreMmapHook	src/malloc_hook-inl.h	/^inline MallocHook::PreMmapHook MallocHook::GetPreMmapHook() {$/;"	f	class:MallocHook
GetPreSbrkHook	src/malloc_hook-inl.h	/^inline MallocHook::PreSbrkHook MallocHook::GetPreSbrkHook() {$/;"	f	class:MallocHook
GetProcedureBoundaries	src/pprof	/^sub GetProcedureBoundaries {$/;"	s
GetProcedureBoundariesViaNm	src/pprof	/^sub GetProcedureBoundariesViaNm {$/;"	s
GetProgramInvocationName	src/symbolize.cc	/^static const char* GetProgramInvocationName() {$/;"	f	file:
GetRunningOnValgrind	src/base/dynamic_annotations.c	/^static int GetRunningOnValgrind(void) {$/;"	f	file:
GetSamplePeriod	src/sampler.cc	/^int Sampler::GetSamplePeriod() {$/;"	f	class:tcmalloc::Sampler
GetSamplePeriod	src/thread_cache.cc	/^int ThreadCache::GetSamplePeriod() {$/;"	f	class:tcmalloc::ThreadCache
GetSbrkHook	src/malloc_hook-inl.h	/^inline MallocHook::SbrkHook MallocHook::GetSbrkHook() {$/;"	f	class:MallocHook
GetSingular	src/malloc_hook-inl.h	/^  T GetSingular() const {$/;"	f	struct:base::internal::HookList
GetSizeClassIfCached	src/page_heap.h	/^  size_t GetSizeClassIfCached(PageID p) const {$/;"	f	class:tcmalloc::PageHeap
GetSizeWithCallback	src/tcmalloc.cc	/^inline size_t GetSizeWithCallback(const void* ptr,$/;"	f	namespace:__anon5
GetSmallSpanStats	src/page_heap.cc	/^void PageHeap::GetSmallSpanStats(SmallSpanStats* result) {$/;"	f	class:tcmalloc::PageHeap
GetStackDirection	src/heap-checker.cc	/^static StackDirection ATTRIBUTE_NOINLINE GetStackDirection($/;"	f	file:
GetStackFrames	src/stacktrace.cc	/^PERFTOOLS_DLL_DECL int GetStackFrames(void** result, int* sizes, int max_depth,$/;"	f
GetStackFramesPtr	src/stacktrace.cc	/^  int (*GetStackFramesPtr)(void** result, int* sizes, int max_depth,$/;"	m	struct:GetStackImplementation	file:
GetStackFramesWithContext	src/stacktrace.cc	/^PERFTOOLS_DLL_DECL int GetStackFramesWithContext(void** result, int* sizes, int max_depth,$/;"	f
GetStackFramesWithContextPtr	src/stacktrace.cc	/^  int (*GetStackFramesWithContextPtr)(void** result, int* sizes, int max_depth,$/;"	m	struct:GetStackImplementation	file:
GetStackFramesWithContext_win32	src/stacktrace_win32-inl.h	/^static int GetStackFramesWithContext_win32(void** result, int* sizes, int max_depth,$/;"	f
GetStackFrames_win32	src/stacktrace_win32-inl.h	/^static int GetStackFrames_win32(void** \/* pcs *\/,$/;"	f
GetStackImplementation	src/stacktrace.cc	/^struct GetStackImplementation {$/;"	s	file:
GetStackTrace	src/malloc_hook.cc	60;"	d	file:
GetStackTrace	src/page_heap.h	63;"	d
GetStackTrace	src/stacktrace.cc	/^PERFTOOLS_DLL_DECL int GetStackTrace(void** result, int max_depth,$/;"	f
GetStackTracePtr	src/stacktrace.cc	/^  int (*GetStackTracePtr)(void** result, int max_depth,$/;"	m	struct:GetStackImplementation	file:
GetStackTraceWithContext	src/stacktrace.cc	/^PERFTOOLS_DLL_DECL int GetStackTraceWithContext(void** result, int max_depth,$/;"	f
GetStackTraceWithContextPtr	src/stacktrace.cc	/^  int (*GetStackTraceWithContextPtr)(void** result, int max_depth,$/;"	m	struct:GetStackImplementation	file:
GetStackTraceWithContext_win32	src/stacktrace_win32-inl.h	/^static int GetStackTraceWithContext_win32(void** result, int max_depth,$/;"	f
GetStackTrace_win32	src/stacktrace_win32-inl.h	/^static int GetStackTrace_win32(void** result, int max_depth,$/;"	f
GetState	src/profile-handler.cc	/^void ProfileHandler::GetState(ProfileHandlerState* state) {$/;"	f	class:ProfileHandler
GetStats	src/malloc_extension.cc	/^void MallocExtension::GetStats(char* buffer, int length) {$/;"	f	class:MallocExtension
GetStats	src/tcmalloc.cc	/^  virtual void GetStats(char* buffer, int buffer_length) {$/;"	f	class:TCMallocImplementation
GetSymbol	src/symbolize.cc	/^const char* SymbolTable::GetSymbol(const void* addr) {$/;"	f	class:SymbolTable
GetSystemAllocator	src/malloc_extension.cc	/^SysAllocator* MallocExtension::GetSystemAllocator() {$/;"	f	class:MallocExtension
GetSystemAllocator	src/tcmalloc.cc	/^  virtual SysAllocator* GetSystemAllocator() {$/;"	f	class:TCMallocImplementation
GetThreadHeap	src/thread_cache.h	/^inline ThreadCache* ThreadCache::GetThreadHeap(int heap_type) {$/;"	f	class:tcmalloc::ThreadCache
GetThreadStats	src/thread_cache.cc	/^void ThreadCache::GetThreadStats(uint64_t* total_bytes, uint64_t* class_count) {$/;"	f	class:tcmalloc::ThreadCache
GetTopLevelLineNumbers	src/pprof	/^sub GetTopLevelLineNumbers {$/;"	s
GetTotalThreadCacheSize	src/tests/markidle_unittest.cc	/^static size_t GetTotalThreadCacheSize() {$/;"	f	file:
GetType	src/thread_cache.h	/^  int GetType() { return type_; };$/;"	f	class:tcmalloc::ThreadCache
GetUniquePathFromEnv	src/base/sysinfo.cc	/^bool GetUniquePathFromEnv(const char* env_name, char* path) {$/;"	f
GetUnmappedBytes	src/tests/tcmalloc_unittest.cc	/^static size_t GetUnmappedBytes() {$/;"	f	namespace:testing
GetVerdef	src/base/elf_mem_image.cc	/^const ElfW(Verdef) *ElfMemImage::GetVerdef(int index) const {$/;"	f	class:base::ElfMemImage
GetVersym	src/base/elf_mem_image.cc	/^const ElfW(Versym) *ElfMemImage::GetVersym(int index) const {$/;"	f	class:base::ElfMemImage
GetenvBeforeMain	src/base/sysinfo.cc	/^const char* GetenvBeforeMain(const char* name) {$/;"	f
GlobalChecker	src/heap-checker.cc	/^HeapLeakChecker* HeapLeakChecker::GlobalChecker() {$/;"	f	class:HeapLeakChecker
GlobalRegionCallerRangeMap	src/heap-checker.cc	/^           > GlobalRegionCallerRangeMap;$/;"	t	file:
GoogleInitializer	src/base/googleinit.h	/^  GoogleInitializer(const char* name, VoidFunction ctor, VoidFunction dtor)$/;"	f	class:GoogleInitializer
GoogleInitializer	src/base/googleinit.h	/^class GoogleInitializer {$/;"	c
GrowHeap	src/page_heap.cc	/^bool PageHeap::GrowHeap(Length n) {$/;"	f	class:tcmalloc::PageHeap
HAVE_ATTRIBUTE_SECTION_START	src/base/basictypes.h	276;"	d
HAVE_ATTRIBUTE_SECTION_START	src/base/basictypes.h	335;"	d
HAVE_BUILTIN_EXPECT	config_bak.h	10;"	d
HAVE_BUILTIN_EXPECT	src/config.h	10;"	d
HAVE_BUILTIN_STACK_POINTER	src/windows/config.h	30;"	d
HAVE_CONFLICT_SIGNAL_H	src/windows/config.h	33;"	d
HAVE_CYGWIN_SIGNAL_H	src/windows/config.h	36;"	d
HAVE_DECL_CFREE	config_bak.h	27;"	d
HAVE_DECL_CFREE	src/config.h	27;"	d
HAVE_DECL_CFREE	src/windows/config.h	40;"	d
HAVE_DECL_MEMALIGN	config_bak.h	31;"	d
HAVE_DECL_MEMALIGN	src/config.h	31;"	d
HAVE_DECL_MEMALIGN	src/windows/config.h	44;"	d
HAVE_DECL_NANOSLEEP	src/windows/port.h	447;"	d
HAVE_DECL_POSIX_MEMALIGN	config_bak.h	39;"	d
HAVE_DECL_POSIX_MEMALIGN	src/config.h	39;"	d
HAVE_DECL_POSIX_MEMALIGN	src/windows/config.h	48;"	d
HAVE_DECL_PVALLOC	config_bak.h	43;"	d
HAVE_DECL_PVALLOC	src/config.h	43;"	d
HAVE_DECL_PVALLOC	src/windows/config.h	52;"	d
HAVE_DECL_SLEEP	src/windows/port.h	427;"	d
HAVE_DECL_UNAME	config_bak.h	51;"	d
HAVE_DECL_UNAME	src/config.h	51;"	d
HAVE_DECL_UNAME	src/windows/config.h	56;"	d
HAVE_DECL_VALLOC	config_bak.h	55;"	d
HAVE_DECL_VALLOC	src/config.h	55;"	d
HAVE_DECL_VALLOC	src/windows/config.h	60;"	d
HAVE_DLFCN_H	config_bak.h	58;"	d
HAVE_DLFCN_H	src/config.h	58;"	d
HAVE_DLFCN_H	src/windows/config.h	63;"	d
HAVE_ELF32_VERSYM	config_bak.h	61;"	d
HAVE_ELF32_VERSYM	src/config.h	61;"	d
HAVE_ELF32_VERSYM	src/windows/config.h	66;"	d
HAVE_ELF_MEM_IMAGE	src/base/elf_mem_image.h	48;"	d
HAVE_EXECINFO_H	config_bak.h	64;"	d
HAVE_EXECINFO_H	src/config.h	64;"	d
HAVE_EXECINFO_H	src/windows/config.h	69;"	d
HAVE_FCNTL_H	config_bak.h	67;"	d
HAVE_FCNTL_H	src/config.h	67;"	d
HAVE_FCNTL_H	src/windows/config.h	72;"	d
HAVE_FEATURES_H	config_bak.h	70;"	d
HAVE_FEATURES_H	src/config.h	70;"	d
HAVE_FEATURES_H	src/windows/config.h	75;"	d
HAVE_FORK	config_bak.h	73;"	d
HAVE_FORK	src/config.h	73;"	d
HAVE_GETEUID	config_bak.h	76;"	d
HAVE_GETEUID	src/config.h	76;"	d
HAVE_GETEUID	src/windows/config.h	78;"	d
HAVE_GETPAGESIZE	config_bak.h	79;"	d
HAVE_GETPAGESIZE	src/config.h	79;"	d
HAVE_GETPAGESIZE	src/windows/config.h	81;"	d
HAVE_GLOB_H	config_bak.h	82;"	d
HAVE_GLOB_H	src/config.h	82;"	d
HAVE_GLOB_H	src/windows/config.h	84;"	d
HAVE_GRP_H	config_bak.h	85;"	d
HAVE_GRP_H	src/config.h	85;"	d
HAVE_GRP_H	src/windows/config.h	87;"	d
HAVE_GST_arm	src/stacktrace.cc	132;"	d	file:
HAVE_GST_generic	src/stacktrace.cc	90;"	d	file:
HAVE_GST_instrument	src/stacktrace.cc	141;"	d	file:
HAVE_GST_libunwind	src/stacktrace.cc	101;"	d	file:
HAVE_GST_ppc	src/stacktrace.cc	123;"	d	file:
HAVE_GST_win32	src/stacktrace.cc	152;"	d	file:
HAVE_GST_x86	src/stacktrace.cc	110;"	d	file:
HAVE_INTTYPES_H	config_bak.h	88;"	d
HAVE_INTTYPES_H	src/config.h	88;"	d
HAVE_INTTYPES_H	src/windows/config.h	90;"	d
HAVE_LIBUNWIND_H	config_bak.h	91;"	d
HAVE_LIBUNWIND_H	src/config.h	91;"	d
HAVE_LIBUNWIND_H	src/windows/config.h	93;"	d
HAVE_LINUX_PTRACE_H	config_bak.h	94;"	d
HAVE_LINUX_PTRACE_H	src/config.h	94;"	d
HAVE_LINUX_PTRACE_H	src/windows/config.h	96;"	d
HAVE_LINUX_SIGEV_THREAD_ID	config_bak.h	97;"	d
HAVE_LINUX_SIGEV_THREAD_ID	src/config.h	97;"	d
HAVE_MALLOC_H	config_bak.h	100;"	d
HAVE_MALLOC_H	src/config.h	100;"	d
HAVE_MALLOC_H	src/windows/config.h	99;"	d
HAVE_MALLOC_MALLOC_H	src/windows/config.h	102;"	d
HAVE_MEMORY_H	config_bak.h	106;"	d
HAVE_MEMORY_H	src/config.h	106;"	d
HAVE_MEMORY_H	src/windows/config.h	105;"	d
HAVE_MMAP	config_bak.h	109;"	d
HAVE_MMAP	src/config.h	109;"	d
HAVE_MMAP	src/windows/config.h	108;"	d
HAVE_NAMESPACES	config_bak.h	112;"	d
HAVE_NAMESPACES	src/config.h	112;"	d
HAVE_NAMESPACES	src/windows/config.h	111;"	d
HAVE_PID_T	src/windows/mingw.h	66;"	d
HAVE_POLL_H	config_bak.h	115;"	d
HAVE_POLL_H	src/config.h	115;"	d
HAVE_POLL_H	src/windows/config.h	114;"	d
HAVE_PROGRAM_INVOCATION_NAME	config_bak.h	118;"	d
HAVE_PROGRAM_INVOCATION_NAME	src/config.h	118;"	d
HAVE_PROGRAM_INVOCATION_NAME	src/windows/config.h	117;"	d
HAVE_PTHREAD	config_bak.h	121;"	d
HAVE_PTHREAD	src/config.h	121;"	d
HAVE_PTHREAD	src/windows/config.h	120;"	d
HAVE_PTHREAD	src/windows/mingw.h	63;"	d
HAVE_PWD_H	config_bak.h	128;"	d
HAVE_PWD_H	src/config.h	128;"	d
HAVE_PWD_H	src/windows/config.h	123;"	d
HAVE_SBRK	config_bak.h	131;"	d
HAVE_SBRK	src/config.h	131;"	d
HAVE_SBRK	src/windows/config.h	126;"	d
HAVE_SCHED_H	config_bak.h	134;"	d
HAVE_SCHED_H	src/config.h	134;"	d
HAVE_SCHED_H	src/windows/config.h	129;"	d
HAVE_SNPRINTF	src/windows/config.h	27;"	d
HAVE_SNPRINTF	src/windows/mingw.h	57;"	d
HAVE_STDINT_H	config_bak.h	137;"	d
HAVE_STDINT_H	src/config.h	137;"	d
HAVE_STDINT_H	src/windows/config.h	132;"	d
HAVE_STDLIB_H	config_bak.h	140;"	d
HAVE_STDLIB_H	src/config.h	140;"	d
HAVE_STDLIB_H	src/windows/config.h	135;"	d
HAVE_STRINGS_H	config_bak.h	143;"	d
HAVE_STRINGS_H	src/config.h	143;"	d
HAVE_STRINGS_H	src/windows/config.h	138;"	d
HAVE_STRING_H	config_bak.h	146;"	d
HAVE_STRING_H	src/config.h	146;"	d
HAVE_STRING_H	src/windows/config.h	141;"	d
HAVE_STRUCT_MALLINFO	config_bak.h	149;"	d
HAVE_STRUCT_MALLINFO	src/config.h	149;"	d
HAVE_STRUCT_MALLINFO	src/windows/config.h	144;"	d
HAVE_SYS_CDEFS_H	config_bak.h	152;"	d
HAVE_SYS_CDEFS_H	src/config.h	152;"	d
HAVE_SYS_CDEFS_H	src/windows/config.h	147;"	d
HAVE_SYS_MALLOC_H	src/windows/config.h	150;"	d
HAVE_SYS_PARAM_H	config_bak.h	158;"	d
HAVE_SYS_PARAM_H	src/config.h	158;"	d
HAVE_SYS_PARAM_H	src/windows/config.h	153;"	d
HAVE_SYS_PRCTL_H	config_bak.h	161;"	d
HAVE_SYS_PRCTL_H	src/config.h	161;"	d
HAVE_SYS_PRCTL_H	src/windows/config.h	156;"	d
HAVE_SYS_RESOURCE_H	config_bak.h	164;"	d
HAVE_SYS_RESOURCE_H	src/config.h	164;"	d
HAVE_SYS_RESOURCE_H	src/windows/config.h	159;"	d
HAVE_SYS_SOCKET_H	config_bak.h	167;"	d
HAVE_SYS_SOCKET_H	src/config.h	167;"	d
HAVE_SYS_SOCKET_H	src/windows/config.h	162;"	d
HAVE_SYS_STAT_H	config_bak.h	170;"	d
HAVE_SYS_STAT_H	src/config.h	170;"	d
HAVE_SYS_STAT_H	src/windows/config.h	165;"	d
HAVE_SYS_SYSCALL_H	config_bak.h	173;"	d
HAVE_SYS_SYSCALL_H	src/config.h	173;"	d
HAVE_SYS_SYSCALL_H	src/windows/config.h	168;"	d
HAVE_SYS_TYPES_H	config_bak.h	176;"	d
HAVE_SYS_TYPES_H	src/config.h	176;"	d
HAVE_SYS_TYPES_H	src/windows/config.h	171;"	d
HAVE_SYS_UCONTEXT_H	config_bak.h	179;"	d
HAVE_SYS_UCONTEXT_H	src/config.h	179;"	d
HAVE_SYS_UCONTEXT_H	src/windows/config.h	174;"	d
HAVE_SYS_WAIT_H	config_bak.h	182;"	d
HAVE_SYS_WAIT_H	src/config.h	182;"	d
HAVE_SYS_WAIT_H	src/windows/config.h	177;"	d
HAVE_TLS	config_bak.h	185;"	d
HAVE_TLS	src/config.h	185;"	d
HAVE_TLS	src/windows/config.h	180;"	d
HAVE_UCONTEXT_H	config_bak.h	188;"	d
HAVE_UCONTEXT_H	src/config.h	188;"	d
HAVE_UCONTEXT_H	src/windows/config.h	183;"	d
HAVE_UNISTD_H	config_bak.h	191;"	d
HAVE_UNISTD_H	src/config.h	191;"	d
HAVE_UNISTD_H	src/windows/config.h	186;"	d
HAVE_UNWIND_H	config_bak.h	194;"	d
HAVE_UNWIND_H	src/config.h	194;"	d
HAVE_UNWIND_H	src/windows/config.h	189;"	d
HAVE_VALGRIND_H	src/windows/config.h	192;"	d
HAVE_VDSO_SUPPORT	src/base/vdso_support.h	64;"	d
HAVE___ATTRIBUTE__	config_bak.h	200;"	d
HAVE___ATTRIBUTE__	src/config.h	200;"	d
HAVE___ATTRIBUTE__	src/windows/config.h	195;"	d
HAVE___ENVIRON	config_bak.h	203;"	d
HAVE___ENVIRON	src/config.h	203;"	d
HAVE___ENVIRON	src/windows/config.h	198;"	d
HAVE___INT64	src/windows/config.h	201;"	d
HCL_string	src/heap-checker.cc	/^                    > HCL_string;$/;"	t	file:
HEADERS	Makefile	/^HEADERS = $(googleinclude_HEADERS) $(nodist_perftoolsinclude_HEADERS) \\$/;"	m
HEAP_CHECKER_SOURCES	Makefile	/^HEAP_CHECKER_SOURCES = src\/base\/thread_lister.c \\$/;"	m
HEAP_CHECKER_UNITTEST_INCLUDES	Makefile	/^HEAP_CHECKER_UNITTEST_INCLUDES = src\/config_for_unittests.h \\$/;"	m
HEAP_PROFILER_UNITTEST_INCLUDES	Makefile	/^HEAP_PROFILER_UNITTEST_INCLUDES = src\/config_for_unittests.h \\$/;"	m
HEAP_PROFILE_STATS_H_	src/heap-profile-stats.h	52;"	d
HEAP_TYPE_MASK	src/tcmalloc.cc	616;"	d	file:
HandleSavedRegionsLocked	src/memory_region_map.cc	/^inline void MemoryRegionMap::HandleSavedRegionsLocked($/;"	f	class:MemoryRegionMap
Has	src/packed-cache-inl.h	/^  bool Has(K key) const {$/;"	f	class:PackedCache
HasPosixThreads	src/base/sysinfo.cc	/^bool HasPosixThreads() {$/;"	f
Hash	src/packed-cache-inl.h	/^  static size_t Hash(K key) {$/;"	f	class:PackedCache
HashInt	src/addressmap-inl.h	/^  static int HashInt(Number x) {$/;"	f	class:AddressMap
HaveOnHeapLocked	src/heap-checker.cc	/^inline bool HeapLeakChecker::HaveOnHeapLocked(const void** ptr,$/;"	f	class:HeapLeakChecker
HaveSystemRelease	src/tests/page_heap_test.cc	/^static bool HaveSystemRelease =$/;"	m	namespace:__anon31	file:
HaveSystemRelease	src/tests/tcmalloc_unittest.cc	/^static bool HaveSystemRelease =$/;"	m	namespace:testing	file:
Header	src/base/low_level_alloc.cc	/^    struct Header {$/;"	s	struct:low_level_alloc_internal::AllocList	file:
HeapBusyThreadBody	src/tests/heap-checker_unittest.cc	/^static void* HeapBusyThreadBody(void* a) {$/;"	f	file:
HeapCleaner	src/gperftools/heap-checker.h	/^class PERFTOOLS_DLL_DECL HeapCleaner {$/;"	c
HeapCleaner	src/heap-checker.cc	/^HeapCleaner::HeapCleaner(void_function f) {$/;"	f	class:HeapCleaner
HeapLeakChecker	src/gperftools/heap-checker.h	/^class PERFTOOLS_DLL_DECL HeapLeakChecker {$/;"	c
HeapLeakChecker	src/heap-checker.cc	/^HeapLeakChecker::HeapLeakChecker() : lock_(new SpinLock) {$/;"	f	class:HeapLeakChecker
HeapLeakChecker	src/heap-checker.cc	/^HeapLeakChecker::HeapLeakChecker(const char *name) : lock_(new SpinLock) {$/;"	f	class:HeapLeakChecker
HeapLeakCheckerGlobalPrePost	src/heap-checker-bcad.cc	/^  HeapLeakCheckerGlobalPrePost() {$/;"	f	class:HeapLeakCheckerGlobalPrePost
HeapLeakCheckerGlobalPrePost	src/heap-checker-bcad.cc	/^class HeapLeakCheckerGlobalPrePost {$/;"	c	file:
HeapLeakChecker_AfterDestructors	src/heap-checker.cc	/^void HeapLeakChecker_AfterDestructors() {$/;"	f
HeapLeakChecker_BeforeConstructors	src/heap-checker.cc	/^void HeapLeakChecker_BeforeConstructors() {$/;"	f
HeapLeakChecker_InternalInitStart	src/heap-checker.cc	/^void HeapLeakChecker_InternalInitStart() {$/;"	f
HeapLeakChecker_RunHeapCleanups	src/heap-checker.cc	/^void HeapLeakChecker_RunHeapCleanups() {$/;"	f
HeapProfileBucket	src/heap-profile-stats.h	/^struct HeapProfileBucket : public HeapProfileStats {$/;"	s
HeapProfileEndWriter	src/heap-profiler.cc	/^struct HeapProfileEndWriter {$/;"	s	file:
HeapProfileStats	src/heap-profile-stats.h	/^struct HeapProfileStats {$/;"	s
HeapProfileTable	src/heap-profile-table.cc	/^HeapProfileTable::HeapProfileTable(Allocator alloc,$/;"	f	class:HeapProfileTable
HeapProfileTable	src/heap-profile-table.h	/^class HeapProfileTable {$/;"	c
HeapProfilerDump	src/heap-profiler.cc	/^extern "C" void HeapProfilerDump(const char *reason) {$/;"	f
HeapProfilerDumpSignal	src/heap-profiler.cc	/^static void HeapProfilerDumpSignal(int signal_number) {$/;"	f	file:
HeapProfilerInit	src/heap-profiler.cc	/^static void HeapProfilerInit() {$/;"	f	file:
HeapProfilerStart	src/heap-profiler.cc	/^extern "C" void HeapProfilerStart(const char* prefix) {$/;"	f
HeapProfilerStop	src/heap-profiler.cc	/^extern "C" void HeapProfilerStop() {$/;"	f
HeapsInUse	src/thread_cache.h	/^inline int ThreadCache::HeapsInUse() {$/;"	f	class:tcmalloc::ThreadCache
HexExtend	src/pprof	/^sub HexExtend {$/;"	s
HiddenPointer	src/gperftools/heap-checker.h	/^  explicit HiddenPointer(T* t)$/;"	f	class:HiddenPointer
HiddenPointer	src/gperftools/heap-checker.h	/^class HiddenPointer {$/;"	c
Hide	src/tests/heap-checker_unittest.cc	/^static void Hide(T** ptr) {$/;"	f	file:
HookIncrementNumber	src/windows/preamble_patcher_test.cc	/^int HookIncrementNumber(int i) {$/;"	f	namespace:__anon6
HookList	src/malloc_hook-inl.h	/^struct PERFTOOLS_DLL_DECL HookList {$/;"	s	namespace:base::internal
HtmlEscape	src/pprof	/^sub HtmlEscape {$/;"	s
HtmlListingFooter	src/pprof	/^sub HtmlListingFooter {$/;"	s
HtmlListingHeader	src/pprof	/^sub HtmlListingHeader {$/;"	s
HtmlPrintNumber	src/pprof	/^sub HtmlPrintNumber {$/;"	s
HugetlbSysAllocator	src/memfs_malloc.cc	/^  explicit HugetlbSysAllocator(SysAllocator* fallback)$/;"	f	class:HugetlbSysAllocator
HugetlbSysAllocator	src/memfs_malloc.cc	/^class HugetlbSysAllocator: public SysAllocator {$/;"	c	file:
IF_DEBUG_EXPECT_DEATH	src/tests/debugallocation_test.cc	71;"	d	file:
IGNORED_ON_HEAP	src/heap-checker.cc	/^  IGNORED_ON_HEAP,   \/\/ Is a live (ignored) object on heap$/;"	e	enum:ObjectPlacement	file:
INFO	src/base/logging.h	/^enum LogSeverity {INFO = -1, WARNING = -2, ERROR = -3, FATAL = -4};$/;"	e	enum:LogSeverity
INIT_ADDRESS_RANGE	src/tests/stacktrace_unittest.cc	60;"	d	file:
INIT_ADDRESS_RANGE	src/tests/stacktrace_unittest.cc	90;"	d	file:
INIT_ATTRIBUTE_SECTION_VARS	src/base/basictypes.h	268;"	d
INIT_ATTRIBUTE_SECTION_VARS	src/base/basictypes.h	324;"	d
INIT_ATTRIBUTE_SECTION_VARS	src/base/basictypes.h	340;"	d
INIT_HOOK_LIST	src/malloc_hook.cc	252;"	d	file:
INIT_HOOK_LIST	src/malloc_hook.cc	277;"	d	file:
INIT_HOOK_LIST	src/tests/malloc_hook_test.cc	120;"	d	file:
INIT_HOOK_LIST_WITH_VALUE	src/malloc_hook.cc	253;"	d	file:
INIT_HOOK_LIST_WITH_VALUE	src/malloc_hook.cc	276;"	d	file:
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PREFIX	config_bak.h	209;"	d
INSTALL_PREFIX	src/config.h	209;"	d
INSTALL_PREFIX	src/windows/config.h	204;"	d
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INT32_EQUALS_INTPTR	src/windows/config.h	207;"	d
INTERIOR_BITS	src/pagemap.h	/^  static const int INTERIOR_BITS = (BITS + 2) \/ 3; \/\/ Round-up$/;"	m	class:TCMalloc_PageMap3
INTERIOR_LENGTH	src/pagemap.h	/^  static const int INTERIOR_LENGTH = 1 << INTERIOR_BITS;$/;"	m	class:TCMalloc_PageMap3
INUSE	src/gperftools/malloc_extension.h	/^    INUSE,                \/\/ Application is using this range$/;"	e	enum:base::MallocRange::Type
INVOKE_HOOKS	src/malloc_hook.cc	476;"	d	file:
INVOKE_HOOKS	src/malloc_hook.cc	561;"	d	file:
INVOKE_REPLACEMENT	src/malloc_hook.cc	486;"	d	file:
IN_GLOBAL_DATA	src/heap-checker.cc	/^  IN_GLOBAL_DATA,    \/\/ Is part of global data region of the executable$/;"	e	enum:ObjectPlacement	file:
IN_USE	src/span.h	/^  enum { IN_USE, ON_NORMAL_FREELIST, ON_RETURNED_FREELIST };$/;"	e	enum:tcmalloc::Span::__anon33
IOS_64	src/windows/mini_disassembler_types.h	/^  IOS_64 = 0x00001000$/;"	e	enum:sidestep::ImmediateOperandSize
IOS_DEFAULT	src/windows/mini_disassembler_types.h	/^  IOS_DEFAULT = 0x0,$/;"	e	enum:sidestep::ImmediateOperandSize
IOS_MASK	src/windows/mini_disassembler_types.h	/^  IOS_MASK = 0x0000F000,$/;"	e	enum:sidestep::ImmediateOperandSize
IP	src/base/elfcore.h	115;"	d
IP	src/base/elfcore.h	72;"	d
IP	src/base/elfcore.h	96;"	d
IS_STACK_FRAMES	src/stacktrace_impl_setup-inl.h	47;"	d
IS_STACK_FRAMES	src/stacktrace_impl_setup-inl.h	52;"	d
IS_STACK_FRAMES	src/stacktrace_impl_setup-inl.h	56;"	d
IS_STACK_FRAMES	src/stacktrace_impl_setup-inl.h	61;"	d
IS_STACK_FRAMES	src/stacktrace_impl_setup-inl.h	65;"	d
IS_STACK_FRAMES	src/stacktrace_impl_setup-inl.h	71;"	d
IS_STACK_FRAMES	src/stacktrace_impl_setup-inl.h	75;"	d
IS_STACK_FRAMES	src/stacktrace_impl_setup-inl.h	81;"	d
IS_WITH_CONTEXT	src/stacktrace_impl_setup-inl.h	48;"	d
IS_WITH_CONTEXT	src/stacktrace_impl_setup-inl.h	53;"	d
IS_WITH_CONTEXT	src/stacktrace_impl_setup-inl.h	57;"	d
IS_WITH_CONTEXT	src/stacktrace_impl_setup-inl.h	62;"	d
IS_WITH_CONTEXT	src/stacktrace_impl_setup-inl.h	66;"	d
IS_WITH_CONTEXT	src/stacktrace_impl_setup-inl.h	72;"	d
IS_WITH_CONTEXT	src/stacktrace_impl_setup-inl.h	76;"	d
IS_WITH_CONTEXT	src/stacktrace_impl_setup-inl.h	82;"	d
IT_GENERIC	src/windows/mini_disassembler_types.h	/^  IT_GENERIC,$/;"	e	enum:sidestep::InstructionType
IT_JUMP	src/windows/mini_disassembler_types.h	/^  IT_JUMP,$/;"	e	enum:sidestep::InstructionType
IT_PREFIX	src/windows/mini_disassembler_types.h	/^  IT_PREFIX,$/;"	e	enum:sidestep::InstructionType
IT_PREFIX_ADDRESS	src/windows/mini_disassembler_types.h	/^  IT_PREFIX_ADDRESS,$/;"	e	enum:sidestep::InstructionType
IT_PREFIX_OPERAND	src/windows/mini_disassembler_types.h	/^  IT_PREFIX_OPERAND,$/;"	e	enum:sidestep::InstructionType
IT_REFERENCE	src/windows/mini_disassembler_types.h	/^  IT_REFERENCE,$/;"	e	enum:sidestep::InstructionType
IT_RETURN	src/windows/mini_disassembler_types.h	/^  IT_RETURN,$/;"	e	enum:sidestep::InstructionType
IT_UNKNOWN	src/windows/mini_disassembler_types.h	/^  IT_UNKNOWN,$/;"	e	enum:sidestep::InstructionType
IT_UNUSED	src/windows/mini_disassembler_types.h	/^  IT_UNUSED,$/;"	e	enum:sidestep::InstructionType
I_WRAP_SONAME_FNNAME_ZU	src/third_party/valgrind.h	584;"	d
I_WRAP_SONAME_FNNAME_ZZ	src/third_party/valgrind.h	587;"	d
IgnoreAllLiveObjectsLocked	src/heap-checker.cc	/^void HeapLeakChecker::IgnoreAllLiveObjectsLocked(const void* self_stack_top) {$/;"	f	class:HeapLeakChecker
IgnoreLiveObjectsLocked	src/heap-checker.cc	/^\/*static*\/ void HeapLeakChecker::IgnoreLiveObjectsLocked(const char* name,$/;"	f	class:HeapLeakChecker
IgnoreLiveThreadsLocked	src/heap-checker.cc	/^\/*static*\/ int HeapLeakChecker::IgnoreLiveThreadsLocked(void* parameter,$/;"	f	class:HeapLeakChecker
IgnoreNonThreadLiveObjectsLocked	src/heap-checker.cc	/^void HeapLeakChecker::IgnoreNonThreadLiveObjectsLocked() {$/;"	f	class:HeapLeakChecker
IgnoreObject	src/gperftools/heap-checker.h	/^  static T* IgnoreObject(T* ptr) {$/;"	f	class:HeapLeakChecker
IgnoreProfile	src/pprof	/^sub IgnoreProfile {$/;"	s
IgnoredObjectsMap	src/heap-checker.cc	/^           > IgnoredObjectsMap;$/;"	t	file:
ImmediateOperandSize	src/windows/mini_disassembler_types.h	/^enum ImmediateOperandSize {$/;"	g	namespace:sidestep
InHookCaller	src/malloc_hook.cc	/^static inline bool InHookCaller(const void* caller) {$/;"	f	file:
IncreaseCacheLimit	src/thread_cache.cc	/^void ThreadCache::IncreaseCacheLimit() {$/;"	f	class:tcmalloc::ThreadCache
IncreaseCacheLimitLocked	src/thread_cache.cc	/^void ThreadCache::IncreaseCacheLimitLocked() {$/;"	f	class:tcmalloc::ThreadCache
IncrementNumber	src/windows/preamble_patcher_test.cc	/^int __declspec(noinline) IncrementNumber(int i) {$/;"	f	namespace:__anon6
IncrementalScavenge	src/page_heap.cc	/^void PageHeap::IncrementalScavenge(Length n) {$/;"	f	class:tcmalloc::PageHeap
IncrementingFunc	src/windows/preamble_patcher_test.cc	/^typedef int (*IncrementingFunc)(int);$/;"	t	namespace:__anon6	file:
Indentation	src/pprof	/^sub Indentation {$/;"	s
Init	src/base/elf_mem_image.cc	/^void ElfMemImage::Init(const void *base) {$/;"	f	class:base::ElfMemImage
Init	src/base/sysinfo.cc	/^void ProcMapsIterator::Init(pid_t pid, Buffer *buffer,$/;"	f	class:ProcMapsIterator
Init	src/base/vdso_support.cc	/^const void *VDSOSupport::Init() {$/;"	f	class:base::VDSOSupport
Init	src/central_freelist.cc	/^void CentralFreeList::Init(size_t cl, int type) {$/;"	f	class:tcmalloc::CentralFreeList
Init	src/common.cc	/^void SizeMap::Init() {$/;"	f	class:tcmalloc::SizeMap
Init	src/heap-checker.cc	/^  static void Init() {$/;"	f	class:HeapLeakChecker::Allocator
Init	src/memory_region_map.cc	/^void MemoryRegionMap::Init(int max_stack_depth, bool use_buckets) {$/;"	f	class:MemoryRegionMap
Init	src/page_heap_allocator.h	/^  void Init() {$/;"	f	class:tcmalloc::PageHeapAllocator
Init	src/pprof	/^sub Init() {$/;"	s
Init	src/profile-handler.cc	/^void ProfileHandler::Init() {$/;"	f	class:ProfileHandler
Init	src/sampler.cc	/^void Sampler::Init(uint32_t seed) {$/;"	f	class:tcmalloc::Sampler
Init	src/tests/sampler_test.cc	/^void OldSampler::Init(uint32_t seed) {$/;"	f	class:OldSampler
Init	src/thread_cache.cc	/^void ThreadCache::Init(pthread_t tid) {$/;"	f	class:tcmalloc::ThreadCache
Init	src/thread_cache.h	/^    void Init() {$/;"	f	class:tcmalloc::ThreadCache::FreeList
InitDeletedBuffer	src/debugallocation.cc	/^  static void InitDeletedBuffer() {$/;"	f	class:MallocBlock
InitModule	src/base/spinlock_linux-inl.h	/^  InitModule() {$/;"	f	struct:__anon37::InitModule
InitModule	src/base/spinlock_linux-inl.h	/^static struct InitModule {$/;"	s	namespace:__anon37
InitModule	src/malloc_extension.cc	/^static void InitModule() {$/;"	f	file:
InitModule	src/thread_cache.cc	/^void ThreadCache::InitModule() {$/;"	f	class:tcmalloc::ThreadCache
InitStaticVars	src/static_vars.cc	/^void Static::InitStaticVars() {$/;"	f	class:tcmalloc::Static
InitStatics	src/sampler.cc	/^void Sampler::InitStatics() {$/;"	f	class:tcmalloc::Sampler
InitStatics	src/tests/sampler_test.cc	/^  static void InitStatics() {$/;"	f	class:OldSampler
InitSystemAllocators	src/system-alloc.cc	/^void InitSystemAllocators(void) {$/;"	f
InitSystemAllocators	src/windows/system-alloc.cc	/^void InitSystemAllocators(void) {$/;"	f
InitTCMallocTransferNumObjects	src/common.cc	/^static inline void InitTCMallocTransferNumObjects()$/;"	f	namespace:tcmalloc
InitTSD	src/thread_cache.cc	/^void ThreadCache::InitTSD() {$/;"	f	class:tcmalloc::ThreadCache
InitThreadDisableCounter	src/heap-checker.cc	/^  InitThreadDisableCounter() {$/;"	f	class:InitThreadDisableCounter
InitThreadDisableCounter	src/heap-checker.cc	/^class InitThreadDisableCounter {$/;"	c	file:
InitialNewHook	src/malloc_hook.cc	/^void InitialNewHook(const void* ptr, size_t size) {$/;"	f	namespace:__anon49
InitialPreMMapHook	src/malloc_hook.cc	/^void InitialPreMMapHook(const void* start,$/;"	f	namespace:__anon49
InitialPreSbrkHook	src/malloc_hook.cc	/^void InitialPreSbrkHook(ptrdiff_t increment) {$/;"	f	namespace:__anon49
Initialize	src/debugallocation.cc	/^  void Initialize(size_t size, int type) {$/;"	f	class:MallocBlock	file:
Initialize	src/malloc_extension.cc	/^void MallocExtension::Initialize() {$/;"	f	class:MallocExtension
Initialize	src/memfs_malloc.cc	/^bool HugetlbSysAllocator::Initialize() {$/;"	f	class:HugetlbSysAllocator
Initialize	src/windows/mini_disassembler.cc	/^void MiniDisassembler::Initialize() {$/;"	f	class:sidestep::MiniDisassembler
Initialize	src/windows/preamble_patcher.cc	/^void PreamblePatcher::Initialize() {$/;"	f	class:sidestep::PreamblePatcher
InitializeSystemInfo	src/base/sysinfo.cc	/^static void InitializeSystemInfo() {$/;"	f	file:
Initialized	src/tests/heap-checker_unittest.cc	/^struct Initialized { };$/;"	s	file:
Inner	src/tests/heap-checker_unittest.cc	/^    Inner(Nesting* p) : parent(p) {}$/;"	f	struct:Nesting::Inner
Inner	src/tests/heap-checker_unittest.cc	/^  struct Inner {$/;"	s	struct:Nesting	file:
Insert	src/addressmap-inl.h	/^void AddressMap<Value>::Insert(Key key, Value value) {$/;"	f	class:AddressMap
InsertRange	src/central_freelist.cc	/^void CentralFreeList::InsertRange(void *start, void *end, int N) {$/;"	f	class:tcmalloc::CentralFreeList
InsertRegionLocked	src/memory_region_map.cc	/^inline void MemoryRegionMap::InsertRegionLocked(const Region& region) {$/;"	f	class:MemoryRegionMap
Instance	src/profile-handler.cc	/^ProfileHandler* ProfileHandler::Instance() {$/;"	f	class:ProfileHandler
InstructionType	src/windows/mini_disassembler_types.h	/^enum InstructionType {$/;"	g	namespace:sidestep
IntLog2	src/base/low_level_alloc.cc	/^static int IntLog2(size_t size, size_t base) {$/;"	f	file:
IntSet	src/tests/heap-checker_unittest.cc	/^typedef set<int> IntSet;$/;"	t	file:
InteractiveCommand	src/pprof	/^sub InteractiveCommand {$/;"	s
InteractiveHelpMessage	src/pprof	/^sub InteractiveHelpMessage {$/;"	s
InteractiveMode	src/pprof	/^sub InteractiveMode {$/;"	s
InterfaceA	src/tests/heap-checker_unittest.cc	/^  InterfaceA() { }$/;"	f	class:InterfaceA
InterfaceA	src/tests/heap-checker_unittest.cc	/^class InterfaceA {$/;"	c	file:
InterfaceB	src/tests/heap-checker_unittest.cc	/^  InterfaceB() { }$/;"	f	class:InterfaceB
InterfaceB	src/tests/heap-checker_unittest.cc	/^class InterfaceB {$/;"	c	file:
InterfaceC	src/tests/heap-checker_unittest.cc	/^  InterfaceC() { }$/;"	f	class:InterfaceC
InterfaceC	src/tests/heap-checker_unittest.cc	/^class InterfaceC : public InterfaceA {$/;"	c	file:
InvalidFree	src/tcmalloc.cc	/^void InvalidFree(void* ptr) {$/;"	f	namespace:__anon4
InvalidGetAllocatedSize	src/tcmalloc.cc	/^size_t InvalidGetAllocatedSize(const void* ptr) {$/;"	f	namespace:__anon4
InvalidGetSizeForRealloc	src/tcmalloc.cc	/^size_t InvalidGetSizeForRealloc(const void* old_ptr) {$/;"	f	namespace:__anon4
InvokeDeleteHook	src/malloc_hook-inl.h	/^inline void MallocHook::InvokeDeleteHook(const void* p) {$/;"	f	class:MallocHook
InvokeDeleteHookSlow	src/malloc_hook.cc	/^void MallocHook::InvokeDeleteHookSlow(const void* p) {$/;"	f	class:MallocHook
InvokeMmapHook	src/malloc_hook-inl.h	/^inline void MallocHook::InvokeMmapHook(const void* result,$/;"	f	class:MallocHook
InvokeMmapHookSlow	src/malloc_hook.cc	/^void MallocHook::InvokeMmapHookSlow(const void* result,$/;"	f	class:MallocHook
InvokeMmapReplacement	src/malloc_hook-inl.h	/^inline bool MallocHook::InvokeMmapReplacement(const void* start,$/;"	f	class:MallocHook
InvokeMmapReplacementSlow	src/malloc_hook.cc	/^bool MallocHook::InvokeMmapReplacementSlow(const void* start,$/;"	f	class:MallocHook
InvokeMremapHook	src/malloc_hook-inl.h	/^inline void MallocHook::InvokeMremapHook(const void* result,$/;"	f	class:MallocHook
InvokeMremapHookSlow	src/malloc_hook.cc	/^void MallocHook::InvokeMremapHookSlow(const void* result,$/;"	f	class:MallocHook
InvokeMunmapHook	src/malloc_hook-inl.h	/^inline void MallocHook::InvokeMunmapHook(const void* p, size_t size) {$/;"	f	class:MallocHook
InvokeMunmapHookSlow	src/malloc_hook.cc	/^void MallocHook::InvokeMunmapHookSlow(const void* p, size_t s) {$/;"	f	class:MallocHook
InvokeMunmapReplacement	src/malloc_hook-inl.h	/^inline bool MallocHook::InvokeMunmapReplacement($/;"	f	class:MallocHook
InvokeMunmapReplacementSlow	src/malloc_hook.cc	/^bool MallocHook::InvokeMunmapReplacementSlow(const void* p,$/;"	f	class:MallocHook
InvokeNewHook	src/malloc_hook-inl.h	/^inline void MallocHook::InvokeNewHook(const void* p, size_t s) {$/;"	f	class:MallocHook
InvokeNewHookSlow	src/malloc_hook.cc	/^void MallocHook::InvokeNewHookSlow(const void* p, size_t s) {$/;"	f	class:MallocHook
InvokePreMmapHook	src/malloc_hook-inl.h	/^inline void MallocHook::InvokePreMmapHook(const void* start,$/;"	f	class:MallocHook
InvokePreMmapHookSlow	src/malloc_hook.cc	/^void MallocHook::InvokePreMmapHookSlow(const void* start,$/;"	f	class:MallocHook
InvokePreSbrkHook	src/malloc_hook-inl.h	/^inline void MallocHook::InvokePreSbrkHook(ptrdiff_t increment) {$/;"	f	class:MallocHook
InvokePreSbrkHookSlow	src/malloc_hook.cc	/^void MallocHook::InvokePreSbrkHookSlow(ptrdiff_t increment) {$/;"	f	class:MallocHook
InvokeSbrkHook	src/malloc_hook-inl.h	/^inline void MallocHook::InvokeSbrkHook(const void* result,$/;"	f	class:MallocHook
InvokeSbrkHookSlow	src/malloc_hook.cc	/^void MallocHook::InvokeSbrkHookSlow(const void* result, ptrdiff_t increment) {$/;"	f	class:MallocHook
IsActive	src/heap-checker.cc	/^bool HeapLeakChecker::IsActive() {$/;"	f	class:HeapLeakChecker
IsDebuggerAttached	src/heap-checker.cc	/^static bool IsDebuggerAttached(void) {    \/\/ only works under linux, probably$/;"	f	file:
IsFastPathAllowed	src/thread_cache.h	/^  static bool IsFastPathAllowed() { return MinSizeForSlowPath() != 0; }$/;"	f	class:tcmalloc::ThreadCache
IsHeapProfilerRunning	src/heap-profiler.cc	/^extern "C" int IsHeapProfilerRunning() {$/;"	f
IsHeld	src/base/spinlock.h	/^  inline bool IsHeld() const {$/;"	f	class:SpinLock
IsInited	src/static_vars.h	/^  static bool IsInited() { return pageheap() != NULL; }$/;"	f	class:tcmalloc::Static
IsLibraryNamed	src/heap-checker.cc	/^static bool IsLibraryNamed(const char* library, const char* library_base) {$/;"	f	file:
IsMMapped	src/debugallocation.cc	/^  bool IsMMapped() const { return kMagicMMap == magic1_; }$/;"	f	class:MallocBlock	file:
IsMovWithDisplacement	src/windows/preamble_patcher.cc	/^bool PreamblePatcher::IsMovWithDisplacement($/;"	f	class:sidestep::PreamblePatcher
IsNearAbsoluteCall	src/windows/preamble_patcher.cc	/^bool PreamblePatcher::IsNearAbsoluteCall($/;"	f	class:sidestep::PreamblePatcher
IsNearConditionalJump	src/windows/preamble_patcher.cc	/^bool PreamblePatcher::IsNearConditionalJump($/;"	f	class:sidestep::PreamblePatcher
IsNearRelativeCall	src/windows/preamble_patcher.cc	/^bool PreamblePatcher::IsNearRelativeCall($/;"	f	class:sidestep::PreamblePatcher
IsNearRelativeJump	src/windows/preamble_patcher.cc	/^bool PreamblePatcher::IsNearRelativeJump($/;"	f	class:sidestep::PreamblePatcher
IsOneThread	src/heap-checker.cc	/^static int IsOneThread(void* parameter, int num_threads,$/;"	f	file:
IsPresent	src/base/elf_mem_image.h	/^  bool                 IsPresent() const { return ehdr_ != NULL; }$/;"	f	class:base::ElfMemImage
IsPresent	src/base/vdso_support.h	/^  bool IsPresent() const { return image_.IsPresent(); }$/;"	f	class:base::VDSOSupport
IsProfileURL	src/pprof	/^sub IsProfileURL {$/;"	s
IsRecordingLocked	src/memory_region_map.cc	/^bool MemoryRegionMap::IsRecordingLocked() {$/;"	f	class:MemoryRegionMap
IsSecondPcAlwaysTheSame	src/pprof	/^sub IsSecondPcAlwaysTheSame {$/;"	s
IsShortConditionalJump	src/windows/preamble_patcher.cc	/^bool PreamblePatcher::IsShortConditionalJump($/;"	f	class:sidestep::PreamblePatcher
IsShortJump	src/windows/preamble_patcher.cc	/^bool PreamblePatcher::IsShortJump($/;"	f	class:sidestep::PreamblePatcher
IsSignalEnabled	src/tests/profile-handler_unittest.cc	/^  bool IsSignalEnabled() {$/;"	f	class:__anon28::ProfileHandlerTest
IsSignalHandlerAvailable	src/profile-handler.cc	/^bool ProfileHandler::IsSignalHandlerAvailable() {$/;"	f	class:ProfileHandler
IsSymbolizedProfileFile	src/pprof	/^sub IsSymbolizedProfileFile {$/;"	s
IsTimerEnabled	src/tests/profile-handler_unittest.cc	/^bool IsTimerEnabled() {$/;"	f	namespace:__anon28
IsTimerRunning	src/profile-handler.cc	/^bool ProfileHandler::IsTimerRunning() {$/;"	f	class:ProfileHandler
IsValidMagicValue	src/debugallocation.cc	/^  bool IsValidMagicValue(int value) const {$/;"	f	class:MallocBlock	file:
Iterate	src/addressmap-inl.h	/^inline void AddressMap<Value>::Iterate(void (*callback)(Key, Value*, Type),$/;"	f	class:AddressMap
IterateAllocs	src/heap-profile-table.h	/^  void IterateAllocs(AllocIterator callback) const {$/;"	f	class:HeapProfileTable
IterateBuckets	src/memory_region_map.h	/^void MemoryRegionMap::IterateBuckets($/;"	f	class:MemoryRegionMap
IterateOrderedAllocContexts	src/heap-profile-table.cc	/^void HeapProfileTable::IterateOrderedAllocContexts($/;"	f	class:HeapProfileTable
IterateOverRanges	src/tcmalloc.cc	/^static void IterateOverRanges(void* arg, MallocExtension::RangeFunction func) {$/;"	f	file:
Join	src/tests/profile-handler_unittest.cc	/^  void Join()  {$/;"	f	class:__anon28::Thread
JumpAbsoluteFunction	src/windows/shortproc.asm	/^JumpAbsoluteFunction PROC$/;"	l
JumpNearCondFunction	src/windows/shortproc.asm	/^JumpNearCondFunction PROC$/;"	l
JumpShortCondFunction	src/windows/shortproc.asm	/^JumpShortCondFunction PROC$/;"	l
K	src/packed-cache-inl.h	/^  typedef uintptr_t K;$/;"	t	class:PackedCache
KERNEL_DIRENT	src/base/linux_syscall_support.h	2103;"	d
KERNEL_NSIG	src/base/linux_syscall_support.h	275;"	d
KERNEL_NSIG	src/base/linux_syscall_support.h	277;"	d
Key	src/addressmap-inl.h	/^  typedef const void* Key;$/;"	t	class:AddressMap
KeyEqual	src/stack_trace_table.cc	/^bool StackTraceTable::Bucket::KeyEqual(uintptr_t h,$/;"	f	class:tcmalloc::StackTraceTable::Bucket
KeyFree	src/tests/heap-checker_unittest.cc	/^static void KeyFree(void* ptr) {$/;"	f	file:
KeyInit	src/tests/heap-checker_unittest.cc	/^static void KeyInit() {$/;"	f	file:
KeyMatch	src/packed-cache-inl.h	/^  static bool KeyMatch(T entry, K key) {$/;"	f	class:PackedCache
KeyToUpper	src/packed-cache-inl.h	/^  static UPPER KeyToUpper(K k) {$/;"	f	class:PackedCache
LD	Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LEAF_BITS	src/pagemap.h	/^  static const int LEAF_BITS = BITS - 2*INTERIOR_BITS;$/;"	m	class:TCMalloc_PageMap3
LEAF_BITS	src/pagemap.h	/^  static const int LEAF_BITS = BITS - ROOT_BITS;$/;"	m	class:TCMalloc_PageMap2
LEAF_LENGTH	src/pagemap.h	/^  static const int LEAF_LENGTH = 1 << LEAF_BITS;$/;"	m	class:TCMalloc_PageMap2
LEAF_LENGTH	src/pagemap.h	/^  static const int LEAF_LENGTH = 1 << LEAF_BITS;$/;"	m	class:TCMalloc_PageMap3
LENGTH	src/pagemap.h	/^  static const int LENGTH = 1 << BITS;$/;"	m	class:TCMalloc_PageMap1
LIBCACHEEX_DIR	Makefile	/^LIBCACHEEX_DIR=\/usr\/local\/lib$/;"	m
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBPAPI_DIR	Makefile	/^LIBPAPI_DIR=\/usr\/local\/papi\/lib$/;"	m
LIBPROFILER	Makefile	/^LIBPROFILER = libstacktrace.la libprofiler.la$/;"	m
LIBS	Makefile	/^LIBS = $/;"	m
LIBSPINLOCK	Makefile	/^LIBSPINLOCK = libspinlock.la libsysinfo.la liblogging.la$/;"	m
LIBSTDCXX_LA_LINKER_FLAG	Makefile	/^LIBSTDCXX_LA_LINKER_FLAG = $/;"	m
LIBS_TO_WEAKEN	Makefile	/^LIBS_TO_WEAKEN = libtcmalloc_minimal.la $(am__append_28) \\$/;"	m
LIBTCMALLOC	Makefile	/^LIBTCMALLOC = libtcmalloc.la$/;"	m
LIBTCMALLOC_MINIMAL	Makefile	/^LIBTCMALLOC_MINIMAL = libtcmalloc_minimal.la$/;"	m
LIBTOOL	Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIKELY	src/common.h	48;"	d
LIKELY	src/common.h	51;"	d
LINK	Makefile	/^LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LINKER_INITIALIZED	src/base/basictypes.h	/^enum LinkerInitialized { LINKER_INITIALIZED };$/;"	e	enum:base::LinkerInitialized
LINKER_INITIALIZED	src/base/simple_mutex.h	/^  enum LinkerInitialized { LINKER_INITIALIZED };$/;"	e	enum:MUTEX_NAMESPACE::Mutex::LinkerInitialized
LINKER_INITIALIZED	src/base/spinlock.cc	/^const base::LinkerInitialized SpinLock::LINKER_INITIALIZED =$/;"	m	class:SpinLock	file:
LINKER_INITIALIZED	src/base/spinlock.h	/^  static const base::LinkerInitialized LINKER_INITIALIZED;  \/\/ backwards compat$/;"	m	class:SpinLock
LIPO	Makefile	/^LIPO = $/;"	m
LLA_SkiplistDelete	src/base/low_level_alloc.cc	/^static void LLA_SkiplistDelete(AllocList *head, AllocList *e,$/;"	f	file:
LLA_SkiplistInsert	src/base/low_level_alloc.cc	/^static void LLA_SkiplistInsert(AllocList *head, AllocList *e,$/;"	f	file:
LLA_SkiplistLevels	src/base/low_level_alloc.cc	/^static int LLA_SkiplistLevels(size_t size, size_t base, bool random) {$/;"	f	file:
LLA_SkiplistSearch	src/base/low_level_alloc.cc	/^static AllocList *LLA_SkiplistSearch(AllocList *head,$/;"	f	file:
LN_S	Makefile	/^LN_S = ln -s$/;"	m
LOAD	src/stacktrace_powerpc-inl.h	100;"	d
LOAD	src/stacktrace_powerpc-inl.h	102;"	d
LOAD	src/stacktrace_powerpc-linux-inl.h	121;"	d
LOAD	src/stacktrace_powerpc-linux-inl.h	123;"	d
LOCKABLE	src/base/thread_annotations.h	109;"	d
LOCKS_EXCLUDED	src/base/thread_annotations.h	102;"	d
LOCK_RETURNED	src/base/thread_annotations.h	106;"	d
LOG	src/base/logging.h	/^inline void LOG(int lvl, const char* pat, ...)      { LOG_PRINTF(lvl, pat); }$/;"	f
LOG	src/tests/sampler_test.cc	82;"	d	file:
LOG	src/tests/sampler_test.cc	85;"	d	file:
LOGF	src/tests/heap-checker_unittest.cc	169;"	d	file:
LOGGING_INCLUDES	Makefile	/^LOGGING_INCLUDES = src\/base\/logging.h \\$/;"	m
LOGSTREAM	src/tests/tcmalloc_unittest.cc	152;"	d	file:
LOG_COMPILE	Makefile	/^LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)$/;"	m
LOG_DRIVER	Makefile	/^LOG_DRIVER = $(SHELL) $(top_srcdir)\/test-driver$/;"	m
LOG_IF	src/base/logging.h	/^inline void LOG_IF(int lvl, bool cond, const char* pat, ...) {$/;"	f
LOG_PRINTF	src/base/logging.h	218;"	d
LOWER_PAGE_ALIGN	src/cacheex.h	32;"	d
LOW_LEVEL_ALLOC_UNITTEST_INCLUDES	Makefile	/^LOW_LEVEL_ALLOC_UNITTEST_INCLUDES = src\/base\/low_level_alloc.h \\$/;"	m
LPMODULEENTRY32	src/base/sysinfo.cc	76;"	d	file:
LR	src/base/elfcore.h	116;"	d
LR	src/base/elfcore.h	97;"	d
LSS_ASMINPUT_0	src/base/linux_syscall_support.h	1725;"	d
LSS_ASMINPUT_0	src/base/linux_syscall_support.h	1726;"	d
LSS_ASMINPUT_1	src/base/linux_syscall_support.h	1727;"	d
LSS_ASMINPUT_1	src/base/linux_syscall_support.h	1728;"	d
LSS_ASMINPUT_2	src/base/linux_syscall_support.h	1729;"	d
LSS_ASMINPUT_2	src/base/linux_syscall_support.h	1730;"	d
LSS_ASMINPUT_3	src/base/linux_syscall_support.h	1731;"	d
LSS_ASMINPUT_3	src/base/linux_syscall_support.h	1732;"	d
LSS_ASMINPUT_4	src/base/linux_syscall_support.h	1733;"	d
LSS_ASMINPUT_4	src/base/linux_syscall_support.h	1734;"	d
LSS_ASMINPUT_5	src/base/linux_syscall_support.h	1735;"	d
LSS_ASMINPUT_5	src/base/linux_syscall_support.h	1736;"	d
LSS_ASMINPUT_6	src/base/linux_syscall_support.h	1737;"	d
LSS_ASMINPUT_6	src/base/linux_syscall_support.h	1738;"	d
LSS_BODY	src/base/linux_syscall_support.h	1079;"	d
LSS_BODY	src/base/linux_syscall_support.h	1080;"	d
LSS_BODY	src/base/linux_syscall_support.h	1296;"	d
LSS_BODY	src/base/linux_syscall_support.h	1297;"	d
LSS_BODY	src/base/linux_syscall_support.h	1484;"	d
LSS_BODY	src/base/linux_syscall_support.h	1485;"	d
LSS_BODY	src/base/linux_syscall_support.h	1739;"	d
LSS_BODY	src/base/linux_syscall_support.h	1740;"	d
LSS_BODY	src/base/linux_syscall_support.h	1968;"	d
LSS_BODY	src/base/linux_syscall_support.h	1969;"	d
LSS_BODY	src/base/linux_syscall_support.h	825;"	d
LSS_BODY	src/base/linux_syscall_support.h	826;"	d
LSS_BODY_ARG0	src/base/linux_syscall_support.h	1113;"	d
LSS_BODY_ARG0	src/base/linux_syscall_support.h	1120;"	d
LSS_BODY_ARG1	src/base/linux_syscall_support.h	1114;"	d
LSS_BODY_ARG1	src/base/linux_syscall_support.h	1121;"	d
LSS_BODY_ARG2	src/base/linux_syscall_support.h	1115;"	d
LSS_BODY_ARG2	src/base/linux_syscall_support.h	1123;"	d
LSS_BODY_ARG3	src/base/linux_syscall_support.h	1116;"	d
LSS_BODY_ARG3	src/base/linux_syscall_support.h	1125;"	d
LSS_BODY_ARG4	src/base/linux_syscall_support.h	1117;"	d
LSS_BODY_ARG4	src/base/linux_syscall_support.h	1127;"	d
LSS_BODY_ARG5	src/base/linux_syscall_support.h	1118;"	d
LSS_BODY_ARG5	src/base/linux_syscall_support.h	1129;"	d
LSS_BODY_ARG6	src/base/linux_syscall_support.h	1119;"	d
LSS_BODY_ARG6	src/base/linux_syscall_support.h	1131;"	d
LSS_BODY_ASM0	src/base/linux_syscall_support.h	1083;"	d
LSS_BODY_ASM0	src/base/linux_syscall_support.h	1090;"	d
LSS_BODY_ASM1	src/base/linux_syscall_support.h	1084;"	d
LSS_BODY_ASM1	src/base/linux_syscall_support.h	1091;"	d
LSS_BODY_ASM2	src/base/linux_syscall_support.h	1085;"	d
LSS_BODY_ASM2	src/base/linux_syscall_support.h	1092;"	d
LSS_BODY_ASM3	src/base/linux_syscall_support.h	1086;"	d
LSS_BODY_ASM3	src/base/linux_syscall_support.h	1093;"	d
LSS_BODY_ASM4	src/base/linux_syscall_support.h	1087;"	d
LSS_BODY_ASM4	src/base/linux_syscall_support.h	1094;"	d
LSS_BODY_ASM5	src/base/linux_syscall_support.h	1088;"	d
LSS_BODY_ASM5	src/base/linux_syscall_support.h	1095;"	d
LSS_BODY_ASM6	src/base/linux_syscall_support.h	1089;"	d
LSS_BODY_ASM6	src/base/linux_syscall_support.h	1096;"	d
LSS_BODY_CLOBBER0	src/base/linux_syscall_support.h	1098;"	d
LSS_BODY_CLOBBER0	src/base/linux_syscall_support.h	1105;"	d
LSS_BODY_CLOBBER1	src/base/linux_syscall_support.h	1099;"	d
LSS_BODY_CLOBBER1	src/base/linux_syscall_support.h	1106;"	d
LSS_BODY_CLOBBER2	src/base/linux_syscall_support.h	1100;"	d
LSS_BODY_CLOBBER2	src/base/linux_syscall_support.h	1107;"	d
LSS_BODY_CLOBBER3	src/base/linux_syscall_support.h	1101;"	d
LSS_BODY_CLOBBER3	src/base/linux_syscall_support.h	1108;"	d
LSS_BODY_CLOBBER4	src/base/linux_syscall_support.h	1102;"	d
LSS_BODY_CLOBBER4	src/base/linux_syscall_support.h	1109;"	d
LSS_BODY_CLOBBER5	src/base/linux_syscall_support.h	1103;"	d
LSS_BODY_CLOBBER5	src/base/linux_syscall_support.h	1110;"	d
LSS_BODY_CLOBBER6	src/base/linux_syscall_support.h	1104;"	d
LSS_BODY_CLOBBER6	src/base/linux_syscall_support.h	1111;"	d
LSS_ENTRYPOINT	src/base/linux_syscall_support.h	1048;"	d
LSS_ENTRYPOINT	src/base/linux_syscall_support.h	1049;"	d
LSS_ERRNO	src/base/linux_syscall_support.h	721;"	d
LSS_ERRNO	src/base/linux_syscall_support.h	726;"	d
LSS_ERRNO	src/base/linux_syscall_support.h	728;"	d
LSS_INLINE	src/base/linux_syscall_support.h	731;"	d
LSS_INLINE	src/base/linux_syscall_support.h	733;"	d
LSS_INLINE	src/base/linux_syscall_support.h	735;"	d
LSS_LOADARGS_0	src/base/linux_syscall_support.h	1698;"	d
LSS_LOADARGS_0	src/base/linux_syscall_support.h	1699;"	d
LSS_LOADARGS_1	src/base/linux_syscall_support.h	1701;"	d
LSS_LOADARGS_1	src/base/linux_syscall_support.h	1702;"	d
LSS_LOADARGS_2	src/base/linux_syscall_support.h	1705;"	d
LSS_LOADARGS_2	src/base/linux_syscall_support.h	1706;"	d
LSS_LOADARGS_3	src/base/linux_syscall_support.h	1709;"	d
LSS_LOADARGS_3	src/base/linux_syscall_support.h	1710;"	d
LSS_LOADARGS_4	src/base/linux_syscall_support.h	1713;"	d
LSS_LOADARGS_4	src/base/linux_syscall_support.h	1714;"	d
LSS_LOADARGS_5	src/base/linux_syscall_support.h	1717;"	d
LSS_LOADARGS_5	src/base/linux_syscall_support.h	1718;"	d
LSS_LOADARGS_6	src/base/linux_syscall_support.h	1721;"	d
LSS_LOADARGS_6	src/base/linux_syscall_support.h	1722;"	d
LSS_LOAD_ARG	src/base/linux_syscall_support.h	1293;"	d
LSS_LOAD_ARG	src/base/linux_syscall_support.h	1294;"	d
LSS_NAME	src/base/linux_syscall_support.h	/^    LSS_INLINE void (*LSS_NAME(restore)(void))(void) {$/;"	f
LSS_NAME	src/base/linux_syscall_support.h	/^    LSS_INLINE void (*LSS_NAME(restore_rt)(void))(void) {$/;"	f
LSS_NAME	src/base/linux_syscall_support.h	741;"	d
LSS_NAME	src/base/linux_syscall_support.h	743;"	d
LSS_NAME	src/base/linux_syscall_support.h	745;"	d
LSS_NAME	src/base/linux_syscall_support.h	747;"	d
LSS_NAME	src/base/linux_syscall_support.h	749;"	d
LSS_NAME	src/base/linux_syscall_support.h	751;"	d
LSS_NAME	src/base/linux_syscall_support.h	753;"	d
LSS_NAME	src/base/linux_syscall_support.h	755;"	d
LSS_NAME	src/base/linux_syscall_support.h	757;"	d
LSS_NAME	src/base/linux_syscall_support.h	759;"	d
LSS_NAME	src/base/linux_syscall_support.h	761;"	d
LSS_NAME	src/base/linux_syscall_support.h	763;"	d
LSS_NAME	src/base/linux_syscall_support.h	765;"	d
LSS_REG	src/base/linux_syscall_support.h	1283;"	d
LSS_REG	src/base/linux_syscall_support.h	1284;"	d
LSS_REG	src/base/linux_syscall_support.h	1470;"	d
LSS_REG	src/base/linux_syscall_support.h	1471;"	d
LSS_REG	src/base/linux_syscall_support.h	1966;"	d
LSS_REG	src/base/linux_syscall_support.h	1967;"	d
LSS_RETURN	src/base/linux_syscall_support.h	1068;"	d
LSS_RETURN	src/base/linux_syscall_support.h	1069;"	d
LSS_RETURN	src/base/linux_syscall_support.h	768;"	d
LSS_RETURN	src/base/linux_syscall_support.h	774;"	d
LSS_RETURN	src/base/linux_syscall_support.h	786;"	d
LSS_RETURN	src/base/linux_syscall_support.h	798;"	d
LSS_SAVE_ARG	src/base/linux_syscall_support.h	1291;"	d
LSS_SAVE_ARG	src/base/linux_syscall_support.h	1292;"	d
LSS_SYSCALL_ARG	src/base/linux_syscall_support.h	1057;"	d
LSS_SYSCALL_ARG	src/base/linux_syscall_support.h	1058;"	d
LTCOMPILE	Makefile	/^LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\$/;"	m
LTCXXCOMPILE	Makefile	/^LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
LTLIBRARIES	Makefile	/^LTLIBRARIES = $(lib_LTLIBRARIES) $(noinst_LTLIBRARIES)$/;"	m
LT_OBJDIR	config_bak.h	216;"	d
LT_OBJDIR	src/config.h	216;"	d
LT_OBJDIR	src/windows/config.h	211;"	d
LargeSpanStats	src/page_heap.h	/^  struct LargeSpanStats {$/;"	s	class:tcmalloc::PageHeap
Large_Object_Allocation	doc/tcmalloc.html	/^<h2><A NAME="Large_Object_Allocation">Large Object Allocation<\/A><\/h2>$/;"	a
Leaf	src/pagemap.h	/^  struct Leaf {$/;"	s	class:TCMalloc_PageMap2
Leaf	src/pagemap.h	/^  struct Leaf {$/;"	s	class:TCMalloc_PageMap3
Leave	src/base/low_level_alloc.cc	/^    void Leave() \/*UNLOCK_FUNCTION()*\/ {$/;"	f	class:__anon43::ArenaLock
Length	src/common.h	/^typedef uintptr_t Length;$/;"	t
LgFloor	src/common.cc	/^static inline int LgFloor(size_t n) {$/;"	f	namespace:tcmalloc
LibcInfo	src/windows/patch_functions.cc	/^  LibcInfo() {$/;"	f	class:__anon9::LibcInfo
LibcInfo	src/windows/patch_functions.cc	/^class LibcInfo {$/;"	c	namespace:__anon9	file:
LibcInfoWithPatchFunctions	src/windows/patch_functions.cc	/^template<int> class LibcInfoWithPatchFunctions : public LibcInfo {$/;"	c	namespace:__anon9	file:
LibraryLiveObjectsStacks	src/heap-checker.cc	/^           > LibraryLiveObjectsStacks;$/;"	t	file:
LinkerInitialized	src/base/basictypes.h	/^enum LinkerInitialized { LINKER_INITIALIZED };$/;"	g	namespace:base
LinkerInitialized	src/base/simple_mutex.h	/^  enum LinkerInitialized { LINKER_INITIALIZED };$/;"	g	class:MUTEX_NAMESPACE::Mutex
LinuxKernelCmpxchgFunc	src/base/atomicops-internals-arm-generic.h	/^typedef Atomic32 (*LinuxKernelCmpxchgFunc)(Atomic32 old_value,$/;"	t	namespace:base::subtle
LinuxKernelMemoryBarrierFunc	src/base/atomicops-internals-arm-generic.h	/^typedef void (*LinuxKernelMemoryBarrierFunc)(void);$/;"	t	namespace:base::subtle
ListAllProcessThreadsCallBack	src/base/thread_lister.h	/^typedef int (*ListAllProcessThreadsCallBack)(void *parameter,$/;"	t
ListTooLong	src/thread_cache.cc	/^void ThreadCache::ListTooLong(FreeList* list, size_t cl) {$/;"	f	class:tcmalloc::ThreadCache
ListerParams	src/base/linuxthreads.cc	/^struct ListerParams {$/;"	s	file:
ListerThread	src/base/linuxthreads.cc	/^static void ListerThread(struct ListerParams *args) {$/;"	f	file:
LiveObjectsStack	src/heap-checker.cc	/^              > LiveObjectsStack;$/;"	t	file:
Lock	src/base/simple_mutex.h	/^void Mutex::Lock()         { SAFE_PTHREAD(pthread_mutex_lock); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
Lock	src/base/simple_mutex.h	/^void Mutex::Lock()         { SAFE_PTHREAD(pthread_rwlock_wrlock); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
Lock	src/base/simple_mutex.h	/^void Mutex::Lock()         { assert(--mutex_ == -1); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
Lock	src/base/simple_mutex.h	/^void Mutex::Lock()         { if (is_safe_) EnterCriticalSection(&mutex_); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
Lock	src/base/spinlock.h	/^  inline void Lock() \/*EXCLUSIVE_LOCK_FUNCTION()*\/ {$/;"	f	class:SpinLock
Lock	src/central_freelist.h	/^  void Lock() {$/;"	f	class:tcmalloc::CentralFreeList
Lock	src/memory_region_map.cc	/^void MemoryRegionMap::Lock() {$/;"	f	class:MemoryRegionMap
LockHolder	src/memory_region_map.h	/^    LockHolder() { Lock(); }$/;"	f	class:MemoryRegionMap::LockHolder
LockHolder	src/memory_region_map.h	/^  class LockHolder {$/;"	c	class:MemoryRegionMap
LockInverter	src/central_freelist.cc	/^  inline explicit LockInverter(SpinLock* held, SpinLock *temp)$/;"	f	class:tcmalloc::__anon51::LockInverter
LockInverter	src/central_freelist.cc	/^class LockInverter {$/;"	c	namespace:tcmalloc::__anon51	file:
LockIsHeld	src/memory_region_map.cc	/^bool MemoryRegionMap::LockIsHeld() {$/;"	f	class:MemoryRegionMap
Log	src/internal_logging.cc	/^void Log(LogMode mode, const char* filename, int line,$/;"	f	namespace:tcmalloc
LogAllLocked	src/memory_region_map.cc	/^void MemoryRegionMap::LogAllLocked() {$/;"	f	class:MemoryRegionMap
LogHidden	src/tests/heap-checker_unittest.cc	/^static void LogHidden(const char* message, const void* ptr) {$/;"	f	file:
LogItem	src/internal_logging.h	/^  LogItem()                     : tag_(kEnd)      { }$/;"	f	class:tcmalloc::LogItem
LogItem	src/internal_logging.h	/^  LogItem(const char* v)        : tag_(kStr)      { u_.str = v; }$/;"	f	class:tcmalloc::LogItem
LogItem	src/internal_logging.h	/^  LogItem(const void* v)        : tag_(kPtr)      { u_.ptr = v; }$/;"	f	class:tcmalloc::LogItem
LogItem	src/internal_logging.h	/^  LogItem(int v)                : tag_(kSigned)   { u_.snum = v; }$/;"	f	class:tcmalloc::LogItem
LogItem	src/internal_logging.h	/^  LogItem(long long v)          : tag_(kSigned)   { u_.snum = v; }$/;"	f	class:tcmalloc::LogItem
LogItem	src/internal_logging.h	/^  LogItem(long v)               : tag_(kSigned)   { u_.snum = v; }$/;"	f	class:tcmalloc::LogItem
LogItem	src/internal_logging.h	/^  LogItem(unsigned int v)       : tag_(kUnsigned) { u_.unum = v; }$/;"	f	class:tcmalloc::LogItem
LogItem	src/internal_logging.h	/^  LogItem(unsigned long long v) : tag_(kUnsigned) { u_.unum = v; }$/;"	f	class:tcmalloc::LogItem
LogItem	src/internal_logging.h	/^  LogItem(unsigned long v)      : tag_(kUnsigned) { u_.unum = v; }$/;"	f	class:tcmalloc::LogItem
LogItem	src/internal_logging.h	/^class LogItem {$/;"	c	namespace:tcmalloc
LogMode	src/internal_logging.h	/^enum LogMode {$/;"	g	namespace:tcmalloc
LogPrintf	src/base/logging.h	/^inline void LogPrintf(int severity, const char* pat, va_list ap) {$/;"	f
LogSeverity	src/base/logging.h	/^enum LogSeverity {INFO = -1, WARNING = -2, ERROR = -3, FATAL = -4};$/;"	g
Logger	src/internal_logging.cc	/^class Logger {$/;"	c	namespace:tcmalloc	file:
LookupSymbol	src/base/elf_mem_image.cc	/^bool ElfMemImage::LookupSymbol(const char *name,$/;"	f	class:base::ElfMemImage
LookupSymbol	src/base/vdso_support.cc	/^bool VDSOSupport::LookupSymbol(const char *name,$/;"	f	class:base::VDSOSupport
LookupSymbolByAddress	src/base/elf_mem_image.cc	/^bool ElfMemImage::LookupSymbolByAddress(const void *address,$/;"	f	class:base::ElfMemImage
LookupSymbolByAddress	src/base/vdso_support.cc	/^bool VDSOSupport::LookupSymbolByAddress(const void *address,$/;"	f	class:base::VDSOSupport
LowLevelAlloc	src/base/low_level_alloc.h	/^class LowLevelAlloc {$/;"	c
MADV_FREE	src/system-alloc.cc	72;"	d	file:
MAINT	Makefile	/^MAINT = #$/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/root\/grt\/tcmalloc\/gperftools-2.4_NW_externed_v2.0\/missing makeinfo$/;"	m
MAKE_HOOK_CALLBACK	src/tests/tcmalloc_unittest.cc	728;"	d	file:
MALLOC_HOOK_HAVE_DO_MMAP64	src/malloc_hook_mmap_linux.h	120;"	d
MALLOC_HOOK_HAVE_DO_MMAP64	src/malloc_hook_mmap_linux.h	236;"	d
MALLOC_HOOK_HAVE_DO_MMAP64	src/malloc_hook_mmap_linux.h	63;"	d
MALLOC_HOOK_MAYBE_VOLATILE	config_bak.h	219;"	d
MALLOC_HOOK_MAYBE_VOLATILE	src/config.h	219;"	d
MALLOC_HOOK_MAYBE_VOLATILE	src/windows/config.h	214;"	d
MALLOC_HOOK_SYSCALL	src/malloc_hook_mmap_freebsd.h	135;"	d
MALLOC_HOOK_SYSCALL	src/malloc_hook_mmap_freebsd.h	54;"	d
MALLOC_HOOK_SYSCALL	src/malloc_hook_mmap_freebsd.h	56;"	d
MALLOC_TRACE	src/debugallocation.cc	988;"	d	file:
MANIFEST_TOOL	Makefile	/^MANIFEST_TOOL = :$/;"	m
MANS	Makefile	/^MANS = $(dist_man_MANS)$/;"	m
MAP_ANONYMOUS	src/base/low_level_alloc.cc	55;"	d	file:
MAP_ANONYMOUS	src/debugallocation.cc	99;"	d	file:
MAP_ANONYMOUS	src/system-alloc.cc	65;"	d	file:
MAP_ANONYMOUS	src/tests/heap-checker_unittest.cc	113;"	d	file:
MAP_ANONYMOUS	src/tests/malloc_hook_test.cc	56;"	d	file:
MAP_ANONYMOUS	src/tests/tcmalloc_unittest.cc	149;"	d	file:
MAP_ANONYMOUS	src/windows/port.h	273;"	d
MAP_CACHE_AWARE_STATE	src/cacheex.h	17;"	d
MAP_FAILED	src/memory_region_map.cc	111;"	d	file:
MAP_FAILED	src/windows/port.h	268;"	d
MAP_PRIVATE	src/windows/port.h	274;"	d
MAP_SHARED	src/windows/port.h	275;"	d
MAX_DEPTH	src/stacktrace_instrument-inl.h	62;"	d
MAX_PERTHREAD_VALS	src/maybe_threads.cc	73;"	d	file:
MAX_PREAMBLE_STUB_SIZE	src/windows/preamble_patcher.h	61;"	d
MAX_PREAMBLE_STUB_SIZE	src/windows/preamble_patcher.h	63;"	d
MAX_THREAD	src/stacktrace_instrument-inl.h	58;"	d
MAX_THREAD	src/stacktrace_instrument-inl.h	60;"	d
MAYBE_LIVE	src/heap-checker.cc	/^  MAYBE_LIVE,        \/\/ Is a piece of writable memory from \/proc\/self\/maps$/;"	e	enum:ObjectPlacement	file:
MIPSREG	src/base/elfcore.h	288;"	d
MIPS_SYSCALL_CLOBBERS	src/base/linux_syscall_support.h	1477;"	d
MIPS_SYSCALL_CLOBBERS	src/base/linux_syscall_support.h	1480;"	d
MKDIR_P	Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MMAP_OPEN_MAPPING	config_bak.h	311;"	d
MMAP_OPEN_MAPPING	src/cacheex.h	11;"	d
MMAP_RESTRICT_MAPPING	config_bak.h	312;"	d
MMAP_RESTRICT_MAPPING	src/cacheex.h	12;"	d
MODULEENTRY32	src/base/sysinfo.cc	72;"	d	file:
MODULEENTRY32	src/base/sysinfo.h	206;"	d
MODULEENTRY32	src/base/sysinfo.h	208;"	d
MREMAP_FIXED	src/base/linux_syscall_support.h	520;"	d
MREMAP_FIXED	src/memory_region_map.cc	134;"	d	file:
MREMAP_FIXED	src/windows/port.h	269;"	d
MUST_BE_ON_HEAP	src/heap-checker.cc	/^  MUST_BE_ON_HEAP,   \/\/ Must point to a live object of the matching size in the$/;"	e	enum:ObjectPlacement	file:
MUTEX_NAMESPACE	src/base/simple_mutex.h	/^namespace MUTEX_NAMESPACE {$/;"	n
MUTEX_NAMESPACE	src/base/simple_mutex.h	144;"	d
MUTEX_NAMESPACE	src/base/simple_mutex.h	330;"	d
Magic	src/base/low_level_alloc.cc	/^inline static intptr_t Magic(intptr_t magic, AllocList::Header *ptr) {$/;"	f	file:
Main	src/pprof	/^sub Main() {$/;"	s
MakeALeak	src/tests/heap-checker_unittest.cc	/^static void MakeALeak(void** arr) {$/;"	f	file:
MakeCacheSpace	src/central_freelist.cc	/^bool CentralFreeList::MakeCacheSpace() {$/;"	f	class:tcmalloc::CentralFreeList
MakeDeathLoop	src/tests/heap-checker_unittest.cc	/^static void MakeDeathLoop(void** arr1, void** arr2) {$/;"	f	file:
MakeDisabledLiveCallbackLocked	src/heap-checker.cc	/^static void MakeDisabledLiveCallbackLocked($/;"	f	file:
MakeIgnoredObjectsLiveCallbackLocked	src/heap-checker.cc	/^static void MakeIgnoredObjectsLiveCallbackLocked($/;"	f	file:
MakeProfileBaseName	src/pprof	/^sub MakeProfileBaseName {$/;"	s
MakeProfileNameLocked	src/heap-checker.cc	/^char* HeapLeakChecker::MakeProfileNameLocked() {$/;"	f	class:HeapLeakChecker
MakeSortedBucketList	src/heap-profile-table.cc	/^HeapProfileTable::MakeSortedBucketList() const {$/;"	f	class:HeapProfileTable
MakeTestingHook	src/windows/auto_testing_hook.h	/^  static AutoTestingHookImpl<T> MakeTestingHook(T target_function,$/;"	f	class:sidestep::AutoTestingHookImpl
MakeTestingHook	src/windows/auto_testing_hook.h	/^inline AutoTestingHookImpl<T> MakeTestingHook(T target, T replacement) {$/;"	f	namespace:sidestep
MakeTestingHook	src/windows/auto_testing_hook.h	/^inline AutoTestingHookImpl<T> MakeTestingHook(T target,$/;"	f	namespace:sidestep
MakeTestingHookHolder	src/windows/auto_testing_hook.h	/^  static AutoTestingHookImpl<T>* MakeTestingHookHolder(T target_function,$/;"	f	class:sidestep::AutoTestingHookImpl
MakeTestingHookHolder	src/windows/auto_testing_hook.h	/^inline AutoTestingHookImpl<T>* MakeTestingHookHolder(T target, T replacement) {$/;"	f	namespace:sidestep
MallocBlock	src/debugallocation.cc	/^class MallocBlock {$/;"	c	file:
MallocBlockQueueEntry	src/debugallocation.cc	/^  MallocBlockQueueEntry() : block(NULL), size(0),$/;"	f	struct:MallocBlockQueueEntry
MallocBlockQueueEntry	src/debugallocation.cc	/^  MallocBlockQueueEntry(MallocBlock* b, size_t s) : block(b), size(s) {$/;"	f	struct:MallocBlockQueueEntry
MallocBlockQueueEntry	src/debugallocation.cc	/^struct MallocBlockQueueEntry {$/;"	s	file:
MallocExtension	src/gperftools/malloc_extension.h	/^class PERFTOOLS_DLL_DECL MallocExtension {$/;"	c
MallocExtensionWriter	src/gperftools/malloc_extension.h	/^typedef std::string MallocExtensionWriter;$/;"	t
MallocExtension_GetOwnership	src/malloc_extension.cc	/^MallocExtension_Ownership MallocExtension_GetOwnership(const void* p) {$/;"	f
MallocExtension_Ownership	src/gperftools/malloc_extension_c.h	/^} MallocExtension_Ownership;$/;"	t	typeref:enum:__anon32
MallocExtension_kNotOwned	src/gperftools/malloc_extension_c.h	/^  MallocExtension_kNotOwned$/;"	e	enum:__anon32
MallocExtension_kOwned	src/gperftools/malloc_extension_c.h	/^  MallocExtension_kOwned,$/;"	e	enum:__anon32
MallocExtension_kUnknownOwnership	src/gperftools/malloc_extension_c.h	/^  MallocExtension_kUnknownOwnership = 0,$/;"	e	enum:__anon32
MallocHook	src/gperftools/malloc_hook.h	/^class PERFTOOLS_DLL_DECL MallocHook {$/;"	c
MallocHook_AddDeleteHook	src/malloc_hook.cc	/^int MallocHook_AddDeleteHook(MallocHook_DeleteHook hook) {$/;"	f
MallocHook_AddMmapHook	src/malloc_hook.cc	/^int MallocHook_AddMmapHook(MallocHook_MmapHook hook) {$/;"	f
MallocHook_AddMremapHook	src/malloc_hook.cc	/^int MallocHook_AddMremapHook(MallocHook_MremapHook hook) {$/;"	f
MallocHook_AddMunmapHook	src/malloc_hook.cc	/^int MallocHook_AddMunmapHook(MallocHook_MunmapHook hook) {$/;"	f
MallocHook_AddNewHook	src/malloc_hook.cc	/^int MallocHook_AddNewHook(MallocHook_NewHook hook) {$/;"	f
MallocHook_AddPreMmapHook	src/malloc_hook.cc	/^int MallocHook_AddPreMmapHook(MallocHook_PreMmapHook hook) {$/;"	f
MallocHook_AddPreSbrkHook	src/malloc_hook.cc	/^int MallocHook_AddPreSbrkHook(MallocHook_PreSbrkHook hook) {$/;"	f
MallocHook_AddSbrkHook	src/malloc_hook.cc	/^int MallocHook_AddSbrkHook(MallocHook_SbrkHook hook) {$/;"	f
MallocHook_DeleteHook	src/gperftools/malloc_hook_c.h	/^typedef void (*MallocHook_DeleteHook)(const void* ptr);$/;"	t
MallocHook_GetCallerStackTrace	src/malloc_hook.cc	/^extern "C" int MallocHook_GetCallerStackTrace(void** result, int max_depth,$/;"	f
MallocHook_InitAtFirstAllocation_HeapLeakChecker	src/heap-checker.cc	/^extern "C" void MallocHook_InitAtFirstAllocation_HeapLeakChecker() {$/;"	f
MallocHook_InitAtFirstAllocation_HeapLeakChecker	src/malloc_hook.cc	/^extern "C" void MallocHook_InitAtFirstAllocation_HeapLeakChecker() {$/;"	f
MallocHook_MmapHook	src/gperftools/malloc_hook_c.h	/^typedef void (*MallocHook_MmapHook)(const void* result,$/;"	t
MallocHook_MmapReplacement	src/gperftools/malloc_hook_c.h	/^typedef int (*MallocHook_MmapReplacement)(const void* start,$/;"	t
MallocHook_MremapHook	src/gperftools/malloc_hook_c.h	/^typedef void (*MallocHook_MremapHook)(const void* result,$/;"	t
MallocHook_MunmapHook	src/gperftools/malloc_hook_c.h	/^typedef void (*MallocHook_MunmapHook)(const void* ptr, size_t size);$/;"	t
MallocHook_MunmapReplacement	src/gperftools/malloc_hook_c.h	/^typedef int (*MallocHook_MunmapReplacement)(const void* ptr,$/;"	t
MallocHook_NewHook	src/gperftools/malloc_hook_c.h	/^typedef void (*MallocHook_NewHook)(const void* ptr, size_t size);$/;"	t
MallocHook_PreMmapHook	src/gperftools/malloc_hook_c.h	/^typedef void (*MallocHook_PreMmapHook)(const void *start,$/;"	t
MallocHook_PreSbrkHook	src/gperftools/malloc_hook_c.h	/^typedef void (*MallocHook_PreSbrkHook)(ptrdiff_t increment);$/;"	t
MallocHook_RemoveDeleteHook	src/malloc_hook.cc	/^int MallocHook_RemoveDeleteHook(MallocHook_DeleteHook hook) {$/;"	f
MallocHook_RemoveMmapHook	src/malloc_hook.cc	/^int MallocHook_RemoveMmapHook(MallocHook_MmapHook hook) {$/;"	f
MallocHook_RemoveMmapReplacement	src/malloc_hook.cc	/^int MallocHook_RemoveMmapReplacement(MallocHook_MmapReplacement hook) {$/;"	f
MallocHook_RemoveMremapHook	src/malloc_hook.cc	/^int MallocHook_RemoveMremapHook(MallocHook_MremapHook hook) {$/;"	f
MallocHook_RemoveMunmapHook	src/malloc_hook.cc	/^int MallocHook_RemoveMunmapHook(MallocHook_MunmapHook hook) {$/;"	f
MallocHook_RemoveMunmapReplacement	src/malloc_hook.cc	/^int MallocHook_RemoveMunmapReplacement(MallocHook_MunmapReplacement hook) {$/;"	f
MallocHook_RemoveNewHook	src/malloc_hook.cc	/^int MallocHook_RemoveNewHook(MallocHook_NewHook hook) {$/;"	f
MallocHook_RemovePreMmapHook	src/malloc_hook.cc	/^int MallocHook_RemovePreMmapHook(MallocHook_PreMmapHook hook) {$/;"	f
MallocHook_RemovePreSbrkHook	src/malloc_hook.cc	/^int MallocHook_RemovePreSbrkHook(MallocHook_PreSbrkHook hook) {$/;"	f
MallocHook_RemoveSbrkHook	src/malloc_hook.cc	/^int MallocHook_RemoveSbrkHook(MallocHook_SbrkHook hook) {$/;"	f
MallocHook_SbrkHook	src/gperftools/malloc_hook_c.h	/^typedef void (*MallocHook_SbrkHook)(const void* result, ptrdiff_t increment);$/;"	t
MallocHook_SetDeleteHook	src/malloc_hook.cc	/^MallocHook_DeleteHook MallocHook_SetDeleteHook(MallocHook_DeleteHook hook) {$/;"	f
MallocHook_SetMmapHook	src/malloc_hook.cc	/^MallocHook_MmapHook MallocHook_SetMmapHook(MallocHook_MmapHook hook) {$/;"	f
MallocHook_SetMmapReplacement	src/malloc_hook.cc	/^int MallocHook_SetMmapReplacement(MallocHook_MmapReplacement hook) {$/;"	f
MallocHook_SetMremapHook	src/malloc_hook.cc	/^MallocHook_MremapHook MallocHook_SetMremapHook(MallocHook_MremapHook hook) {$/;"	f
MallocHook_SetMunmapHook	src/malloc_hook.cc	/^MallocHook_MunmapHook MallocHook_SetMunmapHook(MallocHook_MunmapHook hook) {$/;"	f
MallocHook_SetMunmapReplacement	src/malloc_hook.cc	/^int MallocHook_SetMunmapReplacement(MallocHook_MunmapReplacement hook) {$/;"	f
MallocHook_SetNewHook	src/malloc_hook.cc	/^MallocHook_NewHook MallocHook_SetNewHook(MallocHook_NewHook hook) {$/;"	f
MallocHook_SetPreMmapHook	src/malloc_hook.cc	/^MallocHook_PreMmapHook MallocHook_SetPreMmapHook(MallocHook_PreMmapHook hook) {$/;"	f
MallocHook_SetPreSbrkHook	src/malloc_hook.cc	/^MallocHook_PreSbrkHook MallocHook_SetPreSbrkHook(MallocHook_PreSbrkHook hook) {$/;"	f
MallocHook_SetSbrkHook	src/malloc_hook.cc	/^MallocHook_SbrkHook MallocHook_SetSbrkHook(MallocHook_SbrkHook hook) {$/;"	f
MallocMemoryStats	src/debugallocation.cc	/^  virtual bool MallocMemoryStats(int* blocks, size_t* total,$/;"	f	class:DebugMallocImplementation
MallocMemoryStats	src/malloc_extension.cc	/^bool MallocExtension::MallocMemoryStats(int* blocks, size_t* total,$/;"	f	class:MallocExtension
MallocRange	src/gperftools/malloc_extension.h	/^struct MallocRange {$/;"	s	namespace:base
Mallocer	src/tests/heap-checker_unittest.cc	/^static void* Mallocer(uintptr_t* addr_after_malloc_call) {$/;"	f	file:
MapArgsAllocIterator	src/heap-profile-table.h	/^  static void MapArgsAllocIterator(const void* ptr, AllocValue* v,$/;"	f	class:HeapProfileTable
MapObjectToSpan	src/central_freelist.cc	/^Span* MapObjectToSpan(void* object) {$/;"	f	namespace:tcmalloc
MapSelector	src/page_heap.h	/^template <> class MapSelector<32> {$/;"	c	namespace:tcmalloc
MapSelector	src/page_heap.h	/^template <int BITS> class MapSelector {$/;"	c	namespace:tcmalloc
MapSize	src/memory_region_map.h	/^  static int64 MapSize() { return map_size_; }$/;"	f	class:MemoryRegionMap
MapSymbolsWithNM	src/pprof	/^sub MapSymbolsWithNM {$/;"	s
MapToSymbols	src/pprof	/^sub MapToSymbols {$/;"	s
MarkAsIgnored	src/heap-profile-table.cc	/^void HeapProfileTable::MarkAsIgnored(const void* ptr) {$/;"	f	class:HeapProfileTable
MarkAsLive	src/heap-profile-table.cc	/^bool HeapProfileTable::MarkAsLive(const void* ptr) {$/;"	f	class:HeapProfileTable
MarkThreadBusy	src/malloc_extension.cc	/^void MallocExtension::MarkThreadBusy() {$/;"	f	class:MallocExtension
MarkThreadIdle	src/malloc_extension.cc	/^void MallocExtension::MarkThreadIdle() {$/;"	f	class:MallocExtension
MarkThreadIdle	src/tcmalloc.cc	/^  virtual void MarkThreadIdle() {$/;"	f	class:TCMallocImplementation
MayMergeSpans	src/page_heap.cc	/^bool PageHeap::MayMergeSpans(Span *span, Span *other) {$/;"	f	class:tcmalloc::PageHeap
MaybeDumpProfileLocked	src/heap-profiler.cc	/^static void MaybeDumpProfileLocked() {$/;"	f	file:
MaybePrint	src/windows/nm-pdb.c	/^static void MaybePrint(const char* var, const char* description) {$/;"	f	file:
Memalign	src/tests/tcmalloc_unittest.cc	/^static inline void* Memalign(size_t align, size_t size) {$/;"	f	file:
MemoryAligner	src/system-alloc.cc	/^union MemoryAligner {$/;"	u	file:
MemoryBarrier	src/base/atomicops-internals-arm-generic.h	/^inline void MemoryBarrier() {$/;"	f	namespace:base::subtle
MemoryBarrier	src/base/atomicops-internals-arm-v6plus.h	/^inline void MemoryBarrier() {$/;"	f	namespace:base::subtle
MemoryBarrier	src/base/atomicops-internals-gcc.h	/^inline void MemoryBarrier() {$/;"	f	namespace:base::subtle
MemoryBarrier	src/base/atomicops-internals-linuxppc.h	/^inline void MemoryBarrier() {$/;"	f	namespace:base::subtle
MemoryBarrier	src/base/atomicops-internals-macosx.h	/^inline void MemoryBarrier() {$/;"	f	namespace:base::subtle
MemoryBarrier	src/base/atomicops-internals-mips.h	/^inline void MemoryBarrier()$/;"	f	namespace:base::subtle
MemoryBarrier	src/base/atomicops-internals-windows.h	/^inline void MemoryBarrier() {$/;"	f
MemoryBarrier	src/base/atomicops-internals-windows.h	/^inline void MemoryBarrier() {$/;"	f	namespace:base::subtle
MemoryBarrier	src/base/atomicops-internals-x86.h	/^inline void MemoryBarrier() {$/;"	f	namespace:base::subtle
MemoryRegionMap	src/memory_region_map.h	/^class MemoryRegionMap {$/;"	c
MemoryStats	src/debugallocation.cc	/^  static bool MemoryStats(int* blocks, size_t* total,$/;"	f	class:MallocBlock
MergeIntoFreeList	src/page_heap.cc	/^void PageHeap::MergeIntoFreeList(Span* span) {$/;"	f	class:tcmalloc::PageHeap
MergeSymbols	src/pprof	/^sub MergeSymbols {$/;"	s
MetaDataAlloc	src/common.cc	/^void* MetaDataAlloc(size_t bytes) {$/;"	f	namespace:tcmalloc
MinSizeForSlowPath	src/thread_cache.h	/^inline size_t ThreadCache::MinSizeForSlowPath() {$/;"	f	class:tcmalloc::ThreadCache
MiniDisassembler	src/windows/mini_disassembler.cc	/^MiniDisassembler::MiniDisassembler()$/;"	f	class:sidestep::MiniDisassembler
MiniDisassembler	src/windows/mini_disassembler.cc	/^MiniDisassembler::MiniDisassembler(bool operand_default_is_32_bits,$/;"	f	class:sidestep::MiniDisassembler
MiniDisassembler	src/windows/mini_disassembler.h	/^class PERFTOOLS_DLL_DECL MiniDisassembler {$/;"	c	namespace:sidestep
Miscellaneous	src/pprof	/^Miscellaneous:$/;"	l
MmapHook	src/gperftools/malloc_hook.h	/^  typedef MallocHook_MmapHook MmapHook;$/;"	t	class:MallocHook
MmapHook	src/heap-profiler.cc	/^static void MmapHook(const void* result, const void* start, size_t size,$/;"	f	file:
MmapHook	src/memory_region_map.cc	/^void MemoryRegionMap::MmapHook(const void* result,$/;"	f	class:MemoryRegionMap
MmapReplacement	src/gperftools/malloc_hook.h	/^  typedef MallocHook_MmapReplacement MmapReplacement;$/;"	t	class:MallocHook
MmapReplacement	src/tests/malloc_hook_test.cc	/^int MmapReplacement(const void* start,$/;"	f	namespace:__anon25
MmapSysAllocator	src/system-alloc.cc	/^  MmapSysAllocator() : SysAllocator() {$/;"	f	class:MmapSysAllocator
MmapSysAllocator	src/system-alloc.cc	/^class MmapSysAllocator : public SysAllocator {$/;"	c	file:
Mmapper	src/tests/heap-checker_unittest.cc	/^static void* Mmapper(uintptr_t* addr_after_mmap_call) {$/;"	f	file:
ModrmEntry	src/windows/mini_disassembler_types.h	/^struct ModrmEntry {$/;"	s	namespace:sidestep
Module32First	src/base/sysinfo.cc	73;"	d	file:
Module32Next	src/base/sysinfo.cc	74;"	d	file:
ModuleEntryCopy	src/windows/patch_functions.cc	/^  ModuleEntryCopy() {$/;"	f	struct:__anon9::ModuleEntryCopy
ModuleEntryCopy	src/windows/patch_functions.cc	/^  ModuleEntryCopy(const MODULEINFO& mi) {$/;"	f	struct:__anon9::ModuleEntryCopy
ModuleEntryCopy	src/windows/patch_functions.cc	/^struct ModuleEntryCopy {$/;"	s	namespace:__anon9	file:
MremapHook	src/gperftools/malloc_hook.h	/^  typedef MallocHook_MremapHook MremapHook;$/;"	t	class:MallocHook
MremapHook	src/heap-profiler.cc	/^static void MremapHook(const void* result, const void* old_addr,$/;"	f	file:
MremapHook	src/memory_region_map.cc	/^void MemoryRegionMap::MremapHook(const void* result,$/;"	f	class:MemoryRegionMap
MultipleIdleCalls	src/tests/markidle_unittest.cc	/^static void MultipleIdleCalls() {$/;"	f	file:
MultipleIdleNonIdlePhases	src/tests/markidle_unittest.cc	/^static void MultipleIdleNonIdlePhases() {$/;"	f	file:
MultithreadedTestThread	src/tests/malloc_hook_test.cc	/^void MultithreadedTestThread(TestHookList* list, int shift,$/;"	f	namespace:__anon25
MultithreadedTestThreadRunner	src/tests/malloc_hook_test.cc	/^void MultithreadedTestThreadRunner(int thread_num) {$/;"	f	namespace:__anon25
MunmapHook	src/gperftools/malloc_hook.h	/^  typedef MallocHook_MunmapHook MunmapHook;$/;"	t	class:MallocHook
MunmapHook	src/heap-profiler.cc	/^static void MunmapHook(const void* ptr, size_t size) {$/;"	f	file:
MunmapHook	src/memory_region_map.cc	/^void MemoryRegionMap::MunmapHook(const void* ptr, size_t size) {$/;"	f	class:MemoryRegionMap
MunmapReplacement	src/gperftools/malloc_hook.h	/^  typedef MallocHook_MunmapReplacement MunmapReplacement;$/;"	t	class:MallocHook
MunmapReplacement	src/tests/malloc_hook_test.cc	/^int MunmapReplacement(const void* ptr, size_t size, int* result) {$/;"	f	namespace:__anon25
Mutex	src/base/simple_mutex.h	/^  Mutex(Mutex* \/*ignored*\/) {}$/;"	f	class:MUTEX_NAMESPACE::Mutex
Mutex	src/base/simple_mutex.h	/^Mutex::Mutex() : destroy_(true) {$/;"	f	class:MUTEX_NAMESPACE::Mutex
Mutex	src/base/simple_mutex.h	/^Mutex::Mutex() : mutex_(0) { }$/;"	f	class:MUTEX_NAMESPACE::Mutex
Mutex	src/base/simple_mutex.h	/^Mutex::Mutex(LinkerInitialized) : destroy_(false) {$/;"	f	class:MUTEX_NAMESPACE::Mutex
Mutex	src/base/simple_mutex.h	/^Mutex::Mutex(Mutex::LinkerInitialized) : destroy_(false) {$/;"	f	class:MUTEX_NAMESPACE::Mutex
Mutex	src/base/simple_mutex.h	/^Mutex::Mutex(Mutex::LinkerInitialized) : mutex_(0) { }$/;"	f	class:MUTEX_NAMESPACE::Mutex
Mutex	src/base/simple_mutex.h	/^class Mutex {$/;"	c	namespace:MUTEX_NAMESPACE
MutexLock	src/base/simple_mutex.h	/^  explicit MutexLock(Mutex *mu) : mu_(mu) { mu_->Lock(); }$/;"	f	class:MUTEX_NAMESPACE::MutexLock
MutexLock	src/base/simple_mutex.h	/^class MutexLock {$/;"	c	namespace:MUTEX_NAMESPACE
MutexLock	src/base/simple_mutex.h	322;"	d
MutexType	src/base/simple_mutex.h	/^  typedef CRITICAL_SECTION MutexType;$/;"	t
MutexType	src/base/simple_mutex.h	/^  typedef int MutexType;      \/\/ to keep a lock-count$/;"	t
MutexType	src/base/simple_mutex.h	/^  typedef pthread_mutex_t MutexType;$/;"	t
MutexType	src/base/simple_mutex.h	/^  typedef pthread_rwlock_t MutexType;$/;"	t
MyAllocator	src/memory_region_map.h	/^  struct MyAllocator {$/;"	s	class:MemoryRegionMap
NANOSLEEP_LIBS	Makefile	/^NANOSLEEP_LIBS = $/;"	m
NM	Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	Makefile	/^NMEDIT = $/;"	m
NOMINMAX	src/base/logging.h	245;"	d
NOMINMAX	src/windows/port.cc	39;"	d	file:
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NO_BUILTIN_CXXFLAGS	Makefile	/^NO_BUILTIN_CXXFLAGS = $(am__append_3)$/;"	m
NO_EXCEPTIONS	Makefile	/^NO_EXCEPTIONS = -fno-exceptions$/;"	m
NO_HEAP_CHECK	src/windows/config.h	305;"	d
NO_INTR	src/base/linuxthreads.cc	145;"	d	file:
NO_INTR	src/base/logging.cc	88;"	d	file:
NO_INTR	src/base/sysinfo.cc	85;"	d	file:
NO_INTR	src/profiledata.cc	137;"	d	file:
NO_INTR	src/tests/profiledata_unittest.cc	70;"	d	file:
NO_LEAKS	src/tests/heap-checker_unittest.cc	/^enum CheckType { SAME_HEAP, NO_LEAKS };$/;"	e	enum:CheckType	file:
NO_MINUS_C_MINUS_O	src/windows/config.h	217;"	d
NO_SHARED_LIBS_IN_PROC_MAPS	src/gperftools/heap-checker.h	/^    NO_SHARED_LIBS_IN_PROC_MAPS$/;"	e	enum:HeapLeakChecker::ProcMapsResult
NO_THREAD_SAFETY_ANALYSIS	src/base/thread_annotations.h	131;"	d
NO_THREAD_SAFETY_ANALYSIS	src/profile-handler.cc	/^      NO_THREAD_SAFETY_ANALYSIS;$/;"	m	class:ProfileHandler	file:
NROFF	Makefile	/^NROFF = nroff$/;"	m
NR_CACHE_MAPPING	config_bak.h	307;"	d
NR_CACHE_MAPPING	src/cacheex.h	7;"	d
NR_HEAP_TYPE	config_bak.h	314;"	d
NR_HEAP_TYPE	src/cacheex.h	14;"	d
NUM_BITS	src/tests/atomicops_unittest.cc	42;"	d	file:
NVALGRIND	src/third_party/valgrind.h	116;"	d
N_ONES_	src/packed-cache-inl.h	125;"	d
N_ONES_	src/packed-cache-inl.h	237;"	d
Nesting	src/tests/heap-checker_unittest.cc	/^  Nesting() : i0(this), i1(this), i2(this), i3(this) {}$/;"	f	struct:Nesting
Nesting	src/tests/heap-checker_unittest.cc	/^struct Nesting {$/;"	s	file:
New	src/addressmap-inl.h	/^  template <class T> T* New(int num) {$/;"	f	class:AddressMap
New	src/page_heap.cc	/^Span* PageHeap::New(Length n) {$/;"	f	class:tcmalloc::PageHeap
New	src/page_heap_allocator.h	/^  T* New() {$/;"	f	class:tcmalloc::PageHeapAllocator
NewArena	src/base/low_level_alloc.cc	/^LowLevelAlloc::Arena *LowLevelAlloc::NewArena(int32 flags,$/;"	f	class:LowLevelAlloc
NewCallback	src/tests/heap-checker_unittest.cc	/^inline Callback0* NewCallback(void (*function)()) {$/;"	f
NewCallback	src/tests/heap-checker_unittest.cc	/^inline Callback1<P1>* NewCallback(void (*function)(P1), P1 p1) {$/;"	f
NewCallback	src/tests/heap-checker_unittest.cc	/^inline Callback2<P1,P2>* NewCallback(void (*function)(P1,P2), P1 p1, P2 p2) {$/;"	f
NewHeap	src/thread_cache.cc	/^ThreadCache* ThreadCache::NewHeap(pthread_t tid, int heap_type) {$/;"	f	class:tcmalloc::ThreadCache
NewHook	src/gperftools/malloc_hook.h	/^  typedef MallocHook_NewHook NewHook;$/;"	t	class:MallocHook
NewHook	src/heap-checker.cc	/^static void NewHook(const void* ptr, size_t size) {$/;"	f	file:
NewHook	src/heap-profiler.cc	/^void NewHook(const void* ptr, size_t size) {$/;"	f
NewNode	src/pagemap.h	/^  Node* NewNode() {$/;"	f	class:TCMalloc_PageMap3
NewSpan	src/span.cc	/^Span* NewSpan(PageID p, Length len) {$/;"	f	namespace:tcmalloc
Next	src/base/low_level_alloc.cc	/^static AllocList *Next(int i, AllocList *prev, LowLevelAlloc::Arena *arena) {$/;"	f	file:
Next	src/base/sysinfo.cc	/^bool ProcMapsIterator::Next(uint64 *start, uint64 *end, char **flags,$/;"	f	class:ProcMapsIterator
Next	src/pagemap.h	/^  void* Next(Number k) const {$/;"	f	class:TCMalloc_PageMap1
Next	src/pagemap.h	/^  void* Next(Number k) const {$/;"	f	class:TCMalloc_PageMap2
Next	src/pagemap.h	/^  void* Next(Number k) const {$/;"	f	class:TCMalloc_PageMap3
Next	src/tests/tcmalloc_unittest.cc	/^    int32 Next() {$/;"	f	class:testing::TesterThread::ACMRandom
Next	src/thread_cache.h	/^    void* Next() {$/;"	f	class:tcmalloc::ThreadCache::FreeList
NextExt	src/base/sysinfo.cc	/^bool ProcMapsIterator::NextExt(uint64 *start, uint64 *end, char **flags,$/;"	f	class:ProcMapsIterator
NextExtMachHelper	src/base/sysinfo.cc	/^static bool NextExtMachHelper(const mach_header* hdr,$/;"	f	file:
NextRandom	src/sampler.h	/^inline uint64_t Sampler::NextRandom(uint64_t rnd) {$/;"	f	class:tcmalloc::Sampler
NextSize	src/tests/memalign_unittest.cc	/^static int NextSize(int size) {$/;"	f	file:
NextSize	src/tests/realloc_unittest.cc	/^static int NextSize(int size) {$/;"	f	file:
NextStackFrame	src/stacktrace_arm-inl.h	/^static void **NextStackFrame(void **old_sp) {$/;"	f
NextStackFrame	src/stacktrace_powerpc-darwin-inl.h	/^static void **NextStackFrame(void **old_sp) {$/;"	f
NextStackFrame	src/stacktrace_powerpc-inl.h	/^static layout_ppc *NextStackFrame(layout_ppc *current) {$/;"	f
NextStackFrame	src/stacktrace_powerpc-linux-inl.h	/^static layout_ppc *NextStackFrame(layout_ppc *current) {$/;"	f
NextStackFrame	src/stacktrace_x86-inl.h	/^static void **NextStackFrame(void **old_sp, const void *uc) {$/;"	f
NightWatch_active	src/tcmalloc.cc	/^static int NightWatch_active = 0;$/;"	v	file:
NoBarrier_AtomicExchange	src/base/atomicops-internals-arm-generic.h	/^inline Atomic32 NoBarrier_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
NoBarrier_AtomicExchange	src/base/atomicops-internals-arm-generic.h	/^inline Atomic64 NoBarrier_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
NoBarrier_AtomicExchange	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic32 NoBarrier_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
NoBarrier_AtomicExchange	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic64 NoBarrier_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
NoBarrier_AtomicExchange	src/base/atomicops-internals-gcc.h	/^inline Atomic32 NoBarrier_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
NoBarrier_AtomicExchange	src/base/atomicops-internals-gcc.h	/^inline Atomic64 NoBarrier_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
NoBarrier_AtomicExchange	src/base/atomicops-internals-linuxppc.h	/^inline Atomic32 NoBarrier_AtomicExchange(volatile Atomic32 *ptr,$/;"	f	namespace:base::subtle
NoBarrier_AtomicExchange	src/base/atomicops-internals-linuxppc.h	/^inline Atomic64 NoBarrier_AtomicExchange(volatile Atomic64 *ptr,$/;"	f	namespace:base::subtle
NoBarrier_AtomicExchange	src/base/atomicops-internals-macosx.h	/^inline Atomic32 NoBarrier_AtomicExchange(volatile Atomic32 *ptr,$/;"	f	namespace:base::subtle
NoBarrier_AtomicExchange	src/base/atomicops-internals-macosx.h	/^inline Atomic64 NoBarrier_AtomicExchange(volatile Atomic64 *ptr,$/;"	f	namespace:base::subtle
NoBarrier_AtomicExchange	src/base/atomicops-internals-mips.h	/^inline Atomic32 NoBarrier_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
NoBarrier_AtomicExchange	src/base/atomicops-internals-mips.h	/^inline Atomic64 NoBarrier_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
NoBarrier_AtomicExchange	src/base/atomicops-internals-windows.h	/^inline Atomic32 NoBarrier_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
NoBarrier_AtomicExchange	src/base/atomicops-internals-windows.h	/^inline Atomic64 NoBarrier_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
NoBarrier_AtomicExchange	src/base/atomicops-internals-x86.h	/^inline Atomic32 NoBarrier_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
NoBarrier_AtomicExchange	src/base/atomicops-internals-x86.h	/^inline Atomic64 NoBarrier_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
NoBarrier_AtomicExchange	src/base/atomicops.h	/^inline AtomicWord NoBarrier_AtomicExchange(volatile AtomicWord* ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops-internals-arm-generic.h	/^inline Atomic32 NoBarrier_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops-internals-arm-generic.h	/^inline Atomic64 NoBarrier_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic32 NoBarrier_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic64 NoBarrier_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops-internals-gcc.h	/^inline Atomic32 NoBarrier_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops-internals-gcc.h	/^inline Atomic64 NoBarrier_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops-internals-linuxppc.h	/^inline Atomic32 NoBarrier_CompareAndSwap(volatile Atomic32 *ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops-internals-linuxppc.h	/^inline Atomic64 NoBarrier_CompareAndSwap(volatile Atomic64 *ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops-internals-macosx.h	/^inline Atomic32 NoBarrier_CompareAndSwap(volatile Atomic32 *ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops-internals-macosx.h	/^inline Atomic64 NoBarrier_CompareAndSwap(volatile Atomic64 *ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops-internals-mips.h	/^inline Atomic32 NoBarrier_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops-internals-mips.h	/^inline Atomic64 NoBarrier_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops-internals-windows.h	/^inline Atomic32 NoBarrier_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops-internals-windows.h	/^inline Atomic64 NoBarrier_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops-internals-x86.h	/^inline Atomic32 NoBarrier_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops-internals-x86.h	/^inline Atomic64 NoBarrier_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
NoBarrier_CompareAndSwap	src/base/atomicops.h	/^inline AtomicWord NoBarrier_CompareAndSwap(volatile AtomicWord* ptr,$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-arm-generic.h	/^inline Atomic32 NoBarrier_Load(volatile const Atomic32* ptr) {$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-arm-generic.h	/^inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic32 NoBarrier_Load(volatile const Atomic32* ptr) {$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-gcc.h	/^inline Atomic32 NoBarrier_Load(volatile const Atomic32* ptr) {$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-gcc.h	/^inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-linuxppc.h	/^inline Atomic32 NoBarrier_Load(volatile const Atomic32 *ptr) {$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-linuxppc.h	/^inline Atomic64 NoBarrier_Load(volatile const Atomic64 *ptr) {$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-macosx.h	/^inline Atomic32 NoBarrier_Load(volatile const Atomic32* ptr) {$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-macosx.h	/^inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-mips.h	/^inline Atomic32 NoBarrier_Load(volatile const Atomic32* ptr)$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-mips.h	/^inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr)$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-windows.h	/^inline Atomic32 NoBarrier_Load(volatile const Atomic32* ptr) {$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-windows.h	/^inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-windows.h	/^inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptrValue)$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-x86.h	/^inline Atomic32 NoBarrier_Load(volatile const Atomic32* ptr) {$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops-internals-x86.h	/^inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {$/;"	f	namespace:base::subtle
NoBarrier_Load	src/base/atomicops.h	/^inline AtomicWord NoBarrier_Load(volatile const AtomicWord *ptr) {$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-arm-generic.h	/^inline void NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-arm-generic.h	/^inline void NoBarrier_Store(volatile Atomic64* ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-arm-v6plus.h	/^inline void NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-arm-v6plus.h	/^inline void NoBarrier_Store(volatile Atomic64* ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-gcc.h	/^inline void NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-gcc.h	/^inline void NoBarrier_Store(volatile Atomic64* ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-linuxppc.h	/^inline void NoBarrier_Store(volatile Atomic32 *ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-linuxppc.h	/^inline void NoBarrier_Store(volatile Atomic64 *ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-macosx.h	/^inline void NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-macosx.h	/^inline void NoBarrier_Store(volatile Atomic64* ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-mips.h	/^inline void NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value)$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-mips.h	/^inline void NoBarrier_Store(volatile Atomic64* ptr, Atomic64 value)$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-windows.h	/^inline void NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-windows.h	/^inline void NoBarrier_Store(volatile Atomic64* ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-windows.h	/^inline void NoBarrier_Store(volatile Atomic64* ptrValue, Atomic64 value)$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-x86.h	/^inline void NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops-internals-x86.h	/^inline void NoBarrier_Store(volatile Atomic64* ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
NoBarrier_Store	src/base/atomicops.h	/^inline void NoBarrier_Store(volatile AtomicWord *ptr, AtomicWord value) {$/;"	f	namespace:base::subtle
NoGlobalLeaks	src/heap-checker.cc	/^bool HeapLeakChecker::NoGlobalLeaks() {$/;"	f	class:HeapLeakChecker
NoGlobalLeaksMaybeSymbolize	src/heap-checker.cc	/^bool HeapLeakChecker::NoGlobalLeaksMaybeSymbolize($/;"	f	class:HeapLeakChecker
NoLeaks	src/gperftools/heap-checker.h	/^  bool NoLeaks() { return DoNoLeaks(DO_NOT_SYMBOLIZE); }$/;"	f	class:HeapLeakChecker
Node	src/pagemap.h	/^  struct Node {$/;"	s	class:TCMalloc_PageMap3
NonLiveSnapshot	src/heap-profile-table.cc	/^HeapProfileTable::Snapshot* HeapProfileTable::NonLiveSnapshot($/;"	f	class:HeapProfileTable
NotImplementedFatalError	src/base/atomicops-internals-arm-generic.h	/^inline void NotImplementedFatalError(const char *function_name) {$/;"	f	namespace:base::subtle
NotImplementedFatalError	src/base/atomicops-internals-arm-v6plus.h	/^inline void NotImplementedFatalError(const char *function_name) {$/;"	f	namespace:base::subtle
NotImplementedFatalError	src/base/atomicops-internals-windows.h	/^inline void NotImplementedFatalError(const char *function_name) {$/;"	f	namespace:base::subtle
Now	src/base/cycleclock.h	/^  static inline int64 Now() {$/;"	f	struct:CycleClock
NullThread	src/tests/profile-handler_unittest.cc	/^class NullThread : public Thread {$/;"	c	namespace:__anon28	file:
NumCPUs	src/base/sysinfo.cc	/^int NumCPUs(void) {$/;"	f
NumMoveSize	src/common.cc	/^int SizeMap::NumMoveSize(size_t size) {$/;"	f	class:tcmalloc::SizeMap
Number	src/addressmap-inl.h	/^  typedef uintptr_t Number;$/;"	t	class:AddressMap
Number	src/pagemap.h	/^  typedef uintptr_t Number;$/;"	t	class:TCMalloc_PageMap1
Number	src/pagemap.h	/^  typedef uintptr_t Number;$/;"	t	class:TCMalloc_PageMap2
Number	src/pagemap.h	/^  typedef uintptr_t Number;$/;"	t	class:TCMalloc_PageMap3
Number	src/tests/memalign_unittest.cc	/^static uintptr_t Number(void* p) {$/;"	f	file:
OBJCOPY	Makefile	/^OBJCOPY = objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = objdump$/;"	m
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OFFSETOF_MEMBER	src/base/basictypes.h	200;"	d
ON_NORMAL_FREELIST	src/span.h	/^  enum { IN_USE, ON_NORMAL_FREELIST, ON_RETURNED_FREELIST };$/;"	e	enum:tcmalloc::Span::__anon33
ON_RETURNED_FREELIST	src/span.h	/^  enum { IN_USE, ON_NORMAL_FREELIST, ON_RETURNED_FREELIST };$/;"	e	enum:tcmalloc::Span::__anon33
OPEN_MAPPING	config_bak.h	309;"	d
OPEN_MAPPING	src/cacheex.h	9;"	d
OSAtomicAdd32	src/base/atomicops-internals-linuxppc.h	/^static inline Atomic32 OSAtomicAdd32(Atomic32 amount, Atomic32 *value) {$/;"	f	namespace:base::subtle
OSAtomicAdd32Barrier	src/base/atomicops-internals-linuxppc.h	/^static inline Atomic32 OSAtomicAdd32Barrier(Atomic32 amount, Atomic32 *value) {$/;"	f	namespace:base::subtle
OSAtomicAdd64	src/base/atomicops-internals-linuxppc.h	/^static inline Atomic64 OSAtomicAdd64(Atomic64 amount, Atomic64 *value) {$/;"	f	namespace:base::subtle
OSAtomicAdd64	src/base/atomicops-internals-macosx.h	/^inline int64_t OSAtomicAdd64(int64_t theAmount, int64_t *theValue) {$/;"	f	namespace:base::subtle
OSAtomicAdd64Barrier	src/base/atomicops-internals-linuxppc.h	/^static inline Atomic64 OSAtomicAdd64Barrier(Atomic64 amount, Atomic64 *value) {$/;"	f	namespace:base::subtle
OSAtomicAdd64Barrier	src/base/atomicops-internals-macosx.h	/^inline int64_t OSAtomicAdd64Barrier($/;"	f	namespace:base::subtle
OSAtomicCompareAndSwap32	src/base/atomicops-internals-linuxppc.h	/^static inline bool OSAtomicCompareAndSwap32(Atomic32 old_value,$/;"	f	namespace:base::subtle
OSAtomicCompareAndSwap32Acquire	src/base/atomicops-internals-linuxppc.h	/^static inline Atomic32 OSAtomicCompareAndSwap32Acquire(Atomic32 old_value,$/;"	f	namespace:base::subtle
OSAtomicCompareAndSwap32Release	src/base/atomicops-internals-linuxppc.h	/^static inline Atomic32 OSAtomicCompareAndSwap32Release(Atomic32 old_value,$/;"	f	namespace:base::subtle
OSAtomicCompareAndSwap64	src/base/atomicops-internals-linuxppc.h	/^static inline bool OSAtomicCompareAndSwap64(Atomic64 old_value,$/;"	f	namespace:base::subtle
OSAtomicCompareAndSwap64	src/base/atomicops-internals-macosx.h	/^inline int64_t OSAtomicCompareAndSwap64($/;"	f	namespace:base::subtle
OSAtomicCompareAndSwap64Acquire	src/base/atomicops-internals-linuxppc.h	/^static inline Atomic64 OSAtomicCompareAndSwap64Acquire(Atomic64 old_value,$/;"	f	namespace:base::subtle
OSAtomicCompareAndSwap64Barrier	src/base/atomicops-internals-macosx.h	/^inline int64_t OSAtomicCompareAndSwap64Barrier($/;"	f	namespace:base::subtle
OSAtomicCompareAndSwap64Release	src/base/atomicops-internals-linuxppc.h	/^static inline Atomic64 OSAtomicCompareAndSwap64Release(Atomic64 old_value,$/;"	f	namespace:base::subtle
OS_128_BIT_PACKED_SINGLE_PRECISION_FLOATING	src/windows/mini_disassembler_types.h	/^  OS_128_BIT_PACKED_SINGLE_PRECISION_FLOATING = 128\/8,$/;"	e	enum:sidestep::OperandSize
OS_32_BIT_POINTER	src/windows/mini_disassembler_types.h	/^  OS_32_BIT_POINTER = 32\/8,$/;"	e	enum:sidestep::OperandSize
OS_48_BIT_POINTER	src/windows/mini_disassembler_types.h	/^  OS_48_BIT_POINTER = 48\/8,$/;"	e	enum:sidestep::OperandSize
OS_BYTE	src/windows/mini_disassembler_types.h	/^  OS_BYTE = 1,$/;"	e	enum:sidestep::OperandSize
OS_DOUBLE_EXTENDED_PRECISION_FLOATING	src/windows/mini_disassembler_types.h	/^  OS_DOUBLE_EXTENDED_PRECISION_FLOATING = 80\/8,$/;"	e	enum:sidestep::OperandSize
OS_DOUBLE_PRECISION_FLOATING	src/windows/mini_disassembler_types.h	/^  OS_DOUBLE_PRECISION_FLOATING = 64\/8,$/;"	e	enum:sidestep::OperandSize
OS_DOUBLE_QUAD_WORD	src/windows/mini_disassembler_types.h	/^  OS_DOUBLE_QUAD_WORD = 16,$/;"	e	enum:sidestep::OperandSize
OS_DOUBLE_WORD	src/windows/mini_disassembler_types.h	/^  OS_DOUBLE_WORD = 4,$/;"	e	enum:sidestep::OperandSize
OS_PSEUDO_DESCRIPTOR	src/windows/mini_disassembler_types.h	/^  OS_PSEUDO_DESCRIPTOR = 6$/;"	e	enum:sidestep::OperandSize
OS_QUAD_WORD	src/windows/mini_disassembler_types.h	/^  OS_QUAD_WORD = 8,$/;"	e	enum:sidestep::OperandSize
OS_SINGLE_PRECISION_FLOATING	src/windows/mini_disassembler_types.h	/^  OS_SINGLE_PRECISION_FLOATING = 32\/8,$/;"	e	enum:sidestep::OperandSize
OS_WORD	src/windows/mini_disassembler_types.h	/^  OS_WORD = 2,$/;"	e	enum:sidestep::OperandSize
OS_ZERO	src/windows/mini_disassembler_types.h	/^  OS_ZERO = 0,$/;"	e	enum:sidestep::OperandSize
OTOOL	Makefile	/^OTOOL = $/;"	m
OTOOL64	Makefile	/^OTOOL64 = $/;"	m
OT_A	src/windows/mini_disassembler_types.h	/^  OT_A = 0x01000000,$/;"	e	enum:sidestep::OperandType
OT_ADDRESS_MODE_M	src/windows/mini_disassembler_types.h	/^  OT_ADDRESS_MODE_M = 0x80000000$/;"	e	enum:sidestep::OperandType
OT_B	src/windows/mini_disassembler_types.h	/^  OT_B = 0x02000000,$/;"	e	enum:sidestep::OperandType
OT_C	src/windows/mini_disassembler_types.h	/^  OT_C = 0x03000000,$/;"	e	enum:sidestep::OperandType
OT_D	src/windows/mini_disassembler_types.h	/^  OT_D = 0x04000000,$/;"	e	enum:sidestep::OperandType
OT_DQ	src/windows/mini_disassembler_types.h	/^  OT_DQ = 0x05000000,$/;"	e	enum:sidestep::OperandType
OT_MASK	src/windows/mini_disassembler_types.h	/^  OT_MASK = 0xFF000000,$/;"	e	enum:sidestep::OperandType
OT_P	src/windows/mini_disassembler_types.h	/^  OT_P = 0x06000000,$/;"	e	enum:sidestep::OperandType
OT_PD	src/windows/mini_disassembler_types.h	/^  OT_PD = 0x10000000,  \/\/ double-precision floating point$/;"	e	enum:sidestep::OperandType
OT_PI	src/windows/mini_disassembler_types.h	/^  OT_PI = 0x07000000,$/;"	e	enum:sidestep::OperandType
OT_PS	src/windows/mini_disassembler_types.h	/^  OT_PS = 0x08000000,  \/\/ actually unsupported for (we don't know its size)$/;"	e	enum:sidestep::OperandType
OT_Q	src/windows/mini_disassembler_types.h	/^  OT_Q = 0x09000000,$/;"	e	enum:sidestep::OperandType
OT_S	src/windows/mini_disassembler_types.h	/^  OT_S = 0x0A000000,$/;"	e	enum:sidestep::OperandType
OT_SD	src/windows/mini_disassembler_types.h	/^  OT_SD = 0x0F000000,  \/\/ scalar double-precision floating-point value$/;"	e	enum:sidestep::OperandType
OT_SI	src/windows/mini_disassembler_types.h	/^  OT_SI = 0x0C000000,$/;"	e	enum:sidestep::OperandType
OT_SS	src/windows/mini_disassembler_types.h	/^  OT_SS = 0x0B000000,$/;"	e	enum:sidestep::OperandType
OT_V	src/windows/mini_disassembler_types.h	/^  OT_V = 0x0D000000,$/;"	e	enum:sidestep::OperandType
OT_W	src/windows/mini_disassembler_types.h	/^  OT_W = 0x0E000000,$/;"	e	enum:sidestep::OperandType
O_DIRECTORY	src/base/linux_syscall_support.h	499;"	d
O_DIRECTORY	src/base/linux_syscall_support.h	501;"	d
O_RDONLY	src/windows/port.h	360;"	d
ObjMakerFunc	src/tests/heap-checker_unittest.cc	/^typedef void* (*ObjMakerFunc)();$/;"	t	file:
ObjMakerRegistrar	src/tests/heap-checker_unittest.cc	/^  ObjMakerRegistrar(ObjMakerFunc obj_maker) { obj_makers.push_back(obj_maker); }$/;"	f	struct:ObjMakerRegistrar
ObjMakerRegistrar	src/tests/heap-checker_unittest.cc	/^struct ObjMakerRegistrar {$/;"	s	file:
Object	src/addressmap-inl.h	/^  struct Object {$/;"	s	class:AddressMap
Object	src/tests/tcmalloc_unittest.cc	/^  struct Object {$/;"	s	class:testing::TesterThread	file:
ObjectPlacement	src/heap-checker.cc	/^enum ObjectPlacement {$/;"	g	file:
ObjectsLeaked	src/heap-checker.cc	/^ssize_t HeapLeakChecker::ObjectsLeaked() const {$/;"	f	class:HeapLeakChecker
OldSampler	src/tests/sampler_test.cc	/^class OldSampler {$/;"	c	file:
OnNoMemory	src/tests/tcmalloc_unittest.cc	/^static void OnNoMemory() {$/;"	f	namespace:testing
OneDeathTest	debugallocation_test.sh	/^OneDeathTest() {$/;"	f
OneDeathTest	src/tests/debugallocation_test.sh	/^OneDeathTest() {$/;"	f
Opcode	src/windows/mini_disassembler_types.h	/^struct Opcode {$/;"	s	namespace:sidestep
OpcodeTable	src/windows/mini_disassembler_types.h	/^struct OpcodeTable {$/;"	s	namespace:sidestep
OperandSize	src/windows/mini_disassembler_types.h	/^enum OperandSize {$/;"	g	namespace:sidestep
OperandType	src/windows/mini_disassembler_types.h	/^enum OperandType {$/;"	g	namespace:sidestep
Options	src/pprof	/^Options:$/;"	l
Options	src/profiledata.cc	/^ProfileData::Options::Options()$/;"	f	class:ProfileData::Options
Options	src/profiledata.h	/^  class Options {$/;"	c	class:ProfileData
OrigFn	src/third_party/valgrind.h	/^   OrigFn;$/;"	t	typeref:struct:__anon17
OrigFn	src/third_party/valgrind.h	/^   OrigFn;$/;"	t	typeref:struct:__anon18
OrigFn	src/third_party/valgrind.h	/^   OrigFn;$/;"	t	typeref:struct:__anon19
OrigFn	src/third_party/valgrind.h	/^   OrigFn;$/;"	t	typeref:struct:__anon20
OrigFn	src/third_party/valgrind.h	/^   OrigFn;$/;"	t	typeref:struct:__anon21
OrigFn	src/third_party/valgrind.h	/^   OrigFn;$/;"	t	typeref:struct:__anon22
OutputSequence	src/tests/sampler_test.cc	/^void OutputSequence(int sequence_length) {$/;"	f
OverheadBytes	src/central_freelist.cc	/^size_t CentralFreeList::OverheadBytes() {$/;"	f	class:tcmalloc::CentralFreeList
Overlaps	src/memory_region_map.h	/^    bool Overlaps(const Region& x) const {$/;"	f	struct:MemoryRegionMap::Region
Overview	doc/tcmalloc.html	/^<h2><A NAME="Overview">Overview<\/A><\/h2>$/;"	a
Ownership	src/gperftools/malloc_extension.h	/^  enum Ownership {$/;"	g	class:MallocExtension
PACKAGE	Makefile	/^PACKAGE = gperftools$/;"	m
PACKAGE	config_bak.h	222;"	d
PACKAGE	src/config.h	222;"	d
PACKAGE	src/windows/config.h	220;"	d
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = google-perftools@googlegroups.com$/;"	m
PACKAGE_BUGREPORT	config_bak.h	225;"	d
PACKAGE_BUGREPORT	src/config.h	225;"	d
PACKAGE_BUGREPORT	src/windows/config.h	223;"	d
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = gperftools$/;"	m
PACKAGE_NAME	config_bak.h	228;"	d
PACKAGE_NAME	src/config.h	228;"	d
PACKAGE_NAME	src/windows/config.h	226;"	d
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = gperftools 2.4$/;"	m
PACKAGE_STRING	config_bak.h	231;"	d
PACKAGE_STRING	src/config.h	231;"	d
PACKAGE_STRING	src/windows/config.h	229;"	d
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = gperftools$/;"	m
PACKAGE_TARNAME	config_bak.h	234;"	d
PACKAGE_TARNAME	src/config.h	234;"	d
PACKAGE_TARNAME	src/windows/config.h	232;"	d
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	config_bak.h	237;"	d
PACKAGE_URL	src/config.h	237;"	d
PACKAGE_URL	src/windows/config.h	235;"	d
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 2.4$/;"	m
PACKAGE_VERSION	config_bak.h	240;"	d
PACKAGE_VERSION	src/config.h	240;"	d
PACKAGE_VERSION	src/windows/config.h	238;"	d
PAGE_MASK	src/cacheex.h	27;"	d
PAGE_SHIFT	src/cacheex.h	26;"	d
PAGE_SIZE	src/cacheex.h	25;"	d
PAPI_LIBS	Makefile	/^PAPI_LIBS = ${LIBPAPI_DIR}\/libpapi.so$/;"	m
PASS	src/tests/tcmalloc_unittest.cc	/^  enum Type { ALLOC, FREE, UPDATE, PASS };$/;"	e	enum:testing::TesterThread::Type	file:
PATH_MAX	src/heap-profiler.cc	79;"	d	file:
PATH_MAX	src/heap-profiler.cc	81;"	d	file:
PATH_MAX	src/windows/port.h	354;"	d
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PC	src/malloc_extension.cc	/^void* PC(void** entry, int i) {$/;"	f	namespace:__anon52
PCHECK	src/base/logging.h	114;"	d
PC_FROM_UCONTEXT	config_bak.h	243;"	d
PC_FROM_UCONTEXT	src/config.h	243;"	d
PC_FROM_UCONTEXT	src/windows/config.h	241;"	d
PERFTOOLS_DLL_DECL	config_bak.h	250;"	d
PERFTOOLS_DLL_DECL	src/config.h	250;"	d
PERFTOOLS_DLL_DECL	src/config_for_unittests.h	60;"	d
PERFTOOLS_DLL_DECL	src/config_for_unittests.h	62;"	d
PERFTOOLS_DLL_DECL	src/config_for_unittests.h	64;"	d
PERFTOOLS_DLL_DECL	src/gperftools/heap-checker.h	69;"	d
PERFTOOLS_DLL_DECL	src/gperftools/heap-checker.h	71;"	d
PERFTOOLS_DLL_DECL	src/gperftools/heap-profiler.h	59;"	d
PERFTOOLS_DLL_DECL	src/gperftools/heap-profiler.h	61;"	d
PERFTOOLS_DLL_DECL	src/gperftools/malloc_extension.h	59;"	d
PERFTOOLS_DLL_DECL	src/gperftools/malloc_extension.h	61;"	d
PERFTOOLS_DLL_DECL	src/gperftools/malloc_extension_c.h	48;"	d
PERFTOOLS_DLL_DECL	src/gperftools/malloc_extension_c.h	50;"	d
PERFTOOLS_DLL_DECL	src/gperftools/malloc_hook.h	79;"	d
PERFTOOLS_DLL_DECL	src/gperftools/malloc_hook.h	81;"	d
PERFTOOLS_DLL_DECL	src/gperftools/malloc_hook_c.h	46;"	d
PERFTOOLS_DLL_DECL	src/gperftools/malloc_hook_c.h	48;"	d
PERFTOOLS_DLL_DECL	src/gperftools/profiler.h	68;"	d
PERFTOOLS_DLL_DECL	src/gperftools/profiler.h	70;"	d
PERFTOOLS_DLL_DECL	src/gperftools/stacktrace.h	43;"	d
PERFTOOLS_DLL_DECL	src/gperftools/stacktrace.h	45;"	d
PERFTOOLS_DLL_DECL	src/gperftools/tcmalloc.h	72;"	d
PERFTOOLS_DLL_DECL	src/gperftools/tcmalloc.h	74;"	d
PERFTOOLS_DLL_DECL	src/windows/config.h	250;"	d
PERFTOOLS_DLL_DECL	src/windows/gperftools/tcmalloc.h	62;"	d
PERFTOOLS_DLL_DECL	src/windows/gperftools/tcmalloc.h	64;"	d
PERFTOOLS_DLL_DECL_FOR_UNITTESTS	src/windows/config.h	251;"	d
PERFTOOLS_IS_A_DLL	src/windows/config.h	249;"	d
PERFTOOLS_NO_ALIGNED_MALLOC	src/windows/mingw.h	46;"	d
PLATFORM_WINDOWS	src/base/sysinfo.cc	33;"	d	file:
PLAT_amd64_linux	src/third_party/valgrind.h	3918;"	d
PLAT_amd64_linux	src/third_party/valgrind.h	89;"	d
PLAT_amd64_linux	src/third_party/valgrind.h	98;"	d
PLAT_ppc32_aix5	src/third_party/valgrind.h	106;"	d
PLAT_ppc32_aix5	src/third_party/valgrind.h	3921;"	d
PLAT_ppc32_aix5	src/third_party/valgrind.h	92;"	d
PLAT_ppc32_linux	src/third_party/valgrind.h	100;"	d
PLAT_ppc32_linux	src/third_party/valgrind.h	3919;"	d
PLAT_ppc32_linux	src/third_party/valgrind.h	90;"	d
PLAT_ppc64_aix5	src/third_party/valgrind.h	104;"	d
PLAT_ppc64_aix5	src/third_party/valgrind.h	3922;"	d
PLAT_ppc64_aix5	src/third_party/valgrind.h	93;"	d
PLAT_ppc64_linux	src/third_party/valgrind.h	102;"	d
PLAT_ppc64_linux	src/third_party/valgrind.h	3920;"	d
PLAT_ppc64_linux	src/third_party/valgrind.h	91;"	d
PLAT_x86_linux	src/third_party/valgrind.h	3917;"	d
PLAT_x86_linux	src/third_party/valgrind.h	88;"	d
PLAT_x86_linux	src/third_party/valgrind.h	96;"	d
PMODULEENTRY32	src/base/sysinfo.cc	75;"	d	file:
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PRINTABLE_PTHREAD	src/base/basictypes.h	115;"	d
PRINTABLE_PTHREAD	src/base/basictypes.h	117;"	d
PRId64	src/base/basictypes.h	99;"	d
PRId64	src/windows/port.h	340;"	d
PRIdS	config_bak.h	253;"	d
PRIdS	src/config.h	253;"	d
PRIdS	src/windows/config.h	255;"	d
PRIu64	src/base/basictypes.h	105;"	d
PRIu64	src/windows/port.h	342;"	d
PRIuPTR	src/windows/port.h	344;"	d
PRIuPTR	src/windows/port.h	347;"	d
PRIuS	config_bak.h	256;"	d
PRIuS	src/config.h	256;"	d
PRIuS	src/windows/config.h	258;"	d
PRIx64	src/base/basictypes.h	93;"	d
PRIx64	src/windows/port.h	338;"	d
PRIxPTR	src/base/basictypes.h	108;"	d
PRIxPTR	src/windows/port.h	345;"	d
PRIxPTR	src/windows/port.h	348;"	d
PRIxS	config_bak.h	259;"	d
PRIxS	src/config.h	259;"	d
PRIxS	src/windows/config.h	261;"	d
PROC_MAPS_USED	src/gperftools/heap-checker.h	/^    PROC_MAPS_USED,$/;"	e	enum:HeapLeakChecker::ProcMapsResult
PROFILER_SO_VERSION	Makefile	/^PROFILER_SO_VERSION = 4:5:4$/;"	m
PROFILER_UNITTEST_INCLUDES	Makefile	/^PROFILER_UNITTEST_INCLUDES = src\/config_for_unittests.h \\$/;"	m
PROFILER_UNITTEST_SRCS	Makefile	/^PROFILER_UNITTEST_SRCS = src\/tests\/profiler_unittest.cc \\$/;"	m
PROFILE_TIMESTAMP_SHIFT	src/base/spinlock.cc	/^enum { PROFILE_TIMESTAMP_SHIFT = 7 };$/;"	e	enum:__anon36	file:
PROGRAMS	Makefile	/^PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)$/;"	m
PROT_READ	src/windows/port.h	271;"	d
PROT_WRITE	src/windows/port.h	272;"	d
PR_GET_DUMPABLE	src/base/linux_syscall_support.h	505;"	d
PR_SET_DUMPABLE	src/base/linux_syscall_support.h	508;"	d
PSAPI_VERSION	src/windows/patch_functions.cc	82;"	d	file:
PTHREADS_CRASHES_IF_RUN_TOO_EARLY	config_bak.h	264;"	d
PTHREADS_CRASHES_IF_RUN_TOO_EARLY	src/config.h	264;"	d
PTHREADS_CRASHES_IF_RUN_TOO_EARLY	src/windows/config.h	266;"	d
PTHREAD_CC	Makefile	/^PTHREAD_CC = gcc$/;"	m
PTHREAD_CFLAGS	Makefile	/^PTHREAD_CFLAGS = -pthread$/;"	m
PTHREAD_CREATE_JOINABLE	src/windows/config.h	271;"	d
PTHREAD_LIBS	Makefile	/^PTHREAD_LIBS =  -lpthread ${CACHEEX_LIBS}$/;"	m
PTHREAD_ONCE_INIT	src/windows/port.h	/^enum { PTHREAD_ONCE_INIT = 0 };   \/* important that this be 0! for SpinLock *\/$/;"	e	enum:__anon7
PT_GUARDED_BY	src/base/thread_annotations.h	74;"	d
PT_GUARDED_VAR	src/base/thread_annotations.h	76;"	d
PackedCache	src/packed-cache-inl.h	/^  explicit PackedCache(V initial_value) {$/;"	f	class:PackedCache
PackedCache	src/packed-cache-inl.h	/^class PackedCache {$/;"	c
PackedCacheTest_basic	src/tests/packed-cache_test.cc	/^void PackedCacheTest_basic() {$/;"	f
PageHeap	src/page_heap.cc	/^PageHeap::PageHeap() :$/;"	f	class:tcmalloc::PageHeap
PageHeap	src/page_heap.h	/^class PERFTOOLS_DLL_DECL PageHeap {$/;"	c	namespace:tcmalloc
PageHeapAllocator	src/page_heap_allocator.h	/^class PageHeapAllocator {$/;"	c	namespace:tcmalloc
PageID	src/common.h	/^typedef uintptr_t PageID;$/;"	t
PageMap	src/page_heap.h	/^  typedef MapSelector<kAddressBits>::Type PageMap;$/;"	t	class:tcmalloc::PageHeap
PageMapCache	src/page_heap.h	/^  typedef MapSelector<kAddressBits>::CacheType PageMapCache;$/;"	t	class:tcmalloc::PageHeap
PagesToMiB	src/tcmalloc.cc	/^static double PagesToMiB(uint64_t pages) {$/;"	f	file:
ParseInteractiveArgs	src/pprof	/^sub ParseInteractiveArgs {$/;"	s
ParseLibraries	src/pprof	/^sub ParseLibraries {$/;"	s
ParseProcMapsLine	src/base/sysinfo.cc	/^static bool ParseProcMapsLine(char *text, uint64 *start, uint64 *end,$/;"	f	file:
ParseProfileURL	src/pprof	/^sub ParseProfileURL {$/;"	s
ParseTextSectionHeader	src/pprof	/^sub ParseTextSectionHeader {$/;"	s
ParseTextSectionHeaderFromObjdump	src/pprof	/^sub ParseTextSectionHeaderFromObjdump {$/;"	s
ParseTextSectionHeaderFromOtool	src/pprof	/^sub ParseTextSectionHeaderFromOtool {$/;"	s
Pass	src/tests/heap-checker_unittest.cc	/^static int Pass() {$/;"	f	file:
PassObject	src/tests/tcmalloc_unittest.cc	/^  void PassObject() {$/;"	f	class:testing::TesterThread
Patch	src/windows/patch_functions.cc	/^bool LibcInfoWithPatchFunctions<T>::Patch(const LibcInfo& me_info) {$/;"	f	class:__anon9::LibcInfoWithPatchFunctions
Patch	src/windows/patch_functions.cc	/^void WindowsInfo::Patch() {$/;"	f	class:__anon9::WindowsInfo
Patch	src/windows/preamble_patcher.h	/^  static SideStepError Patch(LPCTSTR module_name,$/;"	f	class:sidestep::PreamblePatcher
Patch	src/windows/preamble_patcher.h	/^  static SideStepError Patch(T target_function,$/;"	f	class:sidestep::PreamblePatcher
PatchAllModules	src/windows/patch_functions.cc	/^bool PatchAllModules() {$/;"	f	namespace:__anon9
PatchMainExecutableLocked	src/windows/patch_functions.cc	/^void PatchMainExecutableLocked() {$/;"	f	namespace:__anon9
PatchMovWithDisplacement	src/windows/preamble_patcher.cc	/^SideStepError PreamblePatcher::PatchMovWithDisplacement($/;"	f	class:sidestep::PreamblePatcher
PatchNearJumpOrCall	src/windows/preamble_patcher.cc	/^SideStepError PreamblePatcher::PatchNearJumpOrCall($/;"	f	class:sidestep::PreamblePatcher
PatchOneModuleLocked	src/windows/patch_functions.cc	/^void PatchOneModuleLocked(const LibcInfo& me_info) {$/;"	f	namespace:__anon9
PatchShortConditionalJump	src/windows/preamble_patcher.cc	/^SideStepError PreamblePatcher::PatchShortConditionalJump($/;"	f	class:sidestep::PreamblePatcher
PatchShortJump	src/windows/preamble_patcher.cc	/^SideStepError PreamblePatcher::PatchShortJump($/;"	f	class:sidestep::PreamblePatcher
PatchThenUnpatch	src/windows/preamble_patcher_test.cc	/^bool PatchThenUnpatch() {$/;"	f	namespace:sidestep
PatchWindowsFunctions	src/windows/patch_functions.cc	/^void PatchWindowsFunctions() {$/;"	f
Pause	src/tests/heap-checker_unittest.cc	/^static void Pause() {$/;"	f	file:
Percent	src/pprof	/^sub Percent {$/;"	s
Perftools_FreeLibrary	src/windows/patch_functions.cc	/^BOOL WINAPI WindowsInfo::Perftools_FreeLibrary(HMODULE hLibModule) {$/;"	f	class:WindowsInfo
Perftools_HeapAlloc	src/windows/patch_functions.cc	/^LPVOID WINAPI WindowsInfo::Perftools_HeapAlloc(HANDLE hHeap, DWORD dwFlags,$/;"	f	class:WindowsInfo
Perftools_HeapFree	src/windows/patch_functions.cc	/^BOOL WINAPI WindowsInfo::Perftools_HeapFree(HANDLE hHeap, DWORD dwFlags,$/;"	f	class:WindowsInfo
Perftools_LoadLibraryExW	src/windows/patch_functions.cc	/^HMODULE WINAPI WindowsInfo::Perftools_LoadLibraryExW(LPCWSTR lpFileName,$/;"	f	class:WindowsInfo
Perftools_MapViewOfFileEx	src/windows/patch_functions.cc	/^LPVOID WINAPI WindowsInfo::Perftools_MapViewOfFileEx($/;"	f	class:WindowsInfo
Perftools_UnmapViewOfFile	src/windows/patch_functions.cc	/^BOOL WINAPI WindowsInfo::Perftools_UnmapViewOfFile(LPCVOID lpBaseAddress) {$/;"	f	class:WindowsInfo
Perftools_VirtualAllocEx	src/windows/patch_functions.cc	/^LPVOID WINAPI WindowsInfo::Perftools_VirtualAllocEx(HANDLE process,$/;"	f	class:WindowsInfo
Perftools_VirtualFreeEx	src/windows/patch_functions.cc	/^BOOL WINAPI WindowsInfo::Perftools_VirtualFreeEx(HANDLE process, LPVOID address,$/;"	f	class:WindowsInfo
Perftools_delete	src/windows/patch_functions.cc	/^void LibcInfoWithPatchFunctions<T>::Perftools_delete(void *p) {$/;"	f	class:LibcInfoWithPatchFunctions
Perftools_deletearray	src/windows/patch_functions.cc	/^void LibcInfoWithPatchFunctions<T>::Perftools_deletearray(void *p) {$/;"	f	class:LibcInfoWithPatchFunctions
Perftools_new	src/windows/patch_functions.cc	/^void* LibcInfoWithPatchFunctions<T>::Perftools_new(size_t size) {$/;"	f	class:LibcInfoWithPatchFunctions
Perftools_newarray	src/windows/patch_functions.cc	/^void* LibcInfoWithPatchFunctions<T>::Perftools_newarray(size_t size) {$/;"	f	class:LibcInfoWithPatchFunctions
Permute	src/tests/pagemap_unittest.cc	/^static void Permute(vector<intptr_t>* elements) {$/;"	f	file:
PickNextSample	src/tests/sampler_test.cc	/^void OldSampler::PickNextSample(size_t k) {$/;"	f	class:OldSampler
PickNextSamplingPoint	src/sampler.cc	/^size_t Sampler::PickNextSamplingPoint() {$/;"	f	class:tcmalloc::Sampler
PickType	src/tests/tcmalloc_unittest.cc	/^int TestHarness::PickType() {$/;"	f	class:testing::TestHarness
Pop	src/debugallocation.cc	/^  QueueEntry Pop() {$/;"	f	class:FreeQueue
Pop	src/thread_cache.h	/^    void* Pop() {$/;"	f	class:tcmalloc::ThreadCache::FreeList
PopRange	src/thread_cache.h	/^    void PopRange(int N, void **start, void **end) {$/;"	f	class:tcmalloc::ThreadCache::FreeList
Populate	src/central_freelist.cc	/^void CentralFreeList::Populate() {$/;"	f	class:tcmalloc::CentralFreeList
PopulateFastLog2Table	src/sampler.cc	/^void Sampler::PopulateFastLog2Table() {$/;"	f	class:tcmalloc::Sampler
PopulateWindowsFn	src/windows/patch_functions.cc	/^bool LibcInfo::PopulateWindowsFn(const ModuleEntryCopy& module_entry) {$/;"	f	class:__anon9::LibcInfo
PosixMemalign	src/tests/tcmalloc_unittest.cc	/^static inline int PosixMemalign(void** ptr, size_t align, size_t size) {$/;"	f	file:
PreMmapHook	src/gperftools/malloc_hook.h	/^  typedef MallocHook_PreMmapHook PreMmapHook;$/;"	t	class:MallocHook
PreSbrkHook	src/gperftools/malloc_hook.h	/^  typedef MallocHook_PreSbrkHook PreSbrkHook;$/;"	t	class:MallocHook
PreallocateMoreMemory	src/pagemap.h	/^  void PreallocateMoreMemory() {$/;"	f	class:TCMalloc_PageMap2
PreallocateMoreMemory	src/pagemap.h	/^  void PreallocateMoreMemory() {$/;"	f	class:TCMalloc_PageMap3
PreallocateMoreMemory	src/pagemap.h	/^  void PreallocateMoreMemory() {}$/;"	f	class:TCMalloc_PageMap1
PreamblePage	src/windows/preamble_patcher.h	/^  struct PreamblePage {$/;"	s	class:sidestep::PreamblePatcher
PreamblePatcher	src/windows/preamble_patcher.h	/^class PERFTOOLS_DLL_DECL PreamblePatcher {$/;"	c	namespace:sidestep
PrependToFreeList	src/page_heap.cc	/^void PageHeap::PrependToFreeList(Span* span) {$/;"	f	class:tcmalloc::PageHeap
PreventHeapReclaiming	src/tests/heap-checker_unittest.cc	/^void PreventHeapReclaiming(size_t size) {$/;"	f
PrintAvailability	src/windows/nm-pdb.c	/^static void PrintAvailability(BOOL var, const char *description) {$/;"	f	file:
PrintCallgrind	src/pprof	/^sub PrintCallgrind {$/;"	s
PrintCountAndSize	src/malloc_extension.cc	/^void PrintCountAndSize(MallocExtensionWriter* writer,$/;"	f	namespace:__anon52
PrintDisassembledFunction	src/pprof	/^sub PrintDisassembledFunction {$/;"	s
PrintDisassembly	src/pprof	/^sub PrintDisassembly {$/;"	s
PrintDot	src/pprof	/^sub PrintDot {$/;"	s
PrintError	src/symbolize.cc	/^static void PrintError(const char* reason) {$/;"	f	file:
PrintHeader	src/malloc_extension.cc	/^void PrintHeader(MallocExtensionWriter* writer,$/;"	f	namespace:__anon52
PrintListing	src/pprof	/^sub PrintListing {$/;"	s
PrintProfileData	src/pprof	/^sub PrintProfileData {$/;"	s
PrintSource	src/pprof	/^sub PrintSource {$/;"	s
PrintStackEntry	src/malloc_extension.cc	/^void PrintStackEntry(MallocExtensionWriter* writer, void** entry) {$/;"	f	namespace:__anon52
PrintStacksForText	src/pprof	/^sub PrintStacksForText {$/;"	s
PrintStats	src/tcmalloc.cc	/^static void PrintStats(int level) {$/;"	f	file:
PrintSymbolizedProfile	src/pprof	/^sub PrintSymbolizedProfile {$/;"	s
PrintSymbols	src/pprof	/^sub PrintSymbols {$/;"	s
PrintText	src/pprof	/^sub PrintText {$/;"	s
Printf	src/raw_printer.cc	/^void RawPrinter::Printf(const char* format, ...) {$/;"	f	class:base::RawPrinter
ProcMapsIterator	src/base/sysinfo.cc	/^ProcMapsIterator::ProcMapsIterator(pid_t pid) {$/;"	f	class:ProcMapsIterator
ProcMapsIterator	src/base/sysinfo.cc	/^ProcMapsIterator::ProcMapsIterator(pid_t pid, Buffer *buffer) {$/;"	f	class:ProcMapsIterator
ProcMapsIterator	src/base/sysinfo.cc	/^ProcMapsIterator::ProcMapsIterator(pid_t pid, Buffer *buffer,$/;"	f	class:ProcMapsIterator
ProcMapsIterator	src/base/sysinfo.h	/^class ProcMapsIterator {$/;"	c
ProcMapsResult	src/gperftools/heap-checker.h	/^  enum ProcMapsResult {$/;"	g	class:HeapLeakChecker
ProcMapsTask	src/gperftools/heap-checker.h	/^  enum ProcMapsTask {$/;"	g	class:HeapLeakChecker
ProcessFreeQueue	src/debugallocation.cc	/^  static void ProcessFreeQueue(MallocBlock* b, size_t size,$/;"	f	class:MallocBlock
ProcessModrm	src/windows/mini_disassembler.cc	/^bool MiniDisassembler::ProcessModrm(unsigned char* start_byte,$/;"	f	class:sidestep::MiniDisassembler
ProcessOpcode	src/windows/mini_disassembler.cc	/^InstructionType MiniDisassembler::ProcessOpcode(unsigned char* start_byte,$/;"	f	class:sidestep::MiniDisassembler
ProcessOperand	src/windows/mini_disassembler.cc	/^bool MiniDisassembler::ProcessOperand(int flag_operand) {$/;"	f	class:sidestep::MiniDisassembler
ProcessPrefixes	src/windows/mini_disassembler.cc	/^InstructionType MiniDisassembler::ProcessPrefixes(unsigned char* start_byte,$/;"	f	class:sidestep::MiniDisassembler
ProcessProfile	src/pprof	/^sub ProcessProfile {$/;"	s
ProcessSib	src/windows/mini_disassembler.cc	/^bool MiniDisassembler::ProcessSib(unsigned char* start_byte,$/;"	f	class:sidestep::MiniDisassembler
ProfileData	src/profiledata.cc	/^ProfileData::ProfileData()$/;"	f	class:ProfileData
ProfileData	src/profiledata.h	/^class ProfileData {$/;"	c
ProfileDataChecker	src/tests/profiledata_unittest.cc	/^  ProfileDataChecker() {$/;"	f	class:__anon30::ProfileDataChecker
ProfileDataChecker	src/tests/profiledata_unittest.cc	/^class ProfileDataChecker {$/;"	c	namespace:__anon30	file:
ProfileDataSlot	src/tests/profiledata_unittest.cc	/^typedef uintptr_t ProfileDataSlot;$/;"	t	namespace:__anon30	file:
ProfileDataTest	src/tests/profiledata_unittest.cc	/^class ProfileDataTest {$/;"	c	namespace:__anon30	file:
ProfileHandler	src/profile-handler.cc	/^ProfileHandler::ProfileHandler()$/;"	f	class:ProfileHandler
ProfileHandler	src/profile-handler.cc	/^class ProfileHandler {$/;"	c	file:
ProfileHandlerCallback	src/profile-handler.h	/^typedef void (*ProfileHandlerCallback)(int sig, siginfo_t* sig_info,$/;"	t
ProfileHandlerGetState	src/profile-handler.cc	/^extern "C" void ProfileHandlerGetState(ProfileHandlerState* state) {$/;"	f
ProfileHandlerRegisterCallback	src/profile-handler.cc	/^extern "C" ProfileHandlerToken* ProfileHandlerRegisterCallback($/;"	f
ProfileHandlerRegisterThread	src/profile-handler.cc	/^extern "C" void ProfileHandlerRegisterThread() {$/;"	f
ProfileHandlerReset	src/profile-handler.cc	/^extern "C" void ProfileHandlerReset() {$/;"	f
ProfileHandlerState	src/profile-handler.h	/^struct ProfileHandlerState {$/;"	s
ProfileHandlerTest	src/tests/profile-handler_unittest.cc	/^class ProfileHandlerTest {$/;"	c	namespace:__anon28	file:
ProfileHandlerToken	src/profile-handler.cc	/^  ProfileHandlerToken(ProfileHandlerCallback cb, void* cb_arg)$/;"	f	struct:ProfileHandlerToken
ProfileHandlerToken	src/profile-handler.cc	/^struct ProfileHandlerToken {$/;"	s	file:
ProfileHandlerUnregisterCallback	src/profile-handler.cc	/^extern "C" void ProfileHandlerUnregisterCallback(ProfileHandlerToken* token) {$/;"	f
ProfilerDisable	src/profiler.cc	/^extern "C" PERFTOOLS_DLL_DECL void ProfilerDisable() { }$/;"	f
ProfilerEnable	src/profiler.cc	/^extern "C" PERFTOOLS_DLL_DECL void ProfilerEnable() { }$/;"	f
ProfilerFlush	src/profiler.cc	/^extern "C" PERFTOOLS_DLL_DECL void ProfilerFlush() {$/;"	f
ProfilerFlush	src/profiler.cc	/^extern "C" void ProfilerFlush() { }$/;"	f
ProfilerFree	src/heap-profiler.cc	/^static void ProfilerFree(void* p) {$/;"	f	file:
ProfilerGetCurrentState	src/profiler.cc	/^extern "C" PERFTOOLS_DLL_DECL void ProfilerGetCurrentState($/;"	f
ProfilerGetCurrentState	src/profiler.cc	/^extern "C" void ProfilerGetCurrentState(ProfilerState* state) {$/;"	f
ProfilerMalloc	src/heap-profiler.cc	/^static void* ProfilerMalloc(size_t bytes) {$/;"	f	file:
ProfilerOptions	src/gperftools/profiler.h	/^struct ProfilerOptions {$/;"	s
ProfilerRegisterThread	src/profiler.cc	/^extern "C" PERFTOOLS_DLL_DECL void ProfilerRegisterThread() {$/;"	f
ProfilerRegisterThread	src/profiler.cc	/^extern "C" void ProfilerRegisterThread() { }$/;"	f
ProfilerStart	src/profiler.cc	/^extern "C" PERFTOOLS_DLL_DECL int ProfilerStart(const char* fname) {$/;"	f
ProfilerStart	src/profiler.cc	/^extern "C" int ProfilerStart(const char* fname) { return 0; }$/;"	f
ProfilerStartWithOptions	src/profiler.cc	/^extern "C" PERFTOOLS_DLL_DECL int ProfilerStartWithOptions($/;"	f
ProfilerStartWithOptions	src/profiler.cc	/^extern "C" int ProfilerStartWithOptions(const char *fname,$/;"	f
ProfilerState	src/gperftools/profiler.h	/^struct ProfilerState {$/;"	s
ProfilerStop	src/profiler.cc	/^extern "C" PERFTOOLS_DLL_DECL void ProfilerStop() {$/;"	f
ProfilerStop	src/profiler.cc	/^extern "C" void ProfilerStop() { }$/;"	f
ProfilingIsEnabledForAllThreads	src/heap-checker.cc	/^bool ProfilingIsEnabledForAllThreads() { return false; }$/;"	f
ProfilingIsEnabledForAllThreads	src/profiler.cc	/^extern "C" PERFTOOLS_DLL_DECL int ProfilingIsEnabledForAllThreads() {$/;"	f
ProfilingIsEnabledForAllThreads	src/profiler.cc	/^extern "C" int ProfilingIsEnabledForAllThreads() { return 0; }$/;"	f
PthreadKeyCreate	src/windows/port.cc	/^extern "C" pthread_key_t PthreadKeyCreate(void (*destr_fn)(void*)) {$/;"	f
PtrAndSize	src/tests/addressmap_unittest.cc	/^  PtrAndSize(char* p, size_t s) : ptr(p), size(s) {}$/;"	f	struct:PtrAndSize
PtrAndSize	src/tests/addressmap_unittest.cc	/^struct PtrAndSize {$/;"	s	file:
Push	src/debugallocation.cc	/^  void Push(const QueueEntry& block) {$/;"	f	class:FreeQueue
Push	src/thread_cache.h	/^    void Push(void* ptr) {$/;"	f	class:tcmalloc::ThreadCache::FreeList
PushRange	src/thread_cache.h	/^    void PushRange(int N, void *start, void *end) {$/;"	f	class:tcmalloc::ThreadCache::FreeList
Put	src/packed-cache-inl.h	/^  void Put(K key, V value) {$/;"	f	class:PackedCache
QuickNoLeaks	src/gperftools/heap-checker.h	/^  bool QuickNoLeaks()  { return NoLeaks(); }$/;"	f	class:HeapLeakChecker
QuickSameHeap	src/gperftools/heap-checker.h	/^  bool QuickSameHeap() { return NoLeaks(); }$/;"	f	class:HeapLeakChecker
RANLIB	Makefile	/^RANLIB = ranlib$/;"	m
RAW_CHECK	src/base/logging.h	94;"	d
RAW_DCHECK	src/base/logging.h	106;"	d
RAW_DCHECK	src/base/logging.h	109;"	d
RAW_LOG	src/base/logging.h	/^inline void RAW_LOG(int lvl, const char* pat, ...)  { LOG_PRINTF(lvl, pat); }$/;"	f
RAW_VLOG	src/base/logging.h	/^inline void RAW_VLOG(int lvl, const char* pat, ...) { LOG_PRINTF(lvl, pat); }$/;"	f
RECHECK_LOGS	Makefile	/^RECHECK_LOGS = $(TEST_LOGS)$/;"	m
RECORD_GLOBAL_DATA	src/gperftools/heap-checker.h	/^    RECORD_GLOBAL_DATA,$/;"	e	enum:HeapLeakChecker::ProcMapsTask
REGISTER_HEAPCHECK_CLEANUP	src/gperftools/heap-checker.h	416;"	d
REGISTER_MODULE_DESTRUCTOR	src/base/googleinit.h	66;"	d
REGISTER_MODULE_INITIALIZER	src/base/googleinit.h	59;"	d
REGISTER_OBJ_MAKER	src/tests/heap-checker_unittest.cc	981;"	d	file:
REMAP_CACHE_AWARE_STATE	src/cacheex.h	18;"	d
RESTRICT_MAPPING	config_bak.h	308;"	d
RESTRICT_MAPPING	src/cacheex.h	8;"	d
ROOT_BITS	src/pagemap.h	/^  static const int ROOT_BITS = 5;$/;"	m	class:TCMalloc_PageMap2
ROOT_LENGTH	src/pagemap.h	/^  static const int ROOT_LENGTH = 1 << ROOT_BITS;$/;"	m	class:TCMalloc_PageMap2
RUN	src/tests/profile-handler_unittest.cc	400;"	d	file:
RUN	src/tests/profiledata_unittest.cc	354;"	d	file:
RUNNING_ON_VALGRIND	src/third_party/valgrind.h	3639;"	d
RUN_ALL_TESTS	src/tests/debugallocation_test.cc	/^static int RUN_ALL_TESTS() {$/;"	f	file:
RUN_ALL_TESTS	src/tests/malloc_hook_test.cc	/^static int RUN_ALL_TESTS() {$/;"	f	namespace:__anon25
RUN_ALL_TESTS	src/tests/profile-handler_unittest.cc	/^  static int RUN_ALL_TESTS() {$/;"	f	class:__anon28::ProfileHandlerTest
RUN_ALL_TESTS	src/tests/profiledata_unittest.cc	/^  static int RUN_ALL_TESTS() {$/;"	f	class:__anon30::ProfileDataTest
RUN_ALL_TESTS	src/tests/sampler_test.cc	/^static int RUN_ALL_TESTS() {$/;"	f	file:
RUN_SILENT	src/tests/heap-checker_unittest.cc	421;"	d	file:
RUN_TEST	src/tests/raw_printer_test.cc	16;"	d	file:
Random	src/base/low_level_alloc.cc	/^static int Random() {$/;"	f	file:
RandomizeBlockDesc	src/tests/low_level_alloc_unittest.cc	/^static void RandomizeBlockDesc(BlockDesc *d) {$/;"	f	file:
RangeCallback	src/tests/tcmalloc_unittest.cc	/^static void RangeCallback(void* arg, const base::MallocRange* r) {$/;"	f	namespace:testing::__anon29
RangeCallbackState	src/tests/tcmalloc_unittest.cc	/^struct RangeCallbackState {$/;"	s	namespace:testing::__anon29	file:
RangeFunction	src/gperftools/malloc_extension.h	/^  typedef void (RangeFunction)(void*, const base::MallocRange*);$/;"	t	class:MallocExtension
RangeValue	src/heap-checker.cc	/^struct HeapLeakChecker::RangeValue {$/;"	s	class:HeapLeakChecker	file:
Ranges	src/malloc_extension.cc	/^void MallocExtension::Ranges(void* arg, RangeFunction func) {$/;"	f	class:MallocExtension
Ranges	src/tcmalloc.cc	/^  virtual void Ranges(void* arg, RangeFunction func) {$/;"	f	class:TCMallocImplementation
RawClose	src/base/logging.cc	/^void RawClose(RawFD fd) {$/;"	f
RawClose	src/base/logging.cc	/^void RawClose(RawFD handle) {$/;"	f
RawFD	src/base/logging.h	/^typedef HANDLE RawFD;$/;"	t
RawFD	src/base/logging.h	/^typedef int RawFD;$/;"	t
RawInfoStackDumper	src/heap-profiler.cc	/^static void RawInfoStackDumper(const char* message, void*) {$/;"	f	file:
RawOpenForWriting	src/base/logging.cc	/^RawFD RawOpenForWriting(const char* filename) {$/;"	f
RawPatch	src/windows/preamble_patcher.cc	/^SideStepError PreamblePatcher::RawPatch(void* target_function,$/;"	f	class:sidestep::PreamblePatcher
RawPatchWithStub	src/windows/preamble_patcher_with_stub.cc	/^SideStepError PreamblePatcher::RawPatchWithStub($/;"	f	class:sidestep::PreamblePatcher
RawPatchWithStubAndProtections	src/windows/preamble_patcher.cc	/^SideStepError PreamblePatcher::RawPatchWithStubAndProtections($/;"	f	class:sidestep::PreamblePatcher
RawPrinter	src/raw_printer.cc	/^RawPrinter::RawPrinter(char* buf, int length)$/;"	f	class:base::RawPrinter
RawPrinter	src/raw_printer.h	/^class RawPrinter {$/;"	c	namespace:base
RawWrite	src/base/logging.cc	/^void RawWrite(RawFD fd, const char* buf, size_t len) {$/;"	f
RawWrite	src/base/logging.cc	/^void RawWrite(RawFD handle, const char* buf, size_t len) {$/;"	f
ReadCPUProfile	src/pprof	/^sub ReadCPUProfile {$/;"	s
ReadHeapGrowthStackTraces	src/malloc_extension.cc	/^void** MallocExtension::ReadHeapGrowthStackTraces() {$/;"	f	class:MallocExtension
ReadHeapGrowthStackTraces	src/tcmalloc.cc	/^  virtual void** ReadHeapGrowthStackTraces() {$/;"	f	class:TCMallocImplementation
ReadHeapProfile	src/pprof	/^sub ReadHeapProfile {$/;"	s
ReadIntFromFile	src/base/sysinfo.cc	/^static bool ReadIntFromFile(const char *file, int *value) {$/;"	f	file:
ReadPersistent	src/tests/profiledata_unittest.cc	/^static ssize_t ReadPersistent(const int fd, void *buf, const size_t count) {$/;"	f	namespace:__anon30
ReadProfile	src/pprof	/^sub ReadProfile {$/;"	s
ReadProfileHeader	src/pprof	/^sub ReadProfileHeader {$/;"	s
ReadStackTraces	src/malloc_extension.cc	/^void** MallocExtension::ReadStackTraces(int* sample_period) {$/;"	f	class:MallocExtension
ReadStackTraces	src/tcmalloc.cc	/^  virtual void** ReadStackTraces(int* sample_period) {$/;"	f	class:TCMallocImplementation
ReadStackTracesAndClear	src/stack_trace_table.cc	/^void** StackTraceTable::ReadStackTracesAndClear() {$/;"	f	class:tcmalloc::StackTraceTable
ReadSymbols	src/pprof	/^sub ReadSymbols {$/;"	s
ReadSynchProfile	src/pprof	/^sub ReadSynchProfile {$/;"	s
ReaderLock	src/base/simple_mutex.h	/^void Mutex::ReaderLock()   { Lock(); }      \/\/ we don't have read-write locks$/;"	f	class:MUTEX_NAMESPACE::Mutex
ReaderLock	src/base/simple_mutex.h	/^void Mutex::ReaderLock()   { Lock(); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
ReaderLock	src/base/simple_mutex.h	/^void Mutex::ReaderLock()   { SAFE_PTHREAD(pthread_rwlock_rdlock); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
ReaderLock	src/base/simple_mutex.h	/^void Mutex::ReaderLock()   { assert(++mutex_ > 0); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
ReaderMutexLock	src/base/simple_mutex.h	/^  explicit ReaderMutexLock(Mutex *mu) : mu_(mu) { mu_->ReaderLock(); }$/;"	f	class:MUTEX_NAMESPACE::ReaderMutexLock
ReaderMutexLock	src/base/simple_mutex.h	/^class ReaderMutexLock {$/;"	c	namespace:MUTEX_NAMESPACE
ReaderMutexLock	src/base/simple_mutex.h	323;"	d
ReaderUnlock	src/base/simple_mutex.h	/^void Mutex::ReaderUnlock() { SAFE_PTHREAD(pthread_rwlock_unlock); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
ReaderUnlock	src/base/simple_mutex.h	/^void Mutex::ReaderUnlock() { Unlock(); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
ReaderUnlock	src/base/simple_mutex.h	/^void Mutex::ReaderUnlock() { assert(mutex_-- > 0); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
ReadlineMightFail	src/pprof	/^sub ReadlineMightFail {$/;"	s
Realname	profiler_unittest.sh	/^Realname() {$/;"	f
Realname	src/tests/profiler_unittest.sh	/^Realname() {$/;"	f
RecomputePerThreadCacheSize	src/thread_cache.cc	/^void ThreadCache::RecomputePerThreadCacheSize() {$/;"	f	class:tcmalloc::ThreadCache
RecordAlloc	src/heap-profile-table.cc	/^void HeapProfileTable::RecordAlloc($/;"	f	class:HeapProfileTable
RecordAlloc	src/heap-profiler.cc	/^static void RecordAlloc(const void* ptr, size_t bytes, int skip_count) {$/;"	f	file:
RecordFree	src/heap-profile-table.cc	/^void HeapProfileTable::RecordFree(const void* ptr) {$/;"	f	class:HeapProfileTable
RecordFree	src/heap-profiler.cc	/^static void RecordFree(const void* ptr) {$/;"	f	file:
RecordGlobalDataLocked	src/heap-checker.cc	/^static void RecordGlobalDataLocked(uintptr_t start_address,$/;"	f	file:
RecordGrowth	src/page_heap.cc	/^static void RecordGrowth(size_t growth) {$/;"	f	namespace:tcmalloc
RecordRegionAddition	src/memory_region_map.cc	/^void MemoryRegionMap::RecordRegionAddition(const void* start, size_t size) {$/;"	f	class:MemoryRegionMap
RecordRegionRemoval	src/memory_region_map.cc	/^void MemoryRegionMap::RecordRegionRemoval(const void* start, size_t size) {$/;"	f	class:MemoryRegionMap
RecordRegionRemovalInBucket	src/memory_region_map.cc	/^void MemoryRegionMap::RecordRegionRemovalInBucket(int depth,$/;"	f	class:MemoryRegionMap
RecordSpan	src/page_heap.h	/^  void RecordSpan(Span* span) {$/;"	f	class:tcmalloc::PageHeap
ReduceProfile	src/pprof	/^sub ReduceProfile {$/;"	s
Region	src/memory_region_map.h	/^  struct Region {$/;"	s	class:MemoryRegionMap
RegionCmp	src/memory_region_map.h	/^  struct RegionCmp {$/;"	s	class:MemoryRegionMap
RegionIterator	src/memory_region_map.h	/^  typedef RegionSet::const_iterator RegionIterator;$/;"	t	class:MemoryRegionMap
RegionSet	src/memory_region_map.h	/^              STL_Allocator<Region, MyAllocator> > RegionSet;$/;"	t	class:MemoryRegionMap
RegionSetRep	src/memory_region_map.cc	/^union MemoryRegionMap::RegionSetRep {$/;"	u	class:MemoryRegionMap	file:
Register	src/malloc_extension.cc	/^void MallocExtension::Register(MallocExtension* implementation) {$/;"	f	class:MallocExtension
RegisterCallback	src/profile-handler.cc	/^ProfileHandlerToken* ProfileHandler::RegisterCallback($/;"	f	class:ProfileHandler
RegisterCallback	src/tests/profile-handler_unittest.cc	/^  ProfileHandlerToken* RegisterCallback(void* callback_arg) {$/;"	f	class:__anon28::ProfileHandlerTest
RegisterFailure	profiler_unittest.sh	/^RegisterFailure() {$/;"	f
RegisterFailure	src/tests/profiler_unittest.sh	/^RegisterFailure() {$/;"	f
RegisterSizeClass	src/page_heap.cc	/^void PageHeap::RegisterSizeClass(Span* span, size_t sc) {$/;"	f	class:tcmalloc::PageHeap
RegisterStackLocked	src/heap-checker.cc	/^static void RegisterStackLocked(const void* top_ptr) {$/;"	f	file:
RegisterSystemAllocator	src/windows/system-alloc.cc	/^bool RegisterSystemAllocator(SysAllocator *allocator, int priority) {$/;"	f
RegisterThread	src/profile-handler.cc	/^void ProfileHandler::RegisterThread() {$/;"	f	class:ProfileHandler
RegisterThread	src/tests/profile-handler_unittest.cc	/^  void RegisterThread() {$/;"	f	class:__anon28::ProfileHandlerTest
Release	src/windows/preamble_patcher.cc	/^  unsigned char* Release() {$/;"	f	class:sidestep::DeleteUnsignedCharArray
ReleaseAtLeastNPages	src/page_heap.cc	/^Length PageHeap::ReleaseAtLeastNPages(Length num_pages) {$/;"	f	class:tcmalloc::PageHeap
ReleaseFreeMemory	src/malloc_extension.cc	/^void MallocExtension::ReleaseFreeMemory() {$/;"	f	class:MallocExtension
ReleaseLastNormalSpan	src/page_heap.cc	/^Length PageHeap::ReleaseLastNormalSpan(SpanList* slist) {$/;"	f	class:tcmalloc::PageHeap
ReleaseListToSpans	src/central_freelist.cc	/^void CentralFreeList::ReleaseListToSpans(void* start) {$/;"	f	class:tcmalloc::CentralFreeList
ReleaseSnapshot	src/heap-profile-table.cc	/^void HeapProfileTable::ReleaseSnapshot(Snapshot* s) {$/;"	f	class:HeapProfileTable
ReleaseToCentralCache	src/thread_cache.cc	/^void ThreadCache::ReleaseToCentralCache(FreeList* src, size_t cl, int N) {$/;"	f	class:tcmalloc::ThreadCache
ReleaseToSpans	src/central_freelist.cc	/^void CentralFreeList::ReleaseToSpans(void* object) {$/;"	f	class:tcmalloc::CentralFreeList
ReleaseToSystem	src/malloc_extension.cc	/^void MallocExtension::ReleaseToSystem(size_t num_bytes) {$/;"	f	class:MallocExtension
ReleaseToSystem	src/tcmalloc.cc	/^  virtual void ReleaseToSystem(size_t num_bytes) {$/;"	f	class:TCMallocImplementation
Release_AtomicExchange	src/base/atomicops-internals-arm-generic.h	/^inline Atomic32 Release_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Release_AtomicExchange	src/base/atomicops-internals-arm-generic.h	/^inline Atomic64 Release_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Release_AtomicExchange	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic32 Release_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Release_AtomicExchange	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic64 Release_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Release_AtomicExchange	src/base/atomicops-internals-gcc.h	/^inline Atomic32 Release_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Release_AtomicExchange	src/base/atomicops-internals-gcc.h	/^inline Atomic64 Release_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Release_AtomicExchange	src/base/atomicops-internals-linuxppc.h	/^inline Atomic32 Release_AtomicExchange(volatile Atomic32 *ptr,$/;"	f	namespace:base::subtle
Release_AtomicExchange	src/base/atomicops-internals-linuxppc.h	/^inline Atomic64 Release_AtomicExchange(volatile Atomic64 *ptr,$/;"	f	namespace:base::subtle
Release_AtomicExchange	src/base/atomicops-internals-macosx.h	/^inline Atomic32 Release_AtomicExchange(volatile Atomic32 *ptr,$/;"	f	namespace:base::subtle
Release_AtomicExchange	src/base/atomicops-internals-macosx.h	/^inline Atomic64 Release_AtomicExchange(volatile Atomic64 *ptr,$/;"	f	namespace:base::subtle
Release_AtomicExchange	src/base/atomicops-internals-mips.h	/^inline Atomic32 Release_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Release_AtomicExchange	src/base/atomicops-internals-mips.h	/^inline Atomic64 Release_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Release_AtomicExchange	src/base/atomicops-internals-windows.h	/^inline Atomic32 Release_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Release_AtomicExchange	src/base/atomicops-internals-windows.h	/^inline Atomic64 Release_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Release_AtomicExchange	src/base/atomicops-internals-x86.h	/^inline Atomic32 Release_AtomicExchange(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Release_AtomicExchange	src/base/atomicops-internals-x86.h	/^inline Atomic64 Release_AtomicExchange(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Release_AtomicExchange	src/base/atomicops.h	/^inline AtomicWord Release_AtomicExchange(volatile AtomicWord* ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops-internals-arm-generic.h	/^inline Atomic32 Release_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops-internals-arm-generic.h	/^inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic32 Release_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops-internals-gcc.h	/^inline Atomic32 Release_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops-internals-gcc.h	/^inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops-internals-linuxppc.h	/^inline Atomic32 Release_CompareAndSwap(volatile Atomic32 *ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops-internals-linuxppc.h	/^inline Atomic64 Release_CompareAndSwap(volatile Atomic64 *ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops-internals-macosx.h	/^inline Atomic32 Release_CompareAndSwap(volatile Atomic32 *ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops-internals-macosx.h	/^inline Atomic64 Release_CompareAndSwap(volatile Atomic64 *ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops-internals-mips.h	/^inline Atomic32 Release_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops-internals-mips.h	/^inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops-internals-windows.h	/^inline Atomic32 Release_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops-internals-windows.h	/^inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops-internals-x86.h	/^inline Atomic32 Release_CompareAndSwap(volatile Atomic32* ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops-internals-x86.h	/^inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops.h	/^inline Atomic32 Release_CompareAndSwap(volatile Atomic32* ptr,$/;"	f
Release_CompareAndSwap	src/base/atomicops.h	/^inline AtomicWord Release_CompareAndSwap(volatile AtomicWord* ptr,$/;"	f
Release_CompareAndSwap	src/base/atomicops.h	/^inline AtomicWord Release_CompareAndSwap(volatile AtomicWord* ptr,$/;"	f	namespace:base::subtle
Release_CompareAndSwap	src/base/atomicops.h	/^inline base::subtle::Atomic64 Release_CompareAndSwap($/;"	f
Release_Load	src/base/atomicops-internals-arm-generic.h	/^inline Atomic32 Release_Load(volatile const Atomic32* ptr) {$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops-internals-arm-generic.h	/^inline Atomic64 Release_Load(volatile const Atomic64* ptr) {$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic32 Release_Load(volatile const Atomic32* ptr) {$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops-internals-arm-v6plus.h	/^inline Atomic64 Release_Load(volatile const Atomic64* ptr) {$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops-internals-gcc.h	/^inline Atomic32 Release_Load(volatile const Atomic32* ptr) {$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops-internals-gcc.h	/^inline Atomic64 Release_Load(volatile const Atomic64* ptr) {$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops-internals-linuxppc.h	/^inline Atomic32 Release_Load(volatile const Atomic32 *ptr) {$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops-internals-linuxppc.h	/^inline Atomic64 Release_Load(volatile const Atomic64 *ptr) {$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops-internals-macosx.h	/^inline Atomic32 Release_Load(volatile const Atomic32 *ptr) {$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops-internals-macosx.h	/^inline Atomic64 Release_Load(volatile const Atomic64 *ptr) {$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops-internals-mips.h	/^inline Atomic32 Release_Load(volatile const Atomic32* ptr)$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops-internals-mips.h	/^inline Atomic64 Release_Load(volatile const Atomic64* ptr)$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops-internals-windows.h	/^inline Atomic32 Release_Load(volatile const Atomic32* ptr) {$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops-internals-windows.h	/^inline Atomic64 Release_Load(volatile const Atomic64* ptr) {$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops-internals-x86.h	/^inline Atomic32 Release_Load(volatile const Atomic32* ptr) {$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops-internals-x86.h	/^inline Atomic64 Release_Load(volatile const Atomic64* ptr) {$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops.h	/^inline Atomic32 Release_Load(volatile const Atomic32* ptr) {$/;"	f
Release_Load	src/base/atomicops.h	/^inline AtomicWord Release_Load(volatile const AtomicWord* ptr) {$/;"	f
Release_Load	src/base/atomicops.h	/^inline AtomicWord Release_Load(volatile const AtomicWord* ptr) {$/;"	f	namespace:base::subtle
Release_Load	src/base/atomicops.h	/^inline base::subtle::Atomic64 Release_Load($/;"	f
Release_Store	src/base/atomicops-internals-arm-generic.h	/^inline void Release_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
Release_Store	src/base/atomicops-internals-arm-generic.h	/^inline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
Release_Store	src/base/atomicops-internals-arm-v6plus.h	/^inline void Release_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
Release_Store	src/base/atomicops-internals-arm-v6plus.h	/^inline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
Release_Store	src/base/atomicops-internals-gcc.h	/^inline void Release_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
Release_Store	src/base/atomicops-internals-gcc.h	/^inline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
Release_Store	src/base/atomicops-internals-linuxppc.h	/^inline void Release_Store(volatile Atomic32 *ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
Release_Store	src/base/atomicops-internals-linuxppc.h	/^inline void Release_Store(volatile Atomic64 *ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
Release_Store	src/base/atomicops-internals-macosx.h	/^inline void Release_Store(volatile Atomic32 *ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
Release_Store	src/base/atomicops-internals-macosx.h	/^inline void Release_Store(volatile Atomic64 *ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
Release_Store	src/base/atomicops-internals-mips.h	/^inline void Release_Store(volatile Atomic32* ptr, Atomic32 value)$/;"	f	namespace:base::subtle
Release_Store	src/base/atomicops-internals-mips.h	/^inline void Release_Store(volatile Atomic64* ptr, Atomic64 value)$/;"	f	namespace:base::subtle
Release_Store	src/base/atomicops-internals-windows.h	/^inline void Release_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
Release_Store	src/base/atomicops-internals-windows.h	/^inline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
Release_Store	src/base/atomicops-internals-x86.h	/^inline void Release_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f	namespace:base::subtle
Release_Store	src/base/atomicops-internals-x86.h	/^inline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {$/;"	f	namespace:base::subtle
Release_Store	src/base/atomicops.h	/^inline void Release_Store($/;"	f
Release_Store	src/base/atomicops.h	/^inline void Release_Store(volatile Atomic32* ptr, Atomic32 value) {$/;"	f
Release_Store	src/base/atomicops.h	/^inline void Release_Store(volatile AtomicWord* ptr, AtomicWord value) {$/;"	f
Release_Store	src/base/atomicops.h	/^inline void Release_Store(volatile AtomicWord* ptr, AtomicWord value) {$/;"	f	namespace:base::subtle
Remove	src/malloc_hook.cc	/^bool HookList<T>::Remove(T value_as_t) {$/;"	f	class:base::internal::HookList
RemoveDeleteHook	src/gperftools/malloc_hook.h	/^  inline static bool RemoveDeleteHook(DeleteHook hook) {$/;"	f	class:MallocHook
RemoveFromFreeList	src/page_heap.cc	/^void PageHeap::RemoveFromFreeList(Span* span) {$/;"	f	class:tcmalloc::PageHeap
RemoveInitialHooksAndCallInitializers	src/malloc_hook.cc	/^void RemoveInitialHooksAndCallInitializers() {$/;"	f	namespace:__anon49
RemoveMmapHook	src/gperftools/malloc_hook.h	/^  inline static bool RemoveMmapHook(MmapHook hook) {$/;"	f	class:MallocHook
RemoveMmapReplacement	src/gperftools/malloc_hook.h	/^  inline static bool RemoveMmapReplacement(MmapReplacement hook) {$/;"	f	class:MallocHook
RemoveMremapHook	src/gperftools/malloc_hook.h	/^  inline static bool RemoveMremapHook(MremapHook hook) {$/;"	f	class:MallocHook
RemoveMunmapHook	src/gperftools/malloc_hook.h	/^  inline static bool RemoveMunmapHook(MunmapHook hook) {$/;"	f	class:MallocHook
RemoveMunmapReplacement	src/gperftools/malloc_hook.h	/^  inline static bool RemoveMunmapReplacement(MunmapReplacement hook) {$/;"	f	class:MallocHook
RemoveNewHook	src/gperftools/malloc_hook.h	/^  inline static bool RemoveNewHook(NewHook hook) {$/;"	f	class:MallocHook
RemovePreMmapHook	src/gperftools/malloc_hook.h	/^  inline static bool RemovePreMmapHook(PreMmapHook hook) {$/;"	f	class:MallocHook
RemovePreSbrkHook	src/gperftools/malloc_hook.h	/^  inline static bool RemovePreSbrkHook(PreSbrkHook hook) {$/;"	f	class:MallocHook
RemoveRange	src/central_freelist.cc	/^int CentralFreeList::RemoveRange(void **start, void **end, int N) {$/;"	f	class:tcmalloc::CentralFreeList
RemoveSbrkHook	src/gperftools/malloc_hook.h	/^  inline static bool RemoveSbrkHook(SbrkHook hook) {$/;"	f	class:MallocHook
RemoveUninterestingFrames	src/pprof	/^sub RemoveUninterestingFrames {$/;"	s
ReplaceSystemAlloc	src/libc_override.h	/^static void ReplaceSystemAlloc() { PatchWindowsFunctions(); }$/;"	f
ReplaceSystemAlloc	src/libc_override_gcc_and_weak.h	/^static void ReplaceSystemAlloc() { }$/;"	f
ReplaceSystemAlloc	src/libc_override_osx.h	/^static void ReplaceSystemAlloc() {$/;"	f
ReplaceSystemAlloc	src/libc_override_redefine.h	/^static void ReplaceSystemAlloc() { }$/;"	f
ReportCallback	src/heap-profile-table.cc	/^void HeapProfileTable::Snapshot::ReportCallback(const void* ptr,$/;"	f	class:HeapProfileTable::Snapshot
ReportIndividualObjects	src/heap-profile-table.cc	/^void HeapProfileTable::Snapshot::ReportIndividualObjects() {$/;"	f	class:HeapProfileTable::Snapshot
ReportLargeAlloc	src/tcmalloc.cc	/^static void ReportLargeAlloc(Length num_pages, void* result) {$/;"	f	namespace:__anon5
ReportLeaks	src/heap-profile-table.cc	/^void HeapProfileTable::Snapshot::ReportLeaks(const char* checker_name,$/;"	f	class:HeapProfileTable::Snapshot
ReportObject	src/heap-profile-table.cc	/^void HeapProfileTable::Snapshot::ReportObject(const void* ptr,$/;"	f	class:HeapProfileTable::Snapshot
ReportState	src/heap-profile-table.cc	/^struct HeapProfileTable::Snapshot::ReportState {$/;"	s	class:HeapProfileTable::Snapshot	file:
Reset	src/profile-handler.cc	/^void ProfileHandler::Reset() {$/;"	f	class:ProfileHandler
Reset	src/profiledata.cc	/^void ProfileData::Reset() {$/;"	f	class:ProfileData
ResolveRedirectionForCurl	src/pprof	/^sub ResolveRedirectionForCurl {$/;"	s
ResolveTarget	src/windows/preamble_patcher.h	/^  static T ResolveTarget(T target_function) {$/;"	f	class:sidestep::PreamblePatcher
ResolveTargetImpl	src/windows/preamble_patcher.cc	/^void* PreamblePatcher::ResolveTargetImpl(unsigned char* target,$/;"	f	class:sidestep::PreamblePatcher
RestoreSavedBucketsLocked	src/memory_region_map.cc	/^void MemoryRegionMap::RestoreSavedBucketsLocked() {$/;"	f	class:MemoryRegionMap
RewriteSvg	src/pprof	/^sub RewriteSvg {$/;"	s
RoundUp	src/base/low_level_alloc.cc	/^static intptr_t RoundUp(intptr_t addr, intptr_t align) {$/;"	f	file:
RoundUp	src/debugallocation.cc	/^static intptr_t RoundUp(intptr_t value, intptr_t alignment) {$/;"	f	file:
RoutineCallingTheSignal	src/tests/getpc_test.cc	/^static void RoutineCallingTheSignal() {$/;"	f	file:
RtlCaptureStackBackTrace_Function	src/stacktrace_win32-inl.h	/^typedef USHORT NTAPI RtlCaptureStackBackTrace_Function($/;"	t
RtlCaptureStackBackTrace_fn	src/stacktrace_win32-inl.h	/^static RtlCaptureStackBackTrace_Function* const RtlCaptureStackBackTrace_fn =$/;"	v
Run	src/tests/heap-checker_unittest.cc	/^  virtual void Run() { (*f_)(); delete this; }$/;"	f	class:Callback0
Run	src/tests/heap-checker_unittest.cc	/^  virtual void Run() { (*f_)(p1_); delete this; }$/;"	f	class:Callback1
Run	src/tests/heap-checker_unittest.cc	/^  virtual void Run() { (*f_)(p1_, p2_); delete this; }$/;"	f	class:Callback2
Run	src/tests/profile-handler_unittest.cc	/^  void Run() {$/;"	f	class:__anon28::BusyThread	file:
Run	src/tests/profile-handler_unittest.cc	/^  void Run() {$/;"	f	class:__anon28::NullThread	file:
Run	src/tests/profile-handler_unittest.cc	/^  void Run() {$/;"	f	class:__anon28::VirtualTimerGetterThread	file:
Run	src/tests/tcmalloc_unittest.cc	/^  virtual void Run() {$/;"	f	class:testing::TesterThread
RunAllTests	src/tests/tcmalloc_unittest.cc	/^static int RunAllTests(int argc, char** argv) {$/;"	f	namespace:testing
RunDisabledLeaks	src/tests/heap-checker_unittest.cc	/^static void* RunDisabledLeaks(void* a) {$/;"	f	file:
RunEvince	src/pprof	/^sub RunEvince {$/;"	s
RunFunctionInThread	src/tests/testutil.cc	/^  DWORD WINAPI RunFunctionInThread(LPVOID ptr_to_ptr_to_fn) {$/;"	f
RunFunctionInThread	src/tests/testutil.cc	/^  static void* RunFunctionInThread(void *ptr_to_ptr_to_fn) {$/;"	f	file:
RunFunctionInThreadWithId	src/tests/testutil.cc	/^  DWORD WINAPI RunFunctionInThreadWithId(LPVOID ptr_to_fnid) {$/;"	f
RunFunctionInThreadWithId	src/tests/testutil.cc	/^  static void* RunFunctionInThreadWithId(void *ptr_to_fnid) {$/;"	f	file:
RunGV	src/pprof	/^sub RunGV {$/;"	s
RunHeapBusyThreads	src/tests/heap-checker_unittest.cc	/^static void RunHeapBusyThreads() {$/;"	f	file:
RunHeapCleanups	src/heap-checker.cc	/^void HeapCleaner::RunHeapCleanups() {$/;"	f	class:HeapCleaner
RunHidden	src/tests/heap-checker_unittest.cc	/^static void RunHidden(Closure* c) {$/;"	f	file:
RunKcachegrind	src/pprof	/^sub RunKcachegrind {$/;"	s
RunManyThreads	src/tests/testutil.cc	/^  void RunManyThreads(void (*fn)(), int count) {$/;"	f
RunManyThreads	src/tests/testutil.cc	/^extern "C" void RunManyThreads(void (*fn)(), int count) {$/;"	f
RunManyThreadsWithId	src/tests/testutil.cc	/^  void RunManyThreadsWithId(void (*fn)(int), int count, int stacksize) {$/;"	f
RunManyThreadsWithId	src/tests/testutil.cc	/^extern "C" void RunManyThreadsWithId(void (*fn)(int), int count, int) {$/;"	f
RunSilent	src/tests/heap-checker_unittest.cc	/^static bool RunSilent(HeapLeakChecker* check,$/;"	f	file:
RunThread	src/tests/tcmalloc_unittest.cc	/^static void RunThread(int thread_id) {$/;"	f	namespace:testing
RunThread	src/tests/testutil.cc	/^  void RunThread(void (*fn)()) {$/;"	f
RunThread	src/tests/testutil.cc	/^extern "C" void RunThread(void (*fn)()) {$/;"	f
RunUnitTests	src/pprof	/^sub RunUnitTests {$/;"	s
RunWeb	src/pprof	/^sub RunWeb {$/;"	s
RunningOnValgrind	src/base/dynamic_annotations.c	/^int RunningOnValgrind(void) {$/;"	f
SAFE_PTHREAD	src/base/simple_mutex.h	237;"	d
SAFE_PTHREAD	src/base/simple_mutex.h	256;"	d
SAFE_PTHREAD	src/base/simple_mutex.h	260;"	d
SAFE_PTHREAD	src/base/simple_mutex.h	279;"	d
SAFE_PTHREAD	src/tests/testutil.cc	163;"	d	file:
SAME_HEAP	src/tests/heap-checker_unittest.cc	/^enum CheckType { SAME_HEAP, NO_LEAKS };$/;"	e	enum:CheckType	file:
SAMPLING_TEST_INCLUDES	Makefile	/^SAMPLING_TEST_INCLUDES = src\/config_for_unittests.h \\$/;"	m
SA_RESTORER	src/base/linux_syscall_support.h	523;"	d
SCNd64	src/base/basictypes.h	102;"	d
SCNd64	src/windows/port.h	341;"	d
SCNx64	src/base/basictypes.h	96;"	d
SCNx64	src/windows/port.h	339;"	d
SCOPED_LOCKABLE	src/base/thread_annotations.h	112;"	d
SCRIPTS	Makefile	/^SCRIPTS = $(bin_SCRIPTS) $(noinst_SCRIPTS)$/;"	m
SEARCH_CAP	src/windows/addr2line-pdb.c	48;"	d	file:
SEARCH_CAP	src/windows/nm-pdb.c	59;"	d	file:
SED	Makefile	/^SED = \/bin\/sed$/;"	m
SET_FRAME	src/base/elfcore.h	180;"	d
SET_FRAME	src/base/elfcore.h	241;"	d
SET_FRAME	src/base/elfcore.h	271;"	d
SET_FRAME	src/base/elfcore.h	334;"	d
SET_FRAME	src/base/elfcore.h	352;"	d
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SG_CPU_PROFILER_INCLUDES	Makefile	/^SG_CPU_PROFILER_INCLUDES = src\/gperftools\/profiler.h$/;"	m
SG_STACKTRACE_INCLUDES	Makefile	/^SG_STACKTRACE_INCLUDES = src\/gperftools\/stacktrace.h$/;"	m
SG_TCMALLOC_INCLUDES	Makefile	/^SG_TCMALLOC_INCLUDES = src\/gperftools\/heap-profiler.h \\$/;"	m
SG_TCMALLOC_MINIMAL_INCLUDES	Makefile	/^SG_TCMALLOC_MINIMAL_INCLUDES = src\/gperftools\/malloc_hook.h \\$/;"	m
SHARED_LOCKS_REQUIRED	src/base/thread_annotations.h	96;"	d
SHARED_LOCK_FUNCTION	src/base/thread_annotations.h	118;"	d
SHARED_TRYLOCK_FUNCTION	src/base/thread_annotations.h	124;"	d
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SIDESTEP_ACCESS_DENIED	src/windows/preamble_patcher.h	/^  SIDESTEP_ACCESS_DENIED,$/;"	e	enum:sidestep::SideStepError
SIDESTEP_ASSERT	src/windows/mini_disassembler.h	46;"	d
SIDESTEP_ASSERT	src/windows/preamble_patcher.h	46;"	d
SIDESTEP_CHK	src/windows/auto_testing_hook.h	39;"	d
SIDESTEP_EXPECT_TRUE	src/windows/auto_testing_hook.h	40;"	d
SIDESTEP_FUNCTION_TOO_SMALL	src/windows/preamble_patcher.h	/^  SIDESTEP_FUNCTION_TOO_SMALL,$/;"	e	enum:sidestep::SideStepError
SIDESTEP_INSUFFICIENT_BUFFER	src/windows/preamble_patcher.h	/^  SIDESTEP_INSUFFICIENT_BUFFER,$/;"	e	enum:sidestep::SideStepError
SIDESTEP_INVALID_PARAMETER	src/windows/preamble_patcher.h	/^  SIDESTEP_INVALID_PARAMETER,$/;"	e	enum:sidestep::SideStepError
SIDESTEP_JUMP_INSTRUCTION	src/windows/preamble_patcher.h	/^  SIDESTEP_JUMP_INSTRUCTION,$/;"	e	enum:sidestep::SideStepError
SIDESTEP_LOG	src/windows/mini_disassembler.h	47;"	d
SIDESTEP_LOG	src/windows/preamble_patcher.h	47;"	d
SIDESTEP_NO_SUCH_FUNCTION	src/windows/preamble_patcher.h	/^  SIDESTEP_NO_SUCH_FUNCTION,$/;"	e	enum:sidestep::SideStepError
SIDESTEP_NO_SUCH_MODULE	src/windows/preamble_patcher.h	/^  SIDESTEP_NO_SUCH_MODULE,$/;"	e	enum:sidestep::SideStepError
SIDESTEP_SUCCESS	src/windows/preamble_patcher.h	/^  SIDESTEP_SUCCESS = 0,$/;"	e	enum:sidestep::SideStepError
SIDESTEP_TO_HRESULT	src/windows/preamble_patcher.h	89;"	d
SIDESTEP_UNEXPECTED	src/windows/preamble_patcher.h	/^  SIDESTEP_UNEXPECTED,$/;"	e	enum:sidestep::SideStepError
SIDESTEP_UNSUPPORTED_INSTRUCTION	src/windows/preamble_patcher.h	/^  SIDESTEP_UNSUPPORTED_INSTRUCTION,$/;"	e	enum:sidestep::SideStepError
SIS_CONCAT	src/stacktrace_impl_setup-inl.h	42;"	d
SIS_CONCAT	src/stacktrace_impl_setup-inl.h	94;"	d
SIS_CONCAT2	src/stacktrace_impl_setup-inl.h	41;"	d
SIS_CONCAT2	src/stacktrace_impl_setup-inl.h	93;"	d
SIS_STRINGIFY	src/stacktrace_impl_setup-inl.h	44;"	d
SIS_STRINGIFY2	src/stacktrace_impl_setup-inl.h	45;"	d
SLL_Next	src/linked_list.h	/^inline void *SLL_Next(void *t) {$/;"	f	namespace:tcmalloc
SLL_Pop	src/linked_list.h	/^inline void *SLL_Pop(void **list) {$/;"	f	namespace:tcmalloc
SLL_PopRange	src/linked_list.h	/^inline void SLL_PopRange(void **head, int N, void **start, void **end) {$/;"	f	namespace:tcmalloc
SLL_Push	src/linked_list.h	/^inline void SLL_Push(void **list, void *element) {$/;"	f	namespace:tcmalloc
SLL_PushRange	src/linked_list.h	/^inline void SLL_PushRange(void **head, void *start, void *end) {$/;"	f	namespace:tcmalloc
SLL_SetNext	src/linked_list.h	/^inline void SLL_SetNext(void *t, void *n) {$/;"	f	namespace:tcmalloc
SLL_Size	src/linked_list.h	/^inline size_t SLL_Size(void *head) {$/;"	f	namespace:tcmalloc
SOURCES	Makefile	/^SOURCES = $(liblogging_la_SOURCES) $(libmaybe_threads_la_SOURCES) \\$/;"	m
SP	src/base/elfcore.h	114;"	d
SP	src/base/elfcore.h	71;"	d
SP	src/base/elfcore.h	95;"	d
SPAN_HISTORY	src/span.h	57;"	d
SPINLOCK_INCLUDES	Makefile	/^SPINLOCK_INCLUDES = src\/base\/spinlock.h \\$/;"	m
STACKTRACE_INCLUDES	Makefile	/^STACKTRACE_INCLUDES = $(S_STACKTRACE_INCLUDES) $(SG_STACKTRACE_INCLUDES)$/;"	m
STACKTRACE_INL_HEADER	src/stacktrace.cc	100;"	d	file:
STACKTRACE_INL_HEADER	src/stacktrace.cc	105;"	d	file:
STACKTRACE_INL_HEADER	src/stacktrace.cc	109;"	d	file:
STACKTRACE_INL_HEADER	src/stacktrace.cc	115;"	d	file:
STACKTRACE_INL_HEADER	src/stacktrace.cc	117;"	d	file:
STACKTRACE_INL_HEADER	src/stacktrace.cc	122;"	d	file:
STACKTRACE_INL_HEADER	src/stacktrace.cc	127;"	d	file:
STACKTRACE_INL_HEADER	src/stacktrace.cc	131;"	d	file:
STACKTRACE_INL_HEADER	src/stacktrace.cc	136;"	d	file:
STACKTRACE_INL_HEADER	src/stacktrace.cc	140;"	d	file:
STACKTRACE_INL_HEADER	src/stacktrace.cc	147;"	d	file:
STACKTRACE_INL_HEADER	src/stacktrace.cc	151;"	d	file:
STACKTRACE_INL_HEADER	src/stacktrace.cc	85;"	d	file:
STACKTRACE_INL_HEADER	src/stacktrace.cc	89;"	d	file:
STACKTRACE_INL_HEADER	src/stacktrace.cc	96;"	d	file:
STACKTRACE_SYMBOLS	Makefile	/^STACKTRACE_SYMBOLS = '(GetStackTrace|GetStackFrames|GetStackTraceWithContext|GetStackFramesWithContext)'$/;"	m
STACKTRACE_UNITTEST_INCLUDES	Makefile	/^STACKTRACE_UNITTEST_INCLUDES = src\/config_for_unittests.h \\$/;"	m
STDC_HEADERS	config_bak.h	272;"	d
STDC_HEADERS	src/config.h	272;"	d
STDC_HEADERS	src/windows/config.h	274;"	d
STDERR_FILENO	src/windows/port.h	/^enum { STDIN_FILENO = 0, STDOUT_FILENO = 1, STDERR_FILENO = 2 };$/;"	e	enum:__anon8
STDIN_FILENO	src/windows/port.h	/^enum { STDIN_FILENO = 0, STDOUT_FILENO = 1, STDERR_FILENO = 2 };$/;"	e	enum:__anon8
STDOUT_FILENO	src/windows/port.h	/^enum { STDIN_FILENO = 0, STDOUT_FILENO = 1, STDERR_FILENO = 2 };$/;"	e	enum:__anon8
STL_Allocator	src/base/stl_allocator.h	/^  STL_Allocator() { }$/;"	f	class:STL_Allocator
STL_Allocator	src/base/stl_allocator.h	/^  STL_Allocator(const STL_Allocator&) { }$/;"	f	class:STL_Allocator
STL_Allocator	src/base/stl_allocator.h	/^  template <class T1> STL_Allocator(const STL_Allocator<T1, Alloc>&) { }$/;"	f	class:STL_Allocator
STL_Allocator	src/base/stl_allocator.h	/^class STL_Allocator {$/;"	c
STL_NAMESPACE	config_bak.h	275;"	d
STL_NAMESPACE	src/config.h	275;"	d
STL_NAMESPACE	src/windows/config.h	277;"	d
STRIP	Makefile	/^STRIP = strip$/;"	m
SYM	src/windows/nm-pdb.c	/^} SYM;$/;"	t	typeref:struct:__anon12	file:
SYMBOLIZE	src/gperftools/heap-checker.h	/^  enum ShouldSymbolize { SYMBOLIZE, DO_NOT_SYMBOLIZE };$/;"	e	enum:HeapLeakChecker::ShouldSymbolize
SYM_CONTEXT	src/windows/nm-pdb.c	/^} SYM_CONTEXT;$/;"	t	typeref:struct:__anon13	file:
SYSINFO_INCLUDES	Makefile	/^SYSINFO_INCLUDES = src\/base\/sysinfo.h \\$/;"	m
SYSTEM_ALLOC_CC	Makefile	/^SYSTEM_ALLOC_CC = src\/system-alloc.cc$/;"	m
SYS_CPLUSPLUS	src/base/linuxthreads.cc	157;"	d	file:
SYS_ERRNO	src/base/linuxthreads.cc	158;"	d	file:
SYS_INLINE	src/base/linuxthreads.cc	159;"	d	file:
SYS_LINUX_SYSCALL_SUPPORT_H	src/base/linux_syscall_support.h	132;"	d
SYS_LINUX_SYSCALL_SUPPORT_H	src/base/linuxthreads.cc	161;"	d	file:
SYS_PREFIX	src/base/linuxthreads.cc	160;"	d	file:
S_CPU_PROFILER_INCLUDES	Makefile	/^S_CPU_PROFILER_INCLUDES = src\/profiledata.h \\$/;"	m
S_STACKTRACE_INCLUDES	Makefile	/^S_STACKTRACE_INCLUDES = src\/stacktrace_impl_setup-inl.h \\$/;"	m
S_TCMALLOC_INCLUDES	Makefile	/^S_TCMALLOC_INCLUDES = $(S_TCMALLOC_MINIMAL_INCLUDES) \\$/;"	m
S_TCMALLOC_MINIMAL_INCLUDES	Makefile	/^S_TCMALLOC_MINIMAL_INCLUDES = src\/common.h \\$/;"	m
SameHeap	src/gperftools/heap-checker.h	/^  bool SameHeap()      { return NoLeaks(); }$/;"	f	class:HeapLeakChecker
SampleAllocation	src/sampler.h	/^inline bool Sampler::SampleAllocation(size_t k) {$/;"	f	class:tcmalloc::Sampler
SampleAllocation	src/tests/sampler_test.cc	/^inline bool OldSampler::SampleAllocation(size_t k) {$/;"	f	class:OldSampler
SampleAllocation	src/thread_cache.h	/^inline bool ThreadCache::SampleAllocation(size_t k) {$/;"	f	class:tcmalloc::ThreadCache
Sampler	src/sampler.h	/^class PERFTOOLS_DLL_DECL Sampler {$/;"	c	namespace:tcmalloc
SbrkHook	src/gperftools/malloc_hook.h	/^  typedef MallocHook_SbrkHook SbrkHook;$/;"	t	class:MallocHook
SbrkHook	src/heap-profiler.cc	/^static void SbrkHook(const void* result, ptrdiff_t increment) {$/;"	f	file:
SbrkHook	src/memory_region_map.cc	/^void MemoryRegionMap::SbrkHook(const void* result, ptrdiff_t increment) {$/;"	f	class:MemoryRegionMap
SbrkSysAllocator	src/system-alloc.cc	/^  SbrkSysAllocator() : SysAllocator() {$/;"	f	class:SbrkSysAllocator
SbrkSysAllocator	src/system-alloc.cc	/^class SbrkSysAllocator : public SysAllocator {$/;"	c	file:
Scavenge	src/thread_cache.cc	/^void ThreadCache::Scavenge() {$/;"	f	class:tcmalloc::ThreadCache
ScopedDisabledLeaks	src/tests/heap-checker_unittest.cc	/^static void ScopedDisabledLeaks() {$/;"	f	file:
SearchFreeAndLargeLists	src/page_heap.cc	/^Span* PageHeap::SearchFreeAndLargeLists(Length n) {$/;"	f	class:tcmalloc::PageHeap
SetAggressiveDecommit	src/page_heap.h	/^  void SetAggressiveDecommit(bool aggressive_decommit) {$/;"	f	class:tcmalloc::PageHeap
SetBase	src/base/vdso_support.cc	/^const void *VDSOSupport::SetBase(const void *base) {$/;"	f	class:base::VDSOSupport
SetCacheManageSkip	src/tcmalloc.cc	/^SetCacheManageSkip() {$/;"	f	file:
SetCacheManagerPrivate	src/tcmalloc.cc	/^SetCacheManagerPrivate(void *private_data) {$/;"	f	file:
SetCheckCallback	src/tests/addressmap_unittest.cc	/^static void SetCheckCallback(const void* ptr, ValueT* val,$/;"	f	file:
SetChildAllocator	src/system-alloc.cc	/^  void SetChildAllocator(SysAllocator* alloc, unsigned int index,$/;"	f	class:DefaultSysAllocator
SetDeleteHook	src/gperftools/malloc_hook.h	/^  inline static DeleteHook SetDeleteHook(DeleteHook hook) {$/;"	f	class:MallocHook
SetIsSafe	src/base/simple_mutex.h	/^  inline void SetIsSafe() { is_safe_ = true; }$/;"	f	class:MUTEX_NAMESPACE::Mutex
SetJoinable	src/tests/profile-handler_unittest.cc	/^  void SetJoinable(bool value) { joinable_ = value; }$/;"	f	class:__anon28::Thread
SetMemoryReleaseRate	src/malloc_extension.cc	/^void MallocExtension::SetMemoryReleaseRate(double rate) {$/;"	f	class:MallocExtension
SetMemoryReleaseRate	src/tcmalloc.cc	/^  virtual void SetMemoryReleaseRate(double rate) {$/;"	f	class:TCMallocImplementation
SetMinSizeForSlowPath	src/thread_cache.h	/^inline void ThreadCache::SetMinSizeForSlowPath(size_t size) {$/;"	f	class:tcmalloc::ThreadCache
SetMmapHook	src/gperftools/malloc_hook.h	/^  inline static MmapHook SetMmapHook(MmapHook hook) {$/;"	f	class:MallocHook
SetMmapReplacement	src/gperftools/malloc_hook.h	/^  inline static bool SetMmapReplacement(MmapReplacement hook) {$/;"	f	class:MallocHook
SetMremapHook	src/gperftools/malloc_hook.h	/^  inline static MremapHook SetMremapHook(MremapHook hook) {$/;"	f	class:MallocHook
SetMunmapHook	src/gperftools/malloc_hook.h	/^  inline static MunmapHook SetMunmapHook(MunmapHook hook) {$/;"	f	class:MallocHook
SetMunmapReplacement	src/gperftools/malloc_hook.h	/^  inline static bool SetMunmapReplacement(MunmapReplacement hook) {$/;"	f	class:MallocHook
SetNewHook	src/gperftools/malloc_hook.h	/^  inline static NewHook SetNewHook(NewHook hook) {$/;"	f	class:MallocHook
SetNumericProperty	src/malloc_extension.cc	/^bool MallocExtension::SetNumericProperty(const char* property, size_t value) {$/;"	f	class:MallocExtension
SetNumericProperty	src/tcmalloc.cc	/^  virtual bool SetNumericProperty(const char* name, size_t value) {$/;"	f	class:TCMallocImplementation
SetPageMap	src/page_heap.h	/^  void SetPageMap(PageMap *pagemap) { pagemap_ = pagemap; }$/;"	f	class:tcmalloc::PageHeap
SetPageMapCache	src/page_heap.h	/^  void SetPageMapCache(PageMapCache *mapcache) { pagemap_cache_ = mapcache; }$/;"	f	class:tcmalloc::PageHeap
SetPreMmapHook	src/gperftools/malloc_hook.h	/^  inline static PreMmapHook SetPreMmapHook(PreMmapHook hook) {$/;"	f	class:MallocHook
SetPreSbrkHook	src/gperftools/malloc_hook.h	/^  inline static PreSbrkHook SetPreSbrkHook(PreSbrkHook hook) {$/;"	f	class:MallocHook
SetRegionSetKey	src/memory_region_map.h	/^    void SetRegionSetKey(uintptr_t addr) {$/;"	f	struct:MemoryRegionMap::Region
SetSbrkHook	src/gperftools/malloc_hook.h	/^  inline static SbrkHook SetSbrkHook(SbrkHook hook) {$/;"	f	class:MallocHook
SetSystemAllocator	src/malloc_extension.cc	/^void MallocExtension::SetSystemAllocator(SysAllocator *a) {$/;"	f	class:MallocExtension
SetSystemAllocator	src/tcmalloc.cc	/^  virtual void SetSystemAllocator(SysAllocator* alloc) {$/;"	f	class:TCMallocImplementation
SetTestResourceLimit	src/tests/testutil.cc	/^void SetTestResourceLimit() {$/;"	f
SetType	src/page_heap.h	/^  void SetType(int type) { type_ = type; };$/;"	f	class:tcmalloc::PageHeap
SetUp	src/tests/profile-handler_unittest.cc	/^  virtual void SetUp() {$/;"	f	class:__anon28::ProfileHandlerTest
SetUpTestCase	src/tests/profile-handler_unittest.cc	/^  static void SetUpTestCase() {$/;"	f	class:__anon28::ProfileHandlerTest
SetupAtForkLocksHandler	src/static_vars.cc	/^void SetupAtForkLocksHandler()$/;"	f	namespace:tcmalloc
ShellEscape	src/pprof	/^sub ShellEscape {$/;"	s
ShortFunctionName	src/pprof	/^sub ShortFunctionName {$/;"	s
ShortIdFor	src/pprof	/^sub ShortIdFor {$/;"	s
ShouldSymbolize	src/gperftools/heap-checker.h	/^  enum ShouldSymbolize { SYMBOLIZE, DO_NOT_SYMBOLIZE };$/;"	g	class:HeapLeakChecker
ShowSymbolInfo	src/windows/nm-pdb.c	/^static void ShowSymbolInfo(HANDLE process, ULONG64 module_base) {$/;"	f	file:
ShrinkHeap	src/tests/tcmalloc_unittest.cc	/^  void ShrinkHeap() {$/;"	f	class:testing::TesterThread
Shutdown	src/heap-checker.cc	/^  static void Shutdown() {$/;"	f	class:HeapLeakChecker::Allocator
Shutdown	src/memory_region_map.cc	/^bool MemoryRegionMap::Shutdown() {$/;"	f	class:MemoryRegionMap
SideStepError	src/windows/preamble_patcher.h	/^enum SideStepError {$/;"	g	namespace:sidestep
SignalHandler	src/base/linuxthreads.cc	/^static void SignalHandler(int signum, siginfo_t *si, void *data) {$/;"	f	file:
SignalHandler	src/profile-handler.cc	/^void ProfileHandler::SignalHandler(int sig, siginfo_t* sinfo, void* ucontext) {$/;"	f	class:ProfileHandler
Size	src/malloc_extension.cc	/^uintptr_t Size(void** entry) {$/;"	f	namespace:__anon52
Size	src/thread_cache.h	/^  size_t Size() const { return size_; }$/;"	f	class:tcmalloc::ThreadCache
SizeClass	src/common.h	/^  inline int SizeClass(int size) {$/;"	f	class:tcmalloc::SizeMap
SizeFunc	src/tests/addressmap_unittest.cc	/^size_t SizeFunc(const ValueT& v) { return v.second; }$/;"	f
SizeMap	src/common.h	/^  SizeMap() { }$/;"	f	class:tcmalloc::SizeMap
SizeMap	src/common.h	/^class SizeMap {$/;"	c	namespace:tcmalloc
Sizing_Thread_Cache_Free_Lists	doc/tcmalloc.html	/^<h3><A NAME="Sizing_Thread_Cache_Free_Lists">$/;"	a
Skewed	src/tests/tcmalloc_unittest.cc	/^  int Skewed(int max_log) {$/;"	f	class:testing::TestHarness
SkipWhileWhitespace	src/base/sysinfo.cc	/^static void SkipWhileWhitespace(char **text_pointer, int c) {$/;"	f	file:
Sleep	src/tests/malloc_hook_test.cc	/^void Sleep(int seconds) {$/;"	f	namespace:__anon25
SleepForMilliseconds	src/base/sysinfo.cc	/^void SleepForMilliseconds(int milliseconds) {$/;"	f
Slot	src/profiledata.h	/^  typedef uintptr_t Slot;$/;"	t	class:ProfileData
SlowLock	src/base/spinlock.cc	/^void SpinLock::SlowLock() {$/;"	f	class:SpinLock
SlowUnlock	src/base/spinlock.cc	/^void SpinLock::SlowUnlock(uint64 wait_cycles) {$/;"	f	class:SpinLock
SmallSpanStats	src/page_heap.h	/^  struct SmallSpanStats {$/;"	s	class:tcmalloc::PageHeap
Small_Object_Allocation	doc/tcmalloc.html	/^<h2><A NAME="Small_Object_Allocation">Small Object Allocation<\/A><\/h2>$/;"	a
Snapshot	src/heap-profile-table.h	/^  Snapshot(Allocator alloc, DeAllocator dealloc) : map_(alloc, dealloc) {$/;"	f	class:HeapProfileTable::Snapshot
Snapshot	src/heap-profile-table.h	/^class HeapProfileTable::Snapshot {$/;"	c	class:HeapProfileTable
SourceLine	src/pprof	/^sub SourceLine {$/;"	s
Span	src/span.h	/^struct Span {$/;"	s	namespace:tcmalloc
SpanList	src/page_heap.h	/^  struct SpanList {$/;"	s	class:tcmalloc::PageHeap
SpanToMallocResult	src/tcmalloc.cc	/^static inline void* SpanToMallocResult(Span *span) {$/;"	f	file:
Spans	doc/tcmalloc.html	/^<h2><A NAME="Spans">Spans<\/A><\/h2>$/;"	a
SpecificOpcode	src/windows/mini_disassembler_types.h	/^struct SpecificOpcode {$/;"	s	namespace:sidestep
SpinLock	src/base/spinlock.h	/^  SpinLock() : lockword_(kSpinLockFree) { }$/;"	f	class:SpinLock
SpinLock	src/base/spinlock.h	/^  explicit SpinLock(base::LinkerInitialized \/*x*\/) {$/;"	f	class:SpinLock
SpinLock	src/base/spinlock.h	/^class LOCKABLE SpinLock {$/;"	c
SpinLockDelay	src/base/spinlock_linux-inl.h	/^void SpinLockDelay(volatile Atomic32 *w, int32 value, int loop) {$/;"	f	namespace:base::internal
SpinLockDelay	src/base/spinlock_posix-inl.h	/^void SpinLockDelay(volatile Atomic32 *w, int32 value, int loop) {$/;"	f	namespace:base::internal
SpinLockDelay	src/base/spinlock_win32-inl.h	/^void SpinLockDelay(volatile Atomic32 *w, int32 value, int loop) {$/;"	f	namespace:base::internal
SpinLockHolder	src/base/spinlock.h	/^class SCOPED_LOCKABLE SpinLockHolder {$/;"	c
SpinLockHolder	src/base/spinlock.h	143;"	d
SpinLockWait	src/base/spinlock_internal.cc	/^int32 SpinLockWait(volatile Atomic32 *w, int n,$/;"	f	namespace:base::internal
SpinLockWaitTransition	src/base/spinlock_internal.h	/^struct SpinLockWaitTransition {$/;"	s	namespace:base::internal
SpinLockWake	src/base/spinlock_linux-inl.h	/^void SpinLockWake(volatile Atomic32 *w, bool all) {$/;"	f	namespace:base::internal
SpinLockWake	src/base/spinlock_posix-inl.h	/^void SpinLockWake(volatile Atomic32 *w, bool all) {$/;"	f	namespace:base::internal
SpinLockWake	src/base/spinlock_win32-inl.h	/^void SpinLockWake(volatile Atomic32 *w, bool all) {$/;"	f	namespace:base::internal
SpinLock_InitHelper	src/base/spinlock.cc	/^  SpinLock_InitHelper() {$/;"	f	struct:__anon35::SpinLock_InitHelper
SpinLock_InitHelper	src/base/spinlock.cc	/^struct SpinLock_InitHelper {$/;"	s	namespace:__anon35	file:
SpinLoop	src/base/spinlock.cc	/^Atomic32 SpinLock::SpinLoop(int64 initial_wait_timestamp,$/;"	f	class:SpinLock
Split	src/page_heap.cc	/^Span* PageHeap::Split(Span* span, Length n) {$/;"	f	class:tcmalloc::PageHeap
StackDirection	src/heap-checker.cc	/^enum StackDirection {$/;"	g	file:
StackTopSet	src/heap-checker.cc	/^           > StackTopSet;$/;"	t	file:
StackTrace	src/common.h	/^struct StackTrace {$/;"	s	namespace:tcmalloc
StackTraceTable	src/stack_trace_table.cc	/^StackTraceTable::StackTraceTable()$/;"	f	class:tcmalloc::StackTraceTable
StackTraceTable	src/stack_trace_table.h	/^class PERFTOOLS_DLL_DECL StackTraceTable {$/;"	c	namespace:tcmalloc
StacktraceArmDummyFunction	src/stacktrace_arm-inl.h	/^void StacktraceArmDummyFunction() { __asm__ volatile(""); }$/;"	f
StacktracePowerPCDummyFunction	src/stacktrace_powerpc-darwin-inl.h	/^void StacktracePowerPCDummyFunction() { __asm__ volatile(""); }$/;"	f
StacktracePowerPCDummyFunction	src/stacktrace_powerpc-inl.h	/^void StacktracePowerPCDummyFunction() { __asm__ volatile(""); }$/;"	f
StacktracePowerPCDummyFunction	src/stacktrace_powerpc-linux-inl.h	/^void StacktracePowerPCDummyFunction() { __asm__ volatile(""); }$/;"	f
StandardDeviationsErrorInSample	src/tests/sampler_test.cc	/^double StandardDeviationsErrorInSample($/;"	f
Start	src/profiledata.cc	/^bool ProfileData::Start(const char* fname,$/;"	f	class:ProfileData
Start	src/profiler.cc	/^bool CpuProfiler::Start(const char* fname, const ProfilerOptions* options) {$/;"	f	class:CpuProfiler
Start	src/tests/profile-handler_unittest.cc	/^  void Start() {$/;"	f	class:__anon28::Thread
StartLinuxThreadTimer	src/profile-handler.cc	/^static void StartLinuxThreadTimer(int timer_type, int32 frequency, pthread_key_t timer_key) {$/;"	f	file:
StartTimer	src/profile-handler.cc	/^void ProfileHandler::StartTimer() {$/;"	f	class:ProfileHandler
StartWorker	src/tests/profile-handler_unittest.cc	/^  void StartWorker() {$/;"	f	class:__anon28::ProfileHandlerTest
State	src/profiledata.h	/^  struct State {$/;"	s	class:ProfileData
Static	src/static_vars.h	/^class Static {$/;"	c	namespace:tcmalloc
Stats	src/heap-profile-table.h	/^  typedef HeapProfileStats Stats;$/;"	t	class:HeapProfileTable
Stats	src/page_heap.h	/^    Stats() : system_bytes(0), free_bytes(0), unmapped_bytes(0), committed_bytes(0) {}$/;"	f	struct:tcmalloc::PageHeap::Stats
Stats	src/page_heap.h	/^  struct Stats {$/;"	s	class:tcmalloc::PageHeap
StatsCallback	src/debugallocation.cc	/^  static void StatsCallback(const void* ptr, int* type, int dummy) {$/;"	f	class:MallocBlock	file:
Stop	src/profiledata.cc	/^void ProfileData::Stop() {$/;"	f	class:ProfileData
Stop	src/profiler.cc	/^void CpuProfiler::Stop() {$/;"	f	class:CpuProfiler
StopTimer	src/profile-handler.cc	/^void ProfileHandler::StopTimer() {$/;"	f	class:ProfileHandler
StopWorker	src/tests/profile-handler_unittest.cc	/^  void StopWorker() {$/;"	f	class:__anon28::ProfileHandlerTest
StringPrintf	src/tests/sampler_test.cc	/^static std::string StringPrintf(const char* format, ...) {$/;"	f	file:
StringToBool	src/base/commandlineflags.h	/^    inline bool StringToBool(const char *value, bool def) {$/;"	f	namespace:tcmalloc::commandlineflags
StringToDouble	src/base/commandlineflags.h	/^    inline double StringToDouble(const char *value, double def) {$/;"	f	namespace:tcmalloc::commandlineflags
StringToInt	src/base/commandlineflags.h	/^    inline int StringToInt(const char *value, int def) {$/;"	f	namespace:tcmalloc::commandlineflags
StringToInteger	src/base/sysinfo.cc	/^int StringToInteger<int>(char *text, char **endptr, int base) {$/;"	f
StringToInteger	src/base/sysinfo.cc	/^int64 StringToInteger<int64>(char *text, char **endptr, int base) {$/;"	f
StringToInteger	src/base/sysinfo.cc	/^static T StringToInteger(char *text, char **endptr, int base) {$/;"	f	file:
StringToInteger	src/base/sysinfo.cc	/^uint64 StringToInteger<uint64>(char *text, char **endptr, int base) {$/;"	f
StringToIntegerUntilChar	src/base/sysinfo.cc	/^static T StringToIntegerUntilChar($/;"	f	file:
StringToIntegerUntilCharWithCheck	src/base/sysinfo.cc	/^static bool StringToIntegerUntilCharWithCheck($/;"	f	file:
StringToLongLong	src/base/commandlineflags.h	/^    inline long long StringToLongLong(const char *value, long long def) {$/;"	f	namespace:tcmalloc::commandlineflags
SubmitSpinLockProfileData	src/base/synchronization_profiling.h	/^extern void SubmitSpinLockProfileData(const void *contendedlock,$/;"	f	namespace:base
SubtractProfile	src/pprof	/^sub SubtractProfile {$/;"	s
SuggestPprofCommand	src/heap-checker.cc	/^static void SuggestPprofCommand(const char* pprof_file_arg) {$/;"	f	file:
SuggestedDelayNS	src/base/spinlock_internal.cc	/^static int SuggestedDelayNS(int loop) {$/;"	f	namespace:base::internal
SvgJavascript	src/pprof	/^sub SvgJavascript {$/;"	s
SymbolInfo	src/base/elf_mem_image.h	/^  struct SymbolInfo {$/;"	s	class:base::ElfMemImage
SymbolInfo	src/base/vdso_support.h	/^  typedef ElfMemImage::SymbolInfo SymbolInfo;$/;"	t	class:base::VDSOSupport
SymbolIterator	src/base/elf_mem_image.cc	/^ElfMemImage::SymbolIterator::SymbolIterator(const void *const image, int index)$/;"	f	class:base::ElfMemImage::SymbolIterator
SymbolIterator	src/base/elf_mem_image.h	/^  class SymbolIterator {$/;"	c	class:base::ElfMemImage
SymbolIterator	src/base/vdso_support.h	/^  typedef ElfMemImage::SymbolIterator SymbolIterator;$/;"	t	class:base::VDSOSupport
SymbolMap	src/symbolize.h	/^  typedef map<const void*, const char*> SymbolMap;$/;"	t	class:SymbolTable
SymbolMatches	src/pprof	/^sub SymbolMatches {$/;"	s
SymbolPageURL	src/pprof	/^sub SymbolPageURL {$/;"	s
SymbolTable	src/symbolize.h	/^  SymbolTable()$/;"	f	class:SymbolTable
SymbolTable	src/symbolize.h	/^class SymbolTable {$/;"	c
Symbolize	src/symbolize.cc	/^int SymbolTable::Symbolize() {$/;"	f	class:SymbolTable
SysAllocator	src/gperftools/malloc_extension.h	/^  SysAllocator() {$/;"	f	class:SysAllocator
SysAllocator	src/gperftools/malloc_extension.h	/^class PERFTOOLS_DLL_DECL SysAllocator {$/;"	c
SysCalls	src/base/linuxthreads.cc	/^    SysCalls() : my_errno(0) { }$/;"	f	class:__anon39::SysCalls
SysCalls	src/base/linuxthreads.cc	/^  class SysCalls {$/;"	c	namespace:__anon39	file:
TCEntry	src/central_freelist.h	/^  struct TCEntry {$/;"	s	class:tcmalloc::CentralFreeList
TCMALLOC_CC	Makefile	/^TCMALLOC_CC = src\/tcmalloc.cc$/;"	m
TCMALLOC_CENTRAL_FREELIST_H_	src/central_freelist.h	35;"	d
TCMALLOC_COMMON_H_	src/common.h	37;"	d
TCMALLOC_DIR	Makefile	/^TCMALLOC_DIR=.\/.libs$/;"	m
TCMALLOC_DONT_PREFER_LIBUNWIND	src/stacktrace.cc	184;"	d	file:
TCMALLOC_FLAGS	Makefile	/^TCMALLOC_FLAGS = $(am__append_8)$/;"	m
TCMALLOC_INCLUDES	Makefile	/^TCMALLOC_INCLUDES = $(S_TCMALLOC_INCLUDES) $(SG_TCMALLOC_MINIMAL_INCLUDES) \\$/;"	m
TCMALLOC_INTERNAL_LOGGING_H_	src/internal_logging.h	37;"	d
TCMALLOC_LIBC_OVERRIDE_GCC_AND_WEAK_INL_H_	src/libc_override_gcc_and_weak.h	40;"	d
TCMALLOC_LIBC_OVERRIDE_GLIBC_INL_H_	src/libc_override_glibc.h	37;"	d
TCMALLOC_LIBC_OVERRIDE_INL_H_	src/libc_override.h	53;"	d
TCMALLOC_LIBC_OVERRIDE_OSX_INL_H_	src/libc_override_osx.h	73;"	d
TCMALLOC_LIBC_OVERRIDE_REDEFINE_H_	src/libc_override_redefine.h	43;"	d
TCMALLOC_LIBS	Makefile	/^TCMALLOC_LIBS=${TCMALLOC_DIR}\/libtcmalloc.so$/;"	m
TCMALLOC_LINKED_LIST_H_	src/linked_list.h	38;"	d
TCMALLOC_MINIMAL_INCLUDES	Makefile	/^TCMALLOC_MINIMAL_INCLUDES = $(S_TCMALLOC_MINIMAL_INCLUDES) $(SG_TCMALLOC_MINIMAL_INCLUDES) $(SG_STACKTRACE_INCLUDES)$/;"	m
TCMALLOC_PACKED_CACHE_INL_H_	src/packed-cache-inl.h	113;"	d
TCMALLOC_PAGEMAP_H_	src/pagemap.h	47;"	d
TCMALLOC_PAGE_HEAP_ALLOCATOR_H_	src/page_heap_allocator.h	35;"	d
TCMALLOC_PAGE_HEAP_H_	src/page_heap.h	35;"	d
TCMALLOC_SAMPLER_H_	src/sampler.h	37;"	d
TCMALLOC_SO_VERSION	Makefile	/^TCMALLOC_SO_VERSION = 6:6:2$/;"	m
TCMALLOC_SPAN_H_	src/span.h	37;"	d
TCMALLOC_STACK_TRACE_TABLE_H_	src/stack_trace_table.h	37;"	d
TCMALLOC_STATIC_VARS_H_	src/static_vars.h	37;"	d
TCMALLOC_SYMBOLIZE_H_	src/symbolize.h	35;"	d
TCMALLOC_SYSTEM_ALLOC_H_	src/system-alloc.h	38;"	d
TCMALLOC_TCMALLOC_GUARD_H_	src/tcmalloc_guard.h	41;"	d
TCMALLOC_TCMALLOC_H_	src/gperftools/tcmalloc.h	37;"	d
TCMALLOC_TCMALLOC_H_	src/windows/gperftools/tcmalloc.h	37;"	d
TCMALLOC_THREAD_CACHE_H_	src/thread_cache.h	37;"	d
TCMALLOC_TOOLS_TESTUTIL_H_	src/tests/testutil.h	35;"	d
TCMALLOC_USING_DEBUGALLOCATION	src/debugallocation.cc	86;"	d	file:
TCMallocGetenvSafe	src/base/sysinfo.cc	/^  const char* TCMallocGetenvSafe(const char* name) {$/;"	f
TCMallocGuard	src/tcmalloc.cc	/^TCMallocGuard::TCMallocGuard() {$/;"	f	class:TCMallocGuard
TCMallocGuard	src/tcmalloc_guard.h	/^class TCMallocGuard {$/;"	c
TCMallocImplementation	src/tcmalloc.cc	/^  TCMallocImplementation()$/;"	f	class:TCMallocImplementation
TCMallocImplementation	src/tcmalloc.cc	/^class TCMallocImplementation : public MallocExtension {$/;"	c	file:
TCMallocStats	src/tcmalloc.cc	/^struct TCMallocStats {$/;"	s	file:
TCMalloc_ListAllProcessThreads	src/base/linuxthreads.cc	/^int TCMalloc_ListAllProcessThreads(void *parameter,$/;"	f
TCMalloc_ListAllProcessThreads	src/base/thread_lister.c	/^int TCMalloc_ListAllProcessThreads(void *parameter,$/;"	f
TCMalloc_PageMap1	src/pagemap.h	/^  explicit TCMalloc_PageMap1(void* (*allocator)(size_t)) {$/;"	f	class:TCMalloc_PageMap1
TCMalloc_PageMap1	src/pagemap.h	/^class TCMalloc_PageMap1 {$/;"	c
TCMalloc_PageMap2	src/pagemap.h	/^  explicit TCMalloc_PageMap2(void* (*allocator)(size_t)) {$/;"	f	class:TCMalloc_PageMap2
TCMalloc_PageMap2	src/pagemap.h	/^class TCMalloc_PageMap2 {$/;"	c
TCMalloc_PageMap3	src/pagemap.h	/^  explicit TCMalloc_PageMap3(void* (*allocator)(size_t)) {$/;"	f	class:TCMalloc_PageMap3
TCMalloc_PageMap3	src/pagemap.h	/^class TCMalloc_PageMap3 {$/;"	c
TCMalloc_Printer	src/internal_logging.h	/^  TCMalloc_Printer(char* buf, int length) : buf_(buf), left_(length) {$/;"	f	class:TCMalloc_Printer
TCMalloc_Printer	src/internal_logging.h	/^class TCMalloc_Printer {$/;"	c
TCMalloc_ResumeAllProcessThreads	src/base/linuxthreads.cc	/^int TCMalloc_ResumeAllProcessThreads(int num_threads, pid_t *thread_pids) {$/;"	f
TCMalloc_ResumeAllProcessThreads	src/base/thread_lister.c	/^int TCMalloc_ResumeAllProcessThreads(int num_threads, pid_t *thread_pids) {$/;"	f
TCMalloc_SystemAlloc	src/system-alloc.cc	/^void* TCMalloc_SystemAlloc(size_t size, size_t *actual_size,$/;"	f
TCMalloc_SystemAlloc	src/windows/system-alloc.cc	/^void* TCMalloc_SystemAlloc(size_t size, size_t *actual_size,$/;"	f
TCMalloc_SystemCommit	src/system-alloc.cc	/^void TCMalloc_SystemCommit(void* start, size_t length) {$/;"	f
TCMalloc_SystemCommit	src/windows/system-alloc.cc	/^void TCMalloc_SystemCommit(void* start, size_t length) {$/;"	f
TCMalloc_SystemRelease	src/system-alloc.cc	/^bool TCMalloc_SystemRelease(void* start, size_t length) {$/;"	f
TCMalloc_SystemRelease	src/windows/system-alloc.cc	/^bool TCMalloc_SystemRelease(void* start, size_t length) {$/;"	f
TCMalloc_SystemTaken	src/system-alloc.cc	/^size_t TCMalloc_SystemTaken = 0;$/;"	v
TCMalloc_SystemTaken	src/windows/system-alloc.cc	/^size_t TCMalloc_SystemTaken = 0;$/;"	v
TC_VERSION_MAJOR	Makefile	/^TC_VERSION_MAJOR = 2$/;"	m
TC_VERSION_MAJOR	src/gperftools/tcmalloc.h	52;"	d
TC_VERSION_MAJOR	src/windows/gperftools/tcmalloc.h	52;"	d
TC_VERSION_MINOR	Makefile	/^TC_VERSION_MINOR = 4$/;"	m
TC_VERSION_MINOR	src/gperftools/tcmalloc.h	53;"	d
TC_VERSION_MINOR	src/windows/gperftools/tcmalloc.h	53;"	d
TC_VERSION_PATCH	Makefile	/^TC_VERSION_PATCH = $/;"	m
TC_VERSION_PATCH	src/gperftools/tcmalloc.h	54;"	d
TC_VERSION_PATCH	src/windows/gperftools/tcmalloc.h	54;"	d
TC_VERSION_STRING	src/gperftools/tcmalloc.h	55;"	d
TC_VERSION_STRING	src/windows/gperftools/tcmalloc.h	55;"	d
TClass	src/tests/heap-checker_unittest.cc	/^  explicit TClass(int a) : ptr(NULL) { }$/;"	f	class:TClass
TClass	src/tests/heap-checker_unittest.cc	/^class TClass {$/;"	c	file:
TEST	src/tests/debugallocation_test.cc	/^TEST(DebugAllocationTest, CurrentlyAllocated) {$/;"	f
TEST	src/tests/debugallocation_test.cc	/^TEST(DebugAllocationTest, DanglingPointerWriteTest) {$/;"	f
TEST	src/tests/debugallocation_test.cc	/^TEST(DebugAllocationTest, DanglingWriteAtExitTest) {$/;"	f
TEST	src/tests/debugallocation_test.cc	/^TEST(DebugAllocationTest, DeallocMismatch) {$/;"	f
TEST	src/tests/debugallocation_test.cc	/^TEST(DebugAllocationTest, DoubleFree) {$/;"	f
TEST	src/tests/debugallocation_test.cc	/^TEST(DebugAllocationTest, FreeQueueTest) {$/;"	f
TEST	src/tests/debugallocation_test.cc	/^TEST(DebugAllocationTest, GetAllocatedSizeTest) {$/;"	f
TEST	src/tests/debugallocation_test.cc	/^TEST(DebugAllocationTest, HugeAlloc) {$/;"	f
TEST	src/tests/debugallocation_test.cc	/^TEST(DebugAllocationTest, ReallocAfterMemalign) {$/;"	f
TEST	src/tests/debugallocation_test.cc	/^TEST(DebugAllocationTest, StackTraceWithDanglingWriteAtExitTest) {$/;"	f
TEST	src/tests/debugallocation_test.cc	/^TEST(DebugAllocationTest, StompAfter) {$/;"	f
TEST	src/tests/debugallocation_test.cc	/^TEST(DebugAllocationTest, StompBefore) {$/;"	f
TEST	src/tests/debugallocation_test.cc	46;"	d	file:
TEST	src/tests/malloc_hook_test.cc	/^TEST(HookListTest, AddAppends) {$/;"	f	namespace:__anon25
TEST	src/tests/malloc_hook_test.cc	/^TEST(HookListTest, AddPrependsAfterRemove) {$/;"	f	namespace:__anon25
TEST	src/tests/malloc_hook_test.cc	/^TEST(HookListTest, CanRemoveInitialValue) {$/;"	f	namespace:__anon25
TEST	src/tests/malloc_hook_test.cc	/^TEST(HookListTest, FillUpTheList) {$/;"	f	namespace:__anon25
TEST	src/tests/malloc_hook_test.cc	/^TEST(HookListTest, InitialValueExists) {$/;"	f	namespace:__anon25
TEST	src/tests/malloc_hook_test.cc	/^TEST(HookListTest, InvalidAddRejected) {$/;"	f	namespace:__anon25
TEST	src/tests/malloc_hook_test.cc	/^TEST(HookListTest, MultithreadedTest) {$/;"	f	namespace:__anon25
TEST	src/tests/malloc_hook_test.cc	/^TEST(HookListTest, RemoveWorksAndWillClearSize) {$/;"	f	namespace:__anon25
TEST	src/tests/malloc_hook_test.cc	/^TEST(MallocMookTest, MmapReplacements) {$/;"	f	namespace:__anon25
TEST	src/tests/malloc_hook_test.cc	66;"	d	file:
TEST	src/tests/raw_printer_test.cc	/^TEST(RawPrinter, Empty) {$/;"	f
TEST	src/tests/raw_printer_test.cc	/^TEST(RawPrinter, ExactlyFilled) {$/;"	f
TEST	src/tests/raw_printer_test.cc	/^TEST(RawPrinter, PartiallyFilled) {$/;"	f
TEST	src/tests/raw_printer_test.cc	/^TEST(RawPrinter, Truncated) {$/;"	f
TEST	src/tests/raw_printer_test.cc	15;"	d	file:
TEST	src/tests/sampler_test.cc	/^TEST(Sample, size_of_class) {$/;"	f
TEST	src/tests/sampler_test.cc	/^TEST(Sampler, FastLog2) {$/;"	f
TEST	src/tests/sampler_test.cc	/^TEST(Sampler, IsMeanRight) {$/;"	f
TEST	src/tests/sampler_test.cc	/^TEST(Sampler, LargeAndSmallAllocs_CombinedTest) {$/;"	f
TEST	src/tests/sampler_test.cc	/^TEST(Sampler, NextRand_range) {$/;"	f
TEST	src/tests/sampler_test.cc	/^TEST(Sampler, TestGetSamplePeriod) {$/;"	f
TEST	src/tests/sampler_test.cc	/^TEST(Sampler, TestNextRandom_MultipleValues) {$/;"	f
TEST	src/tests/sampler_test.cc	/^TEST(Sampler, TestPickNextSample_MultipleValues) {$/;"	f
TEST	src/tests/sampler_test.cc	/^TEST(Sampler, arithmetic_1) {$/;"	f
TEST	src/tests/sampler_test.cc	/^TEST(Sampler, arithmetic_2) {$/;"	f
TEST	src/tests/sampler_test.cc	/^TEST(Sampler, bytes_until_sample_Overflow_Underflow) {$/;"	f
TEST	src/tests/sampler_test.cc	64;"	d	file:
TESTS	Makefile	/^TESTS = low_level_alloc_unittest$(EXEEXT) atomicops_unittest$(EXEEXT) \\$/;"	m
TESTS_ENVIRONMENT	Makefile	/^TESTS_ENVIRONMENT = $(am__append_18) $(am__append_47)$/;"	m
TEST_EXTENSIONS	Makefile	/^TEST_EXTENSIONS =  .test$/;"	m
TEST_F	src/tests/profile-handler_unittest.cc	/^TEST_F(ProfileHandlerTest, MultipleCallbacks) {$/;"	f	namespace:__anon28
TEST_F	src/tests/profile-handler_unittest.cc	/^TEST_F(ProfileHandlerTest, RegisterCallbackBeforeThread) {$/;"	f	namespace:__anon28
TEST_F	src/tests/profile-handler_unittest.cc	/^TEST_F(ProfileHandlerTest, RegisterUnregisterCallback) {$/;"	f	namespace:__anon28
TEST_F	src/tests/profile-handler_unittest.cc	/^TEST_F(ProfileHandlerTest, Reset) {$/;"	f	namespace:__anon28
TEST_F	src/tests/profile-handler_unittest.cc	30;"	d	file:
TEST_F	src/tests/profiledata_unittest.cc	/^TEST_F(ProfileDataTest, CollectOne) {$/;"	f	namespace:__anon30
TEST_F	src/tests/profiledata_unittest.cc	/^TEST_F(ProfileDataTest, CollectTwoFlush) {$/;"	f	namespace:__anon30
TEST_F	src/tests/profiledata_unittest.cc	/^TEST_F(ProfileDataTest, CollectTwoMatching) {$/;"	f	namespace:__anon30
TEST_F	src/tests/profiledata_unittest.cc	/^TEST_F(ProfileDataTest, OpsWhenStopped) {$/;"	f	namespace:__anon30
TEST_F	src/tests/profiledata_unittest.cc	/^TEST_F(ProfileDataTest, StartResetRestart) {$/;"	f	namespace:__anon30
TEST_F	src/tests/profiledata_unittest.cc	/^TEST_F(ProfileDataTest, StartStopEmpty) {$/;"	f	namespace:__anon30
TEST_F	src/tests/profiledata_unittest.cc	/^TEST_F(ProfileDataTest, StartStopEmpty2) {$/;"	f	namespace:__anon30
TEST_F	src/tests/profiledata_unittest.cc	/^TEST_F(ProfileDataTest, StartStopNoOptionsEmpty) {$/;"	f	namespace:__anon30
TEST_F	src/tests/profiledata_unittest.cc	/^TEST_F(ProfileDataTest, StartWhenStarted) {$/;"	f	namespace:__anon30
TEST_F	src/tests/profiledata_unittest.cc	55;"	d	file:
TEST_LOGS	Makefile	/^TEST_LOGS = $(am__test_logs2:.test.log=.log)$/;"	m
TEST_LOG_COMPILE	Makefile	/^TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \\$/;"	m
TEST_LOG_DRIVER	Makefile	/^TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)\/test-driver$/;"	m
TEST_SUITE_LOG	Makefile	/^TEST_SUITE_LOG = test-suite.log$/;"	m
TH32CS_SNAPMODULE32	src/base/sysinfo.cc	80;"	d	file:
THREADS	src/base/linuxthreads.h	49;"	d
THREAD_ANNOTATION_ATTRIBUTE__	src/base/thread_annotations.h	52;"	d
THREAD_ANNOTATION_ATTRIBUTE__	src/base/thread_annotations.h	54;"	d
THREAD_ATOMICOPS_H_	src/base/atomicops.h	78;"	d
THREAD_DATA	src/heap-checker.cc	/^  THREAD_DATA,       \/\/ Part of a thread stack and a thread descriptor with TLS$/;"	e	enum:ObjectPlacement	file:
THREAD_REGISTERS	src/heap-checker.cc	/^  THREAD_REGISTERS,  \/\/ Values in registers of some thread$/;"	e	enum:ObjectPlacement	file:
THREAD_REGS	src/heap-checker.cc	1015;"	d	file:
THREAD_REGS	src/heap-checker.cc	1017;"	d	file:
TIMERS_ONE_SET	src/profile-handler.cc	/^    TIMERS_ONE_SET,$/;"	e	enum:ProfileHandler::__anon14	file:
TIMERS_SEPARATE	src/profile-handler.cc	/^    TIMERS_SEPARATE$/;"	e	enum:ProfileHandler::__anon14	file:
TIMERS_SHARED	src/profile-handler.cc	/^    TIMERS_SHARED,$/;"	e	enum:ProfileHandler::__anon14	file:
TIMERS_UNTOUCHED	src/profile-handler.cc	/^    TIMERS_UNTOUCHED,$/;"	e	enum:ProfileHandler::__anon14	file:
TOP_STACK	src/stacktrace_powerpc-inl.h	106;"	d
TOP_STACK	src/stacktrace_powerpc-inl.h	113;"	d
T_should_fit_in_AtomicWord	src/malloc_hook-inl.h	/^  COMPILE_ASSERT(sizeof(T) <= sizeof(AtomicWord), T_should_fit_in_AtomicWord);$/;"	m	struct:base::internal::HookList
Tag	src/internal_logging.h	/^  enum Tag {$/;"	g	class:tcmalloc::LogItem
TakeSnapshot	src/heap-profile-table.cc	/^HeapProfileTable::Snapshot* HeapProfileTable::TakeSnapshot() {$/;"	f	class:HeapProfileTable
TearDown	src/tests/profile-handler_unittest.cc	/^  virtual void TearDown() {$/;"	f	class:__anon28::ProfileHandlerTest
TempName	src/pprof	/^sub TempName {$/;"	s
Test	heap-checker-death_unittest.sh	/^Test() {$/;"	f
Test	src/tests/heap-checker-death_unittest.sh	/^Test() {$/;"	f
Test	src/tests/low_level_alloc_unittest.cc	/^static void Test(bool use_new_arena, bool call_malloc_hook, int n) {$/;"	f	file:
TestAggressiveDecommit	src/tests/tcmalloc_unittest.cc	/^static void TestAggressiveDecommit() {$/;"	f	namespace:testing
TestAlignmentForSize	src/tests/tcmalloc_unittest.cc	/^static void TestAlignmentForSize(int size) {$/;"	f	namespace:testing
TestAllocation	src/tests/markidle_unittest.cc	/^static void TestAllocation() {$/;"	f	file:
TestAtomicExchange	src/tests/atomicops_unittest.cc	/^static void TestAtomicExchange(AtomicType (*atomic_exchange_func)$/;"	f	file:
TestAtomicOps	src/tests/atomicops_unittest.cc	/^static void TestAtomicOps() {$/;"	f	file:
TestBasicInvoked	src/tests/system-alloc_unittest.cc	/^static void TestBasicInvoked() {$/;"	f	file:
TestBasicRetryFailTest	src/tests/system-alloc_unittest.cc	/^static void TestBasicRetryFailTest() {$/;"	f	file:
TestCalloc	src/tests/tcmalloc_unittest.cc	/^static void TestCalloc(size_t n, size_t s, bool ok) {$/;"	f	namespace:testing
TestCompareAndSwap	src/tests/atomicops_unittest.cc	/^static void TestCompareAndSwap(AtomicType (*compare_and_swap_func)$/;"	f	file:
TestDeleteHook	src/tests/malloc_extension_c_test.c	/^void TestDeleteHook(const void* ptr) {$/;"	f
TestDisassembler	src/windows/preamble_patcher_test.cc	/^bool TestDisassembler() {$/;"	f	namespace:sidestep
TestDumpHeapProfiler	src/tests/heap-profiler_unittest.cc	/^static void TestDumpHeapProfiler() {$/;"	f	file:
TestHarness	src/tests/tcmalloc_unittest.cc	/^  TestHarness(int seed)$/;"	f	class:testing::TestHarness
TestHarness	src/tests/tcmalloc_unittest.cc	/^class TestHarness {$/;"	c	namespace:testing	file:
TestHeapLeakChecker	src/tests/heap-checker_unittest.cc	/^static void TestHeapLeakChecker() {$/;"	f	file:
TestHeapLeakCheckerDeathCountLess	src/tests/heap-checker_unittest.cc	/^static void TestHeapLeakCheckerDeathCountLess() {$/;"	f	file:
TestHeapLeakCheckerDeathCountMore	src/tests/heap-checker_unittest.cc	/^static void TestHeapLeakCheckerDeathCountMore() {$/;"	f	file:
TestHeapLeakCheckerDeathInverse	src/tests/heap-checker_unittest.cc	/^static void TestHeapLeakCheckerDeathInverse() {$/;"	f	file:
TestHeapLeakCheckerDeathLoop	src/tests/heap-checker_unittest.cc	/^static void TestHeapLeakCheckerDeathLoop() {$/;"	f	file:
TestHeapLeakCheckerDeathNoLeaks	src/tests/heap-checker_unittest.cc	/^static void TestHeapLeakCheckerDeathNoLeaks() {$/;"	f	file:
TestHeapLeakCheckerDeathSimple	src/tests/heap-checker_unittest.cc	/^static void TestHeapLeakCheckerDeathSimple() {$/;"	f	file:
TestHeapLeakCheckerDeathTrick	src/tests/heap-checker_unittest.cc	/^static void TestHeapLeakCheckerDeathTrick() {$/;"	f	file:
TestHeapLeakCheckerDisabling	src/tests/heap-checker_unittest.cc	/^static void TestHeapLeakCheckerDisabling() {$/;"	f	file:
TestHeapLeakCheckerLiveness	src/tests/heap-checker_unittest.cc	/^static void TestHeapLeakCheckerLiveness() {$/;"	f	file:
TestHeapLeakCheckerNoFalsePositives	src/tests/heap-checker_unittest.cc	/^static void TestHeapLeakCheckerNoFalsePositives() {$/;"	f	file:
TestHeapProfilerStartStopIsRunning	src/tests/heap-profiler_unittest.cc	/^static void TestHeapProfilerStartStopIsRunning() {$/;"	f	file:
TestHiddenPointer	src/tests/heap-checker_unittest.cc	/^static void TestHiddenPointer() {$/;"	f	file:
TestHookList	src/tests/malloc_hook_test.cc	/^typedef base::internal::HookList<MallocHook::NewHook> TestHookList;$/;"	t	namespace:__anon25	file:
TestHookList_Add	src/tests/malloc_hook_test.cc	/^bool TestHookList_Add(TestHookList* list, int val) {$/;"	f	namespace:__anon25
TestHookList_Remove	src/tests/malloc_hook_test.cc	/^bool TestHookList_Remove(TestHookList* list, int val) {$/;"	f	namespace:__anon25
TestHookList_Traverse	src/tests/malloc_hook_test.cc	/^int TestHookList_Traverse(const TestHookList& list, uintptr_t* output_array, int n) {$/;"	f	namespace:__anon25
TestHugeAllocations	src/tests/tcmalloc_unittest.cc	/^static void TestHugeAllocations(AllocatorState* rnd) {$/;"	f	namespace:testing
TestHugeThreadCache	src/tests/tcmalloc_unittest.cc	/^static void TestHugeThreadCache() {$/;"	f	namespace:testing
TestIdleUsage	src/tests/markidle_unittest.cc	/^static void TestIdleUsage() {$/;"	f	file:
TestLRand64Spread	src/tests/sampler_test.cc	/^void TestLRand64Spread() {$/;"	f
TestLeakButTotalsMatch	src/tests/heap-checker_unittest.cc	/^static void TestLeakButTotalsMatch() {$/;"	f	file:
TestLibCAllocate	src/tests/heap-checker_unittest.cc	/^static void TestLibCAllocate() {$/;"	f	file:
TestLoad	src/tests/atomicops_unittest.cc	/^static void TestLoad() {$/;"	f	file:
TestMallocAlignment	src/tests/tcmalloc_unittest.cc	/^static void TestMallocAlignment() {$/;"	f	namespace:testing
TestMallocExtension	src/tests/malloc_extension_c_test.c	/^void TestMallocExtension(void) {$/;"	f
TestMallocHook	src/tests/malloc_extension_c_test.c	/^void TestMallocHook(void) {$/;"	f
TestMap	src/tests/pagemap_unittest.cc	/^void TestMap(int limit, bool limit_is_below_the_overflow_boundary) {$/;"	f
TestNew	src/tests/tcmalloc_unittest.cc	/^static void TestNew(void* (*func)(size_t)) {$/;"	f	namespace:testing
TestNewHandler	src/tests/tcmalloc_unittest.cc	/^static void TestNewHandler() throw (std::bad_alloc) {$/;"	f	namespace:testing
TestNewHook	src/tests/malloc_extension_c_test.c	/^void TestNewHook(const void* ptr, size_t size) {$/;"	f
TestNext	src/tests/pagemap_unittest.cc	/^void TestNext(const char* name) {$/;"	f
TestNextRandom	src/tests/sampler_test.cc	/^void TestNextRandom(int n) {$/;"	f
TestNothrowNew	src/tests/tcmalloc_unittest.cc	/^static void TestNothrowNew(void* (*func)(size_t, const std::nothrow_t&)) {$/;"	f	namespace:testing
TestObjMakers	src/tests/heap-checker_unittest.cc	/^static void TestObjMakers() {$/;"	f	file:
TestOneNew	src/tests/tcmalloc_unittest.cc	/^static void TestOneNew(void* (*func)(size_t)) {$/;"	f	namespace:testing
TestOneNothrowNew	src/tests/tcmalloc_unittest.cc	/^static void TestOneNothrowNew(void* (*func)(size_t, const std::nothrow_t&)) {$/;"	f	namespace:testing
TestPageHeap_Limit	src/tests/page_heap_test.cc	/^static void TestPageHeap_Limit() {$/;"	f	namespace:__anon31
TestPageHeap_Stats	src/tests/page_heap_test.cc	/^static void TestPageHeap_Stats() {$/;"	f	namespace:__anon31
TestPatchUsingDynamicStub	src/windows/preamble_patcher_test.cc	/^bool TestPatchUsingDynamicStub() {$/;"	f	namespace:sidestep
TestPatchWithLongJump	src/windows/preamble_patcher_test.cc	/^bool TestPatchWithLongJump() {$/;"	f	namespace:sidestep
TestPatchWithPreambleAbsoluteJump	src/windows/preamble_patcher_test.cc	/^bool TestPatchWithPreambleAbsoluteJump() {$/;"	f	namespace:sidestep
TestPatchWithPreambleNearRelativeCall	src/windows/preamble_patcher_test.cc	/^bool TestPatchWithPreambleNearRelativeCall() {$/;"	f	namespace:sidestep
TestPatchWithPreambleNearRelativeCondJump	src/windows/preamble_patcher_test.cc	/^bool TestPatchWithPreambleNearRelativeCondJump() {$/;"	f	namespace:sidestep
TestPatchWithPreambleShortCondJump	src/windows/preamble_patcher_test.cc	/^bool TestPatchWithPreambleShortCondJump() {$/;"	f	namespace:sidestep
TestPickNextSample	src/tests/sampler_test.cc	/^void TestPickNextSample(int n) {$/;"	f
TestPointerReach	src/tests/heap-checker_unittest.cc	/^static void TestPointerReach(ObjMakerFunc obj_maker) {$/;"	f	file:
TestPreambleAllocation	src/windows/preamble_patcher_test.cc	/^bool TestPreambleAllocation() {$/;"	f	namespace:sidestep
TestRanges	src/tests/tcmalloc_unittest.cc	/^static void TestRanges() {$/;"	f	namespace:testing
TestRealloc	src/tests/tcmalloc_unittest.cc	/^static void TestRealloc() {$/;"	f	namespace:testing
TestReleaseToSystem	src/tests/tcmalloc_unittest.cc	/^static void TestReleaseToSystem() {$/;"	f	namespace:testing
TestSTLAlloc	src/tests/heap-checker_unittest.cc	/^static void TestSTLAlloc() {$/;"	f	file:
TestSTLAllocInverse	src/tests/heap-checker_unittest.cc	/^static void TestSTLAllocInverse() {$/;"	f	file:
TestSetNewMode	src/tests/tcmalloc_unittest.cc	/^static void TestSetNewMode() {$/;"	f	namespace:testing
TestStore	src/tests/atomicops_unittest.cc	/^static void TestStore() {$/;"	f	file:
TesterThread	src/tests/tcmalloc_unittest.cc	/^  TesterThread(int id)$/;"	f	class:testing::TesterThread
TesterThread	src/tests/tcmalloc_unittest.cc	/^class TesterThread {$/;"	c	namespace:testing	file:
Thread	src/tests/profile-handler_unittest.cc	/^  Thread() : joinable_(false) { }$/;"	f	class:__anon28::Thread
Thread	src/tests/profile-handler_unittest.cc	/^class Thread {$/;"	c	namespace:__anon28	file:
ThreadCache	src/thread_cache.h	/^class ThreadCache {$/;"	c	namespace:tcmalloc
ThreadDisabledLeaks	src/tests/heap-checker_unittest.cc	/^static void ThreadDisabledLeaks() {$/;"	f	file:
ThreadLocalData	src/thread_cache.h	/^  struct ThreadLocalData {$/;"	s	class:tcmalloc::ThreadCache
ThreadTimerDestructor	src/profile-handler.cc	/^  static void ThreadTimerDestructor(void *arg) {$/;"	f	file:
TickCounter	src/tests/profile-handler_unittest.cc	/^static void TickCounter(int sig, siginfo_t* sig_info, void *vuc,$/;"	f	namespace:__anon28
TooShortFunction	src/windows/shortproc.asm	/^TooShortFunction PROC$/;"	l
TotalProfile	src/pprof	/^sub TotalProfile {$/;"	s
TraceFd	src/debugallocation.cc	/^static int TraceFd() {$/;"	f	file:
TracePrintf	src/debugallocation.cc	/^static void TracePrintf(int fd, const char *fmt, ...) {$/;"	f	file:
TraceStack	src/debugallocation.cc	/^static void TraceStack(void) {$/;"	f	file:
TransLeaks	src/tests/heap-checker_unittest.cc	/^static void TransLeaks() {$/;"	f	file:
TranslateStack	src/pprof	/^sub TranslateStack {$/;"	s
Traverse	src/malloc_hook.cc	/^int HookList<T>::Traverse(T* output_array, int n) const {$/;"	f	class:base::internal::HookList
TryAllocExpectFail	src/tests/tcmalloc_large_unittest.cc	/^void TryAllocExpectFail(size_t size) {$/;"	f
TryAllocMightFail	src/tests/tcmalloc_large_unittest.cc	/^void TryAllocMightFail(size_t size) {$/;"	f
TryCollectProfile	src/pprof	/^sub TryCollectProfile {$/;"	s
TryHugeAllocation	src/tests/tcmalloc_unittest.cc	/^static void TryHugeAllocation(size_t s, AllocatorState* rnd) {$/;"	f	namespace:testing
TryLock	src/base/simple_mutex.h	/^bool Mutex::TryLock()      { if (mutex_) return false; Lock(); return true; }$/;"	f	class:MUTEX_NAMESPACE::Mutex
TryLock	src/base/simple_mutex.h	/^bool Mutex::TryLock()      { return is_safe_ ?$/;"	f	class:MUTEX_NAMESPACE::Mutex
TstCacheManageSkip	src/tcmalloc.cc	/^TstCacheManageSkip() {$/;"	f	file:
TurnItselfOffLocked	src/heap-checker.cc	/^void HeapLeakChecker::TurnItselfOffLocked() {$/;"	f	class:HeapLeakChecker
Type	src/gperftools/malloc_extension.h	/^  enum Type {$/;"	g	struct:base::MallocRange
Type	src/page_heap.h	/^  typedef TCMalloc_PageMap2<32-kPageShift> Type;$/;"	t	class:tcmalloc::MapSelector
Type	src/page_heap.h	/^  typedef TCMalloc_PageMap3<BITS-kPageShift> Type;$/;"	t	class:tcmalloc::MapSelector
Type	src/tests/tcmalloc_unittest.cc	/^  enum Type { ALLOC, FREE, UPDATE, PASS };$/;"	g	class:testing::TesterThread	file:
Type	src/tests/tcmalloc_unittest.cc	/^  struct Type {$/;"	s	class:testing::TestHarness	file:
UNKNOWN	src/gperftools/malloc_extension.h	/^    UNKNOWN$/;"	e	enum:base::MallocRange::Type
UNKNOWN_DIRECTION	src/heap-checker.cc	/^  UNKNOWN_DIRECTION$/;"	e	enum:StackDirection	file:
UNKNOWN_MAPPING	config_bak.h	310;"	d
UNKNOWN_MAPPING	src/cacheex.h	10;"	d
UNLIKELY	src/common.h	49;"	d
UNLIKELY	src/common.h	52;"	d
UNLOCK_FUNCTION	src/base/thread_annotations.h	127;"	d
UNMAPPED	src/gperftools/malloc_extension.h	/^    UNMAPPED,             \/\/ Backing physical memory has been returned to the OS$/;"	e	enum:base::MallocRange::Type
UNPATCH	src/windows/preamble_patcher_test.cc	63;"	d	file:
UNWIND_LIBS	Makefile	/^UNWIND_LIBS = -lunwind$/;"	m
UNW_LOCAL_ONLY	src/stacktrace_libunwind-inl.h	42;"	d
UPDATE	src/tests/tcmalloc_unittest.cc	/^  enum Type { ALLOC, FREE, UPDATE, PASS };$/;"	e	enum:testing::TesterThread::Type	file:
UPPER	src/packed-cache-inl.h	/^  typedef T UPPER;$/;"	t	class:PackedCache
UPPER_PAGE_ALIGN	src/cacheex.h	29;"	d
USE_NightWatch	src/cacheex.h	5;"	d
USE_RESOURCE	src/tests/testutil.cc	59;"	d	file:
UnHide	src/tests/heap-checker_unittest.cc	/^static void UnHide(T** ptr) {$/;"	f	file:
UnIgnoreObject	src/heap-checker.cc	/^void HeapLeakChecker::UnIgnoreObject(const void* ptr) {$/;"	f	class:HeapLeakChecker
UnhookedMMap	src/malloc_hook.cc	/^\/*static*\/void* MallocHook::UnhookedMMap(void *start, size_t length, int prot,$/;"	f	class:MallocHook
UnhookedMMap	src/malloc_hook_mmap_freebsd.h	/^\/*static*\/void* MallocHook::UnhookedMMap(void *start, size_t length, int prot,$/;"	f	class:MallocHook
UnhookedMMap	src/malloc_hook_mmap_linux.h	/^\/*static*\/void* MallocHook::UnhookedMMap(void *start, size_t length, int prot,$/;"	f	class:MallocHook
UnhookedMUnmap	src/malloc_hook.cc	/^\/*static*\/int MallocHook::UnhookedMUnmap(void *start, size_t length) {$/;"	f	class:MallocHook
UnhookedMUnmap	src/malloc_hook_mmap_freebsd.h	/^\/*static*\/int MallocHook::UnhookedMUnmap(void *start, size_t length) {$/;"	f	class:MallocHook
UnhookedMUnmap	src/malloc_hook_mmap_linux.h	/^\/*static*\/int MallocHook::UnhookedMUnmap(void *start, size_t length) {$/;"	f	class:MallocHook
Uniform	src/tests/addressmap_unittest.cc	/^  size_t Uniform(size_t max_size) {$/;"	f	struct:UniformRandomNumberGenerator
Uniform	src/tests/tcmalloc_unittest.cc	/^  int Uniform(int n) {$/;"	f	class:testing::TestHarness
UniformRandomNumberGenerator	src/tests/addressmap_unittest.cc	/^struct UniformRandomNumberGenerator {$/;"	s	file:
UnitTests	src/windows/preamble_patcher_test.cc	/^bool UnitTests() {$/;"	f	namespace:sidestep
Units	src/pprof	/^sub Units {$/;"	s
Unlock	src/base/simple_mutex.h	/^void Mutex::Unlock()       { SAFE_PTHREAD(pthread_mutex_unlock); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
Unlock	src/base/simple_mutex.h	/^void Mutex::Unlock()       { SAFE_PTHREAD(pthread_rwlock_unlock); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
Unlock	src/base/simple_mutex.h	/^void Mutex::Unlock()       { assert(mutex_++ == -1); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
Unlock	src/base/simple_mutex.h	/^void Mutex::Unlock()       { if (is_safe_) LeaveCriticalSection(&mutex_); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
Unlock	src/base/spinlock.h	/^  inline void Unlock() \/*UNLOCK_FUNCTION()*\/ {$/;"	f	class:SpinLock
Unlock	src/central_freelist.h	/^  void Unlock() {$/;"	f	class:tcmalloc::CentralFreeList
Unlock	src/memory_region_map.cc	/^void MemoryRegionMap::Unlock() {$/;"	f	class:MemoryRegionMap
UnmapSize	src/memory_region_map.h	/^  static int64 UnmapSize() { return unmap_size_; }$/;"	f	class:MemoryRegionMap
Unparse	src/pprof	/^sub Unparse {$/;"	s
UnparseAddress	src/pprof	/^sub UnparseAddress {$/;"	s
UnparseAlt	src/pprof	/^sub UnparseAlt {$/;"	s
UnparseBucket	src/heap-profile-table.cc	/^int HeapProfileTable::UnparseBucket(const Bucket& b,$/;"	f	class:HeapProfileTable
Unpatch	src/windows/patch_functions.cc	/^void LibcInfoWithPatchFunctions<T>::Unpatch() {$/;"	f	class:__anon9::LibcInfoWithPatchFunctions
Unpatch	src/windows/patch_functions.cc	/^void WindowsInfo::Unpatch() {$/;"	f	class:__anon9::WindowsInfo
Unpatch	src/windows/preamble_patcher.cc	/^SideStepError PreamblePatcher::Unpatch(void* target_function,$/;"	f	class:sidestep::PreamblePatcher
UnregisterCallback	src/profile-handler.cc	/^void ProfileHandler::UnregisterCallback(ProfileHandlerToken* token) {$/;"	f	class:ProfileHandler
UnregisterCallback	src/tests/profile-handler_unittest.cc	/^  void UnregisterCallback(ProfileHandlerToken* token) {$/;"	f	class:__anon28::ProfileHandlerTest
Update	src/base/elf_mem_image.cc	/^void ElfMemImage::SymbolIterator::Update(int increment) {$/;"	f	class:base::ElfMemImage::SymbolIterator
UpdateObject	src/tests/tcmalloc_unittest.cc	/^  void UpdateObject() {$/;"	f	class:testing::TesterThread
Usage	doc/tcmalloc.html	/^<h2><A NAME="Usage">Usage<\/A><\/h2>$/;"	a
Usage	src/pprof	/^Usage:$/;"	l
Use	src/tests/heap-checker_unittest.cc	/^static void Use(T** foo) {$/;"	f	file:
UseProcMapsLocked	src/heap-checker.cc	/^HeapLeakChecker::ProcMapsResult HeapLeakChecker::UseProcMapsLocked($/;"	f	class:HeapLeakChecker
V	src/packed-cache-inl.h	/^  typedef size_t V;$/;"	t	class:PackedCache
V	src/tests/profiledata_unittest.cc	/^inline void* V(intptr_t x) { return reinterpret_cast<void*>(x); }$/;"	f	namespace:__anon30
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11	src/third_party/valgrind.h	337;"	d
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11	src/third_party/valgrind.h	402;"	d
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11	src/third_party/valgrind.h	474;"	d
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11	src/third_party/valgrind.h	546;"	d
VALGRIND_CALL_NOREDIR_EAX	src/third_party/valgrind.h	223;"	d
VALGRIND_CALL_NOREDIR_RAX	src/third_party/valgrind.h	277;"	d
VALGRIND_COUNT_ERRORS	src/third_party/valgrind.h	3773;"	d
VALGRIND_CREATE_MEMPOOL	src/third_party/valgrind.h	3826;"	d
VALGRIND_DESTROY_MEMPOOL	src/third_party/valgrind.h	3834;"	d
VALGRIND_DISCARD_TRANSLATIONS	src/third_party/valgrind.h	3652;"	d
VALGRIND_DO_CLIENT_REQUEST	src/third_party/valgrind.h	131;"	d
VALGRIND_DO_CLIENT_REQUEST	src/third_party/valgrind.h	189;"	d
VALGRIND_DO_CLIENT_REQUEST	src/third_party/valgrind.h	243;"	d
VALGRIND_DO_CLIENT_REQUEST	src/third_party/valgrind.h	297;"	d
VALGRIND_DO_CLIENT_REQUEST	src/third_party/valgrind.h	358;"	d
VALGRIND_DO_CLIENT_REQUEST	src/third_party/valgrind.h	424;"	d
VALGRIND_DO_CLIENT_REQUEST	src/third_party/valgrind.h	496;"	d
VALGRIND_FREELIKE_BLOCK	src/third_party/valgrind.h	3818;"	d
VALGRIND_GET_NR_CONTEXT	src/third_party/valgrind.h	210;"	d
VALGRIND_GET_NR_CONTEXT	src/third_party/valgrind.h	264;"	d
VALGRIND_GET_NR_CONTEXT	src/third_party/valgrind.h	323;"	d
VALGRIND_GET_NR_CONTEXT	src/third_party/valgrind.h	381;"	d
VALGRIND_GET_NR_CONTEXT	src/third_party/valgrind.h	451;"	d
VALGRIND_GET_NR_CONTEXT	src/third_party/valgrind.h	523;"	d
VALGRIND_GET_ORIG_FN	src/third_party/valgrind.h	594;"	d
VALGRIND_MALLOCLIKE_BLOCK	src/third_party/valgrind.h	3807;"	d
VALGRIND_MEMPOOL_ALLOC	src/third_party/valgrind.h	3842;"	d
VALGRIND_MEMPOOL_CHANGE	src/third_party/valgrind.h	3874;"	d
VALGRIND_MEMPOOL_EXISTS	src/third_party/valgrind.h	3882;"	d
VALGRIND_MEMPOOL_FREE	src/third_party/valgrind.h	3850;"	d
VALGRIND_MEMPOOL_TRIM	src/third_party/valgrind.h	3858;"	d
VALGRIND_MOVE_MEMPOOL	src/third_party/valgrind.h	3866;"	d
VALGRIND_NON_SIMD_CALL0	src/third_party/valgrind.h	3728;"	d
VALGRIND_NON_SIMD_CALL1	src/third_party/valgrind.h	3738;"	d
VALGRIND_NON_SIMD_CALL2	src/third_party/valgrind.h	3748;"	d
VALGRIND_NON_SIMD_CALL3	src/third_party/valgrind.h	3758;"	d
VALGRIND_PRINTF	src/third_party/valgrind.h	/^VALGRIND_PRINTF(const char *format, ...)$/;"	f
VALGRIND_PRINTF	src/third_party/valgrind.h	3665;"	d
VALGRIND_PRINTF_BACKTRACE	src/third_party/valgrind.h	/^VALGRIND_PRINTF_BACKTRACE(const char *format, ...)$/;"	f
VALGRIND_PRINTF_BACKTRACE	src/third_party/valgrind.h	3666;"	d
VALGRIND_STACK_CHANGE	src/third_party/valgrind.h	3909;"	d
VALGRIND_STACK_DEREGISTER	src/third_party/valgrind.h	3901;"	d
VALGRIND_STACK_REGISTER	src/third_party/valgrind.h	3891;"	d
VDSOInitHelper	src/base/vdso_support.cc	/^  VDSOInitHelper() { VDSOSupport::Init(); }$/;"	f	class:base::VDSOInitHelper
VDSOInitHelper	src/base/vdso_support.cc	/^static class VDSOInitHelper {$/;"	c	namespace:base	file:
VDSOSupport	src/base/vdso_support.cc	/^VDSOSupport::VDSOSupport()$/;"	f	class:base::VDSOSupport
VDSOSupport	src/base/vdso_support.h	/^class VDSOSupport {$/;"	c	namespace:base
VERSION	Makefile	/^VERSION = 2.4$/;"	m
VERSION	config_bak.h	287;"	d
VERSION	src/config.h	287;"	d
VERSION	src/windows/config.h	280;"	d
VERSYM_VERSION	src/base/elf_mem_image.cc	55;"	d	file:
VG_CONTRACT_FRAME_BY	src/third_party/valgrind.h	2462;"	d
VG_CONTRACT_FRAME_BY	src/third_party/valgrind.h	3023;"	d
VG_EXPAND_FRAME_BY_trashes_r3	src/third_party/valgrind.h	2457;"	d
VG_EXPAND_FRAME_BY_trashes_r3	src/third_party/valgrind.h	3018;"	d
VG_IS_TOOL_USERREQ	src/third_party/valgrind.h	3581;"	d
VG_USERREQ_TOOL_BASE	src/third_party/valgrind.h	3579;"	d
VG_USERREQ__CLIENT_CALL0	src/third_party/valgrind.h	/^          VG_USERREQ__CLIENT_CALL0 = 0x1101,$/;"	e	enum:__anon23
VG_USERREQ__CLIENT_CALL1	src/third_party/valgrind.h	/^          VG_USERREQ__CLIENT_CALL1 = 0x1102,$/;"	e	enum:__anon23
VG_USERREQ__CLIENT_CALL2	src/third_party/valgrind.h	/^          VG_USERREQ__CLIENT_CALL2 = 0x1103,$/;"	e	enum:__anon23
VG_USERREQ__CLIENT_CALL3	src/third_party/valgrind.h	/^          VG_USERREQ__CLIENT_CALL3 = 0x1104,$/;"	e	enum:__anon23
VG_USERREQ__COUNT_ERRORS	src/third_party/valgrind.h	/^          VG_USERREQ__COUNT_ERRORS = 0x1201,$/;"	e	enum:__anon23
VG_USERREQ__CREATE_MEMPOOL	src/third_party/valgrind.h	/^          VG_USERREQ__CREATE_MEMPOOL   = 0x1303,$/;"	e	enum:__anon23
VG_USERREQ__DESTROY_MEMPOOL	src/third_party/valgrind.h	/^          VG_USERREQ__DESTROY_MEMPOOL  = 0x1304,$/;"	e	enum:__anon23
VG_USERREQ__DISCARD_TRANSLATIONS	src/third_party/valgrind.h	/^          VG_USERREQ__DISCARD_TRANSLATIONS = 0x1002,$/;"	e	enum:__anon23
VG_USERREQ__FREELIKE_BLOCK	src/third_party/valgrind.h	/^          VG_USERREQ__FREELIKE_BLOCK   = 0x1302,$/;"	e	enum:__anon23
VG_USERREQ__MALLOCLIKE_BLOCK	src/third_party/valgrind.h	/^          VG_USERREQ__MALLOCLIKE_BLOCK = 0x1301,$/;"	e	enum:__anon23
VG_USERREQ__MEMPOOL_ALLOC	src/third_party/valgrind.h	/^          VG_USERREQ__MEMPOOL_ALLOC    = 0x1305,$/;"	e	enum:__anon23
VG_USERREQ__MEMPOOL_CHANGE	src/third_party/valgrind.h	/^          VG_USERREQ__MEMPOOL_CHANGE   = 0x1309,$/;"	e	enum:__anon23
VG_USERREQ__MEMPOOL_EXISTS	src/third_party/valgrind.h	/^          VG_USERREQ__MEMPOOL_EXISTS   = 0x130a,$/;"	e	enum:__anon23
VG_USERREQ__MEMPOOL_FREE	src/third_party/valgrind.h	/^          VG_USERREQ__MEMPOOL_FREE     = 0x1306,$/;"	e	enum:__anon23
VG_USERREQ__MEMPOOL_TRIM	src/third_party/valgrind.h	/^          VG_USERREQ__MEMPOOL_TRIM     = 0x1307,$/;"	e	enum:__anon23
VG_USERREQ__MOVE_MEMPOOL	src/third_party/valgrind.h	/^          VG_USERREQ__MOVE_MEMPOOL     = 0x1308,$/;"	e	enum:__anon23
VG_USERREQ__PRINTF	src/third_party/valgrind.h	/^          VG_USERREQ__PRINTF           = 0x1401,$/;"	e	enum:__anon23
VG_USERREQ__PRINTF_BACKTRACE	src/third_party/valgrind.h	/^          VG_USERREQ__PRINTF_BACKTRACE = 0x1402,$/;"	e	enum:__anon23
VG_USERREQ__RUNNING_ON_VALGRIND	src/third_party/valgrind.h	/^   enum { VG_USERREQ__RUNNING_ON_VALGRIND  = 0x1001,$/;"	e	enum:__anon23
VG_USERREQ__STACK_CHANGE	src/third_party/valgrind.h	/^          VG_USERREQ__STACK_CHANGE     = 0x1503$/;"	e	enum:__anon23
VG_USERREQ__STACK_DEREGISTER	src/third_party/valgrind.h	/^          VG_USERREQ__STACK_DEREGISTER = 0x1502,$/;"	e	enum:__anon23
VG_USERREQ__STACK_REGISTER	src/third_party/valgrind.h	/^          VG_USERREQ__STACK_REGISTER   = 0x1501,$/;"	e	enum:__anon23
VLOG	src/base/logging.h	/^inline void VLOG(int lvl, const char* pat, ...)     { LOG_PRINTF(lvl, pat); }$/;"	f
VLOG	src/tests/heap-checker_unittest.cc	166;"	d	file:
VLOG	src/tests/heap-checker_unittest.cc	167;"	d	file:
VLOG_IS_ON	src/base/logging.h	215;"	d
ValgrindSlowdown	src/base/dynamic_annotations.c	/^double ValgrindSlowdown(void) {$/;"	f
Valid	src/base/sysinfo.cc	/^bool ProcMapsIterator::Valid() const {$/;"	f	class:ProcMapsIterator
Valid	src/tests/memalign_unittest.cc	/^static bool Valid(const void* p, int n, char seed) {$/;"	f	file:
Valid	src/tests/realloc_unittest.cc	/^static bool Valid(unsigned char* buffer, int n) {$/;"	f	file:
ValidateProfile	src/tests/profiledata_unittest.cc	/^string ProfileDataChecker::ValidateProfile() {$/;"	f	class:__anon30::ProfileDataChecker
ValueSizeFunc	src/addressmap-inl.h	/^  typedef size_t (*ValueSizeFunc)(const Value& v);$/;"	t	class:AddressMap
ValueT	src/tests/addressmap_unittest.cc	/^typedef pair<int, size_t> ValueT;$/;"	t	file:
VerifyAcrossThreads	profiler_unittest.sh	/^VerifyAcrossThreads() {$/;"	f
VerifyAcrossThreads	src/tests/profiler_unittest.sh	/^VerifyAcrossThreads() {$/;"	f
VerifyAllMemory	src/debugallocation.cc	/^  virtual bool VerifyAllMemory() {$/;"	f	class:DebugMallocImplementation
VerifyAllMemory	src/malloc_extension.cc	/^bool MallocExtension::VerifyAllMemory() { return true; }$/;"	f	class:MallocExtension
VerifyArrayNewMemory	src/debugallocation.cc	/^  virtual bool VerifyArrayNewMemory(const void* p) {$/;"	f	class:DebugMallocImplementation
VerifyArrayNewMemory	src/malloc_extension.cc	/^bool MallocExtension::VerifyArrayNewMemory(const void* p) { return true; }$/;"	f	class:MallocExtension
VerifyDisabled	src/tests/profile-handler_unittest.cc	/^  void VerifyDisabled() {$/;"	f	class:__anon28::ProfileHandlerTest
VerifyHeapProfileTableStackGet	src/tests/heap-checker_unittest.cc	/^extern void VerifyHeapProfileTableStackGet() {$/;"	f
VerifyIdentical	profiler_unittest.sh	/^VerifyIdentical() {$/;"	f
VerifyIdentical	src/tests/profiler_unittest.sh	/^VerifyIdentical() {$/;"	f
VerifyLeaks	src/tests/heap-checker_unittest.cc	/^static void VerifyLeaks(HeapLeakChecker* check, CheckType type,$/;"	f	file:
VerifyMallocMemory	src/debugallocation.cc	/^  virtual bool VerifyMallocMemory(const void* p) {$/;"	f	class:DebugMallocImplementation
VerifyMallocMemory	src/malloc_extension.cc	/^bool MallocExtension::VerifyMallocMemory(const void* p) { return true; }$/;"	f	class:MallocExtension
VerifyMemFunction	heap-profiler_debug_unittest.sh	/^VerifyMemFunction() {$/;"	f
VerifyMemFunction	heap-profiler_unittest.sh	/^VerifyMemFunction() {$/;"	f
VerifyMemFunction	src/tests/heap-profiler_unittest.sh	/^VerifyMemFunction() {$/;"	f
VerifyMemoryRegionMapStackGet	src/tests/heap-checker_unittest.cc	/^static void VerifyMemoryRegionMapStackGet() {$/;"	f	file:
VerifyNewMemory	src/debugallocation.cc	/^  virtual bool VerifyNewMemory(const void* p) {$/;"	f	class:DebugMallocImplementation
VerifyNewMemory	src/malloc_extension.cc	/^bool MallocExtension::VerifyNewMemory(const void* p) { return true; }$/;"	f	class:MallocExtension
VerifyOutputContains	heap-profiler_debug_unittest.sh	/^VerifyOutputContains() {$/;"	f
VerifyOutputContains	heap-profiler_unittest.sh	/^VerifyOutputContains() {$/;"	f
VerifyOutputContains	src/tests/heap-profiler_unittest.sh	/^VerifyOutputContains() {$/;"	f
VerifyRegistration	src/tests/profile-handler_unittest.cc	/^  void VerifyRegistration(const int& tick_counter) {$/;"	f	class:__anon28::ProfileHandlerTest
VerifySimilar	profiler_unittest.sh	/^VerifySimilar() {$/;"	f
VerifySimilar	src/tests/profiler_unittest.sh	/^VerifySimilar() {$/;"	f
VerifyUnregistration	src/tests/profile-handler_unittest.cc	/^  void VerifyUnregistration(const int& tick_counter) {$/;"	f	class:__anon28::ProfileHandlerTest
Vg_ClientRequest	src/third_party/valgrind.h	/^   } Vg_ClientRequest;$/;"	t	typeref:enum:__anon23
VirtualSysAllocator	src/windows/system-alloc.cc	/^  VirtualSysAllocator() : SysAllocator() {$/;"	f	class:VirtualSysAllocator
VirtualSysAllocator	src/windows/system-alloc.cc	/^class VirtualSysAllocator : public SysAllocator {$/;"	c	file:
VirtualTimerGetterThread	src/tests/profile-handler_unittest.cc	/^  VirtualTimerGetterThread() {$/;"	f	class:__anon28::VirtualTimerGetterThread
VirtualTimerGetterThread	src/tests/profile-handler_unittest.cc	/^class VirtualTimerGetterThread : public Thread {$/;"	c	namespace:__anon28	file:
VoidFunction	src/base/googleinit.h	/^  typedef void (*VoidFunction)(void);$/;"	t	class:GoogleInitializer
WARNING	src/base/logging.h	/^enum LogSeverity {INFO = -1, WARNING = -2, ERROR = -3, FATAL = -4};$/;"	e	enum:LogSeverity
WARN_IF	src/tests/heap-checker_unittest.cc	163;"	d	file:
WEAKEN	Makefile	/^WEAKEN = :$/;"	m
WEBSYM	src/windows/addr2line-pdb.c	49;"	d	file:
WEBSYM	src/windows/nm-pdb.c	60;"	d	file:
WIN32_DO_PATCHING	src/tcmalloc.cc	463;"	d	file:
WIN32_LEAN_AND_MEAN	src/base/simple_mutex.h	114;"	d
WIN32_LEAN_AND_MEAN	src/tests/testutil.cc	104;"	d	file:
WIN32_LEAN_AND_MEAN	src/windows/addr2line-pdb.c	38;"	d	file:
WIN32_LEAN_AND_MEAN	src/windows/nm-pdb.c	38;"	d	file:
WIN32_LEAN_AND_MEAN	src/windows/port.h	54;"	d
WIN32_LEAN_AND_MEAN	src/windows/preamble_patcher_test.cc	46;"	d	file:
WIN32_OVERRIDE_ALLOCATORS	src/windows/config.h	24;"	d
WINDOWS_PROJECTS	Makefile	/^WINDOWS_PROJECTS = gperftools.sln \\$/;"	m
WRITE_TO_STDERR	src/base/logging.h	58;"	d
WRITE_TO_STDERR	src/base/logging.h	61;"	d
WRITE_TO_STDERR	src/base/logging.h	63;"	d
WindowsInfo	src/windows/patch_functions.cc	/^class WindowsInfo {$/;"	c	namespace:__anon9	file:
WipeStack	src/tests/heap-checker_unittest.cc	/^static void WipeStack() { DoWipeStack(20); }$/;"	f	file:
WriteMessage	src/internal_logging.cc	/^static void WriteMessage(const char* msg, int length) {$/;"	f	namespace:tcmalloc
WriteProfile	src/heap-profile-table.cc	/^bool HeapProfileTable::WriteProfile(const char* file_name,$/;"	f	class:HeapProfileTable
WriteStringToFile	src/tests/sampling_test.cc	/^static void WriteStringToFile(const string& s, const string& filename) {$/;"	f	file:
WriteToStderr	src/windows/port.cc	/^extern "C" PERFTOOLS_DLL_DECL void WriteToStderr(const char* buf, int len) {$/;"	f
WriterLock	src/base/simple_mutex.h	/^  inline void WriterLock() { Lock(); }     \/\/ Acquire an exclusive lock$/;"	f	class:MUTEX_NAMESPACE::Mutex
WriterMutexLock	src/base/simple_mutex.h	/^  explicit WriterMutexLock(Mutex *mu) : mu_(mu) { mu_->WriterLock(); }$/;"	f	class:MUTEX_NAMESPACE::WriterMutexLock
WriterMutexLock	src/base/simple_mutex.h	/^class WriterMutexLock {$/;"	c	namespace:MUTEX_NAMESPACE
WriterMutexLock	src/base/simple_mutex.h	324;"	d
WriterUnlock	src/base/simple_mutex.h	/^  inline void WriterUnlock() { Unlock(); } \/\/ Release a lock from WriterLock()$/;"	f	class:MUTEX_NAMESPACE::Mutex
_BASE_LOW_LEVEL_ALLOC_H_	src/base/low_level_alloc.h	33;"	d
_BASICTYPES_H_	src/base/basictypes.h	32;"	d
_CRT_SECURE_NO_DEPRECATE	src/windows/addr2line-pdb.c	40;"	d	file:
_CRT_SECURE_NO_DEPRECATE	src/windows/nm-pdb.c	40;"	d	file:
_CRT_SECURE_NO_WARNINGS	src/windows/addr2line-pdb.c	39;"	d	file:
_CRT_SECURE_NO_WARNINGS	src/windows/nm-pdb.c	39;"	d	file:
_CS_GNU_LIBPTHREAD_VERSION	src/base/sysinfo.cc	521;"	d	file:
_CrtDbgReport	src/windows/override_functions.cc	/^int _CrtDbgReport(int, const char*, int, const char*, const char*, ...) {$/;"	f
_CrtDbgReportW	src/windows/override_functions.cc	/^int _CrtDbgReportW(int, const wchar_t*, int, const wchar_t*, const wchar_t*, ...) {$/;"	f
_CrtSetReportMode	src/windows/override_functions.cc	/^int _CrtSetReportMode(int, int) {$/;"	f
_ELFCORE_H	src/base/elfcore.h	36;"	d
_GNU_SOURCE	src/getpc.h	52;"	d
_GOOGLEINIT_H	src/base/googleinit.h	35;"	d
_LINUXTHREADS_H	src/base/linuxthreads.h	35;"	d
_LOGGING_H_	src/base/logging.h	37;"	d
_LSS_BODY	src/base/linux_syscall_support.h	1071;"	d
_LSS_BODY	src/base/linux_syscall_support.h	1072;"	d
_LSS_RETURN	src/base/linux_syscall_support.h	1059;"	d
_LSS_RETURN	src/base/linux_syscall_support.h	1060;"	d
_MALLOC_EXTENSION_C_H_	src/gperftools/malloc_extension_c.h	40;"	d
_MALLOC_HOOK_C_H_	src/gperftools/malloc_hook_c.h	38;"	d
_MALLOC_HOOK_H_	src/gperftools/malloc_hook.h	68;"	d
_MALLOC_HOOK_INL_H_	src/malloc_hook-inl.h	39;"	d
_SYSINFO_H_	src/base/sysinfo.h	35;"	d
_THREAD_LISTER_H	src/base/thread_lister.h	36;"	d
_WIN32_WINNT	src/base/simple_mutex.h	120;"	d
_WIN32_WINNT	src/windows/config.h	301;"	d
_WIN32_WINNT	src/windows/mingw.h	54;"	d
_XOPEN_SOURCE	src/base/simple_mutex.h	130;"	d
_XOPEN_SOURCE	src/tcmalloc.h	41;"	d
__CALLER_SAVED_REGS	src/third_party/valgrind.h	1019;"	d
__CALLER_SAVED_REGS	src/third_party/valgrind.h	1478;"	d
__CALLER_SAVED_REGS	src/third_party/valgrind.h	1924;"	d
__CALLER_SAVED_REGS	src/third_party/valgrind.h	2448;"	d
__CALLER_SAVED_REGS	src/third_party/valgrind.h	3009;"	d
__CALLER_SAVED_REGS	src/third_party/valgrind.h	621;"	d
__NR__exit	src/base/linux_syscall_support.h	2088;"	d
__NR__gettid	src/base/linux_syscall_support.h	2089;"	d
__NR__mremap	src/base/linux_syscall_support.h	2090;"	d
__NR__sigaction	src/base/linux_syscall_support.h	2277;"	d
__NR__sigprocmask	src/base/linux_syscall_support.h	2278;"	d
__NR_fstat64	src/base/linux_syscall_support.h	535;"	d
__NR_fstat64	src/base/linux_syscall_support.h	579;"	d
__NR_fstat64	src/base/linux_syscall_support.h	615;"	d
__NR_fstat64	src/base/linux_syscall_support.h	681;"	d
__NR_fstatat	src/base/linux_syscall_support.h	630;"	d
__NR_fstatat	src/base/linux_syscall_support.h	647;"	d
__NR_fstatat	src/base/linux_syscall_support.h	664;"	d
__NR_fstatat	src/base/linux_syscall_support.h	704;"	d
__NR_futex	src/base/linux_syscall_support.h	544;"	d
__NR_futex	src/base/linux_syscall_support.h	588;"	d
__NR_futex	src/base/linux_syscall_support.h	596;"	d
__NR_futex	src/base/linux_syscall_support.h	624;"	d
__NR_futex	src/base/linux_syscall_support.h	641;"	d
__NR_futex	src/base/linux_syscall_support.h	658;"	d
__NR_futex	src/base/linux_syscall_support.h	693;"	d
__NR_getcpu	src/base/linux_syscall_support.h	550;"	d
__NR_getcpu	src/base/linux_syscall_support.h	633;"	d
__NR_getcpu	src/base/linux_syscall_support.h	650;"	d
__NR_getcpu	src/base/linux_syscall_support.h	667;"	d
__NR_getcpu	src/base/linux_syscall_support.h	699;"	d
__NR_getdents64	src/base/linux_syscall_support.h	538;"	d
__NR_getdents64	src/base/linux_syscall_support.h	582;"	d
__NR_getdents64	src/base/linux_syscall_support.h	599;"	d
__NR_getdents64	src/base/linux_syscall_support.h	618;"	d
__NR_getdents64	src/base/linux_syscall_support.h	687;"	d
__NR_gettid	src/base/linux_syscall_support.h	541;"	d
__NR_gettid	src/base/linux_syscall_support.h	585;"	d
__NR_gettid	src/base/linux_syscall_support.h	593;"	d
__NR_gettid	src/base/linux_syscall_support.h	621;"	d
__NR_gettid	src/base/linux_syscall_support.h	638;"	d
__NR_gettid	src/base/linux_syscall_support.h	655;"	d
__NR_gettid	src/base/linux_syscall_support.h	690;"	d
__NR_openat	src/base/linux_syscall_support.h	547;"	d
__NR_openat	src/base/linux_syscall_support.h	602;"	d
__NR_openat	src/base/linux_syscall_support.h	627;"	d
__NR_openat	src/base/linux_syscall_support.h	644;"	d
__NR_openat	src/base/linux_syscall_support.h	661;"	d
__NR_openat	src/base/linux_syscall_support.h	696;"	d
__NR_rt_sigaction	src/base/linux_syscall_support.h	528;"	d
__NR_rt_sigaction	src/base/linux_syscall_support.h	572;"	d
__NR_rt_sigaction	src/base/linux_syscall_support.h	608;"	d
__NR_rt_sigaction	src/base/linux_syscall_support.h	674;"	d
__NR_rt_sigprocmask	src/base/linux_syscall_support.h	529;"	d
__NR_rt_sigprocmask	src/base/linux_syscall_support.h	573;"	d
__NR_rt_sigprocmask	src/base/linux_syscall_support.h	609;"	d
__NR_rt_sigprocmask	src/base/linux_syscall_support.h	675;"	d
__NR_socket	src/base/linux_syscall_support.h	684;"	d
__NR_stat64	src/base/linux_syscall_support.h	532;"	d
__NR_stat64	src/base/linux_syscall_support.h	576;"	d
__NR_stat64	src/base/linux_syscall_support.h	612;"	d
__NR_stat64	src/base/linux_syscall_support.h	678;"	d
__SPECIAL_INSTRUCTION_PREAMBLE	src/third_party/valgrind.h	185;"	d
__SPECIAL_INSTRUCTION_PREAMBLE	src/third_party/valgrind.h	239;"	d
__SPECIAL_INSTRUCTION_PREAMBLE	src/third_party/valgrind.h	293;"	d
__SPECIAL_INSTRUCTION_PREAMBLE	src/third_party/valgrind.h	354;"	d
__SPECIAL_INSTRUCTION_PREAMBLE	src/third_party/valgrind.h	420;"	d
__SPECIAL_INSTRUCTION_PREAMBLE	src/third_party/valgrind.h	492;"	d
__STDC_FORMAT_MACROS	config_bak.h	291;"	d
__STDC_FORMAT_MACROS	src/config.h	291;"	d
__STDC_FORMAT_MACROS	src/windows/config.h	284;"	d
__SYS_REG	src/base/linux_syscall_support.h	556;"	d
__SYS_REG	src/base/linux_syscall_support.h	565;"	d
__SYS_REG_LIST	src/base/linux_syscall_support.h	557;"	d
__SYS_REG_LIST	src/base/linux_syscall_support.h	566;"	d
__THROW	src/debugallocation.cc	93;"	d	file:
__THROW	src/gperftools/tcmalloc.h	48;"	d
__THROW	src/libc_override_gcc_and_weak.h	48;"	d
__THROW	src/libc_override_redefine.h	50;"	d
__THROW	src/malloc_hook.cc	69;"	d	file:
__THROW	src/maybe_threads.cc	56;"	d	file:
__THROW	src/tcmalloc.cc	480;"	d	file:
__THROW	src/tcmalloc.h	53;"	d
__THROW	src/windows/gperftools/tcmalloc.h	48;"	d
__THROW	src/windows/patch_functions.cc	/^                                            const std::nothrow_t&) __THROW;$/;"	m	class:__anon9::LibcInfoWithPatchFunctions	file:
__THROW	src/windows/patch_functions.cc	/^                                          const std::nothrow_t&) __THROW;$/;"	m	class:__anon9::LibcInfoWithPatchFunctions	file:
__THROW	src/windows/patch_functions.cc	/^                                       const std::nothrow_t&) __THROW;$/;"	m	class:__anon9::LibcInfoWithPatchFunctions	file:
__THROW	src/windows/patch_functions.cc	/^                                     const std::nothrow_t&) __THROW;$/;"	m	class:__anon9::LibcInfoWithPatchFunctions	file:
__THROW	src/windows/patch_functions.cc	/^  static size_t Perftools__msize(void *ptr) __THROW;$/;"	m	class:__anon9::LibcInfoWithPatchFunctions	file:
__THROW	src/windows/patch_functions.cc	/^  static void Perftools_free(void* ptr) __THROW;$/;"	m	class:__anon9::LibcInfoWithPatchFunctions	file:
__THROW	src/windows/patch_functions.cc	/^  static void* Perftools__expand(void *ptr, size_t size) __THROW;$/;"	m	class:__anon9::LibcInfoWithPatchFunctions	file:
__THROW	src/windows/patch_functions.cc	/^  static void* Perftools_calloc(size_t nmemb, size_t size) __THROW;$/;"	m	class:__anon9::LibcInfoWithPatchFunctions	file:
__THROW	src/windows/patch_functions.cc	/^  static void* Perftools_malloc(size_t size) __THROW;$/;"	m	class:__anon9::LibcInfoWithPatchFunctions	file:
__THROW	src/windows/patch_functions.cc	/^  static void* Perftools_realloc(void* ptr, size_t size) __THROW;$/;"	m	class:__anon9::LibcInfoWithPatchFunctions	file:
__THROW	src/windows/port.h	480;"	d
__VALGRIND_H	src/third_party/valgrind.h	74;"	d
__cyg_profile_func_enter	src/stacktrace_instrument-inl.h	/^void __cyg_profile_func_enter(void *func_address, void *call_site) {$/;"	f
__cyg_profile_func_exit	src/stacktrace_instrument-inl.h	/^void __cyg_profile_func_exit(void *func_address, void *call_site) {$/;"	f
__extension__	src/third_party/valgrind.h	3632;"	d
__free_hook	src/libc_override_glibc.h	/^void (* MALLOC_HOOK_MAYBE_VOLATILE __free_hook)(void*, const void*)$/;"	v
__malloc_hook	src/libc_override_glibc.h	/^void* (* MALLOC_HOOK_MAYBE_VOLATILE __malloc_hook)(size_t, const void*)$/;"	v
__malloctrace_write	src/debugallocation.cc	/^void __malloctrace_write(const char *buf, size_t size) {$/;"	f
__memalign_hook	src/libc_override_glibc.h	/^void* (* MALLOC_HOOK_MAYBE_VOLATILE __memalign_hook)(size_t,size_t, const void*)$/;"	v
__pad0	src/base/linux_syscall_support.h	/^  unsigned           __pad0;$/;"	m	struct:kernel_stat
__pad0	src/base/linux_syscall_support.h	/^  unsigned           __pad0[3];$/;"	m	struct:kernel_stat
__pad0	src/base/linux_syscall_support.h	/^  unsigned char      __pad0[4];$/;"	m	struct:kernel_stat64
__pad1	src/base/linux_syscall_support.h	/^  unsigned           __pad1[3];$/;"	m	struct:kernel_stat
__pad1	src/base/linux_syscall_support.h	/^  unsigned long      __pad1;$/;"	m	struct:kernel_stat
__pad2	src/base/linux_syscall_support.h	/^  int                __pad2;$/;"	m	struct:kernel_stat
__pad2	src/base/linux_syscall_support.h	/^  int                __pad2;$/;"	m	struct:kernel_stat64
__pad2	src/base/linux_syscall_support.h	/^  unsigned           __pad2;$/;"	m	struct:kernel_stat
__pad3	src/base/linux_syscall_support.h	/^  unsigned char      __pad3[4];$/;"	m	struct:kernel_stat64
__realloc_hook	src/libc_override_glibc.h	/^void* (* MALLOC_HOOK_MAYBE_VOLATILE __realloc_hook)(void*, size_t, const void*)$/;"	v
__sbrk	src/windows/port.cc	/^extern "C" PERFTOOLS_DLL_DECL void* __sbrk(ptrdiff_t increment) {$/;"	f
__st_ino	src/base/linux_syscall_support.h	/^  unsigned           __st_ino;$/;"	m	struct:kernel_stat64
__sync_val_compare_and_swap	src/base/atomicops-internals-x86.h	/^inline Atomic64 __sync_val_compare_and_swap(volatile Atomic64* ptr,$/;"	f	namespace:base::subtle
__syscall	src/base/linux_syscall_support.h	558;"	d
__syscall	src/base/linux_syscall_support.h	567;"	d
__syscall_safe	src/base/linux_syscall_support.h	559;"	d
__syscall_safe	src/base/linux_syscall_support.h	568;"	d
__tcmalloc	src/windows/patch_functions.cc	/^void __tcmalloc() { }$/;"	f
__thread	src/windows/port.h	187;"	d
__unused	src/base/linux_syscall_support.h	/^  int64_t            __unused[3];$/;"	m	struct:kernel_stat
__unused4	src/base/linux_syscall_support.h	/^  unsigned           __unused4;$/;"	m	struct:kernel_stat
__unused4	src/base/linux_syscall_support.h	/^  unsigned int       __unused4;$/;"	m	struct:kernel_stat
__unused4	src/base/linux_syscall_support.h	/^  unsigned long      __unused4;$/;"	m	struct:kernel_stat
__unused4	src/base/linux_syscall_support.h	/^  unsigned long      __unused4;$/;"	m	struct:kernel_stat64
__unused5	src/base/linux_syscall_support.h	/^  unsigned           __unused5;$/;"	m	struct:kernel_stat
__unused5	src/base/linux_syscall_support.h	/^  unsigned int       __unused5;$/;"	m	struct:kernel_stat
__unused5	src/base/linux_syscall_support.h	/^  unsigned long      __unused5;$/;"	m	struct:kernel_stat
__unused5	src/base/linux_syscall_support.h	/^  unsigned long      __unused5;$/;"	m	struct:kernel_stat64
__unused6	src/base/linux_syscall_support.h	/^  unsigned long      __unused6;$/;"	m	struct:kernel_stat
__unused6	src/base/linux_syscall_support.h	/^  unsigned long      __unused6;$/;"	m	struct:kernel_stat64
_calloc_dbg	src/windows/override_functions.cc	/^extern "C" void* _calloc_dbg(size_t n, size_t size, int, const char*, int) {$/;"	f
_calloc_impl	src/windows/override_functions.cc	/^extern "C" void* _calloc_impl(size_t n, size_t size) {$/;"	f
_crtheap	src/windows/override_functions.cc	/^extern "C" void* _crtheap = reinterpret_cast<void*>(1);$/;"	v
_free_dbg	src/windows/override_functions.cc	/^extern "C" void _free_dbg(void* ptr, int) {$/;"	f
_get_heap_handle	src/windows/override_functions.cc	/^extern "C" intptr_t _get_heap_handle() {$/;"	f
_heap_init	src/windows/override_functions.cc	/^extern "C" int _heap_init() {$/;"	f
_heap_term	src/windows/override_functions.cc	/^extern "C" void _heap_term() {$/;"	f
_isync	src/base/atomicops-internals-linuxppc.h	/^static inline void _isync(void) {$/;"	f	namespace:base::subtle
_lwsync	src/base/atomicops-internals-linuxppc.h	/^static inline void _lwsync(void) {$/;"	f	namespace:base::subtle
_malloc_dbg	src/windows/override_functions.cc	/^extern "C" void* _malloc_dbg(size_t size, int , const char*, int) {$/;"	f
_msize	src/windows/override_functions.cc	/^extern "C" size_t _msize(void* p) {$/;"	f
_recalloc	src/windows/override_functions.cc	/^extern "C" void* _recalloc(void* p, size_t n, size_t size) {$/;"	f
_set_new_mode	src/windows/override_functions.cc	/^extern "C" int _set_new_mode(int flag) {$/;"	f
_sync	src/base/atomicops-internals-linuxppc.h	/^static inline void _sync(void) {$/;"	f	namespace:base::subtle
_syscall0	src/base/linux_syscall_support.h	1134;"	d
_syscall0	src/base/linux_syscall_support.h	1135;"	d
_syscall0	src/base/linux_syscall_support.h	1307;"	d
_syscall0	src/base/linux_syscall_support.h	1308;"	d
_syscall0	src/base/linux_syscall_support.h	1492;"	d
_syscall0	src/base/linux_syscall_support.h	1493;"	d
_syscall0	src/base/linux_syscall_support.h	1766;"	d
_syscall0	src/base/linux_syscall_support.h	1767;"	d
_syscall0	src/base/linux_syscall_support.h	1979;"	d
_syscall0	src/base/linux_syscall_support.h	1980;"	d
_syscall0	src/base/linux_syscall_support.h	837;"	d
_syscall0	src/base/linux_syscall_support.h	838;"	d
_syscall1	src/base/linux_syscall_support.h	1139;"	d
_syscall1	src/base/linux_syscall_support.h	1140;"	d
_syscall1	src/base/linux_syscall_support.h	1312;"	d
_syscall1	src/base/linux_syscall_support.h	1313;"	d
_syscall1	src/base/linux_syscall_support.h	1498;"	d
_syscall1	src/base/linux_syscall_support.h	1499;"	d
_syscall1	src/base/linux_syscall_support.h	1771;"	d
_syscall1	src/base/linux_syscall_support.h	1772;"	d
_syscall1	src/base/linux_syscall_support.h	1984;"	d
_syscall1	src/base/linux_syscall_support.h	1985;"	d
_syscall1	src/base/linux_syscall_support.h	847;"	d
_syscall1	src/base/linux_syscall_support.h	848;"	d
_syscall2	src/base/linux_syscall_support.h	1144;"	d
_syscall2	src/base/linux_syscall_support.h	1145;"	d
_syscall2	src/base/linux_syscall_support.h	1319;"	d
_syscall2	src/base/linux_syscall_support.h	1320;"	d
_syscall2	src/base/linux_syscall_support.h	1504;"	d
_syscall2	src/base/linux_syscall_support.h	1505;"	d
_syscall2	src/base/linux_syscall_support.h	1776;"	d
_syscall2	src/base/linux_syscall_support.h	1777;"	d
_syscall2	src/base/linux_syscall_support.h	1989;"	d
_syscall2	src/base/linux_syscall_support.h	1990;"	d
_syscall2	src/base/linux_syscall_support.h	854;"	d
_syscall2	src/base/linux_syscall_support.h	855;"	d
_syscall3	src/base/linux_syscall_support.h	1149;"	d
_syscall3	src/base/linux_syscall_support.h	1150;"	d
_syscall3	src/base/linux_syscall_support.h	1328;"	d
_syscall3	src/base/linux_syscall_support.h	1329;"	d
_syscall3	src/base/linux_syscall_support.h	1511;"	d
_syscall3	src/base/linux_syscall_support.h	1512;"	d
_syscall3	src/base/linux_syscall_support.h	1781;"	d
_syscall3	src/base/linux_syscall_support.h	1782;"	d
_syscall3	src/base/linux_syscall_support.h	1995;"	d
_syscall3	src/base/linux_syscall_support.h	1996;"	d
_syscall3	src/base/linux_syscall_support.h	861;"	d
_syscall3	src/base/linux_syscall_support.h	862;"	d
_syscall4	src/base/linux_syscall_support.h	1155;"	d
_syscall4	src/base/linux_syscall_support.h	1156;"	d
_syscall4	src/base/linux_syscall_support.h	1339;"	d
_syscall4	src/base/linux_syscall_support.h	1340;"	d
_syscall4	src/base/linux_syscall_support.h	1518;"	d
_syscall4	src/base/linux_syscall_support.h	1519;"	d
_syscall4	src/base/linux_syscall_support.h	1786;"	d
_syscall4	src/base/linux_syscall_support.h	1787;"	d
_syscall4	src/base/linux_syscall_support.h	2001;"	d
_syscall4	src/base/linux_syscall_support.h	2002;"	d
_syscall4	src/base/linux_syscall_support.h	869;"	d
_syscall4	src/base/linux_syscall_support.h	870;"	d
_syscall5	src/base/linux_syscall_support.h	1161;"	d
_syscall5	src/base/linux_syscall_support.h	1162;"	d
_syscall5	src/base/linux_syscall_support.h	1353;"	d
_syscall5	src/base/linux_syscall_support.h	1354;"	d
_syscall5	src/base/linux_syscall_support.h	1525;"	d
_syscall5	src/base/linux_syscall_support.h	1530;"	d
_syscall5	src/base/linux_syscall_support.h	1552;"	d
_syscall5	src/base/linux_syscall_support.h	1792;"	d
_syscall5	src/base/linux_syscall_support.h	1793;"	d
_syscall5	src/base/linux_syscall_support.h	2008;"	d
_syscall5	src/base/linux_syscall_support.h	2009;"	d
_syscall5	src/base/linux_syscall_support.h	877;"	d
_syscall5	src/base/linux_syscall_support.h	878;"	d
_syscall6	src/base/linux_syscall_support.h	1170;"	d
_syscall6	src/base/linux_syscall_support.h	1171;"	d
_syscall6	src/base/linux_syscall_support.h	1370;"	d
_syscall6	src/base/linux_syscall_support.h	1371;"	d
_syscall6	src/base/linux_syscall_support.h	1562;"	d
_syscall6	src/base/linux_syscall_support.h	1567;"	d
_syscall6	src/base/linux_syscall_support.h	1592;"	d
_syscall6	src/base/linux_syscall_support.h	1799;"	d
_syscall6	src/base/linux_syscall_support.h	1800;"	d
_syscall6	src/base/linux_syscall_support.h	2018;"	d
_syscall6	src/base/linux_syscall_support.h	2019;"	d
_syscall6	src/base/linux_syscall_support.h	895;"	d
_syscall6	src/base/linux_syscall_support.h	896;"	d
_tcmalloc	src/windows/patch_functions.cc	/^void _tcmalloc() { }$/;"	f
_tmain	src/windows/preamble_patcher_test.cc	/^int _tmain(int argc, _TCHAR* argv[])$/;"	f
a	src/tests/system-alloc_unittest.cc	/^ArraySysAllocator a;$/;"	v
abs_builddir	Makefile	/^abs_builddir = \/root\/grt\/tcmalloc\/gperftools-2.4_NW_externed_v2.0$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/root\/grt\/tcmalloc\/gperftools-2.4_NW_externed_v2.0$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/root\/grt\/tcmalloc\/gperftools-2.4_NW_externed_v2.0$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/root\/grt\/tcmalloc\/gperftools-2.4_NW_externed_v2.0$/;"	m
ac_ct_AR	Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_DUMPBIN	Makefile	/^ac_ct_DUMPBIN = $/;"	m
ac_cv_have_struct_mallinfo	Makefile	/^ac_cv_have_struct_mallinfo = 1$/;"	m
ac_fn_c_check_decl	configure	/^ac_fn_c_check_decl ()$/;"	f
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_type	configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
ac_fn_cxx_try_compile	configure	/^ac_fn_cxx_try_compile ()$/;"	f
ac_fn_cxx_try_cpp	configure	/^ac_fn_cxx_try_cpp ()$/;"	f
ac_fn_cxx_try_link	configure	/^ac_fn_cxx_try_link ()$/;"	f
access	src/windows/port.h	/^inline int access(const char *pathname, int mode) {$/;"	f
acx_pthread_config	Makefile	/^acx_pthread_config = $/;"	m
adaptive_spin_count	src/base/spinlock.cc	/^static int adaptive_spin_count = 0;$/;"	v	file:
addr	src/windows/nm-pdb.c	/^  ULONG64 addr;$/;"	m	struct:__anon12	file:
address	src/base/elf_mem_image.h	/^    const void      *address;   \/\/ Relocated symbol address.$/;"	m	struct:base::ElfMemImage::SymbolInfo
address	src/base/stl_allocator.h	/^  const_pointer address(const_reference x) const { return &x; }$/;"	f	class:STL_Allocator
address	src/base/stl_allocator.h	/^  pointer address(reference x) const { return &x; }$/;"	f	class:STL_Allocator
address	src/gperftools/malloc_extension.h	/^  uintptr_t address;    \/\/ Address of range$/;"	m	struct:base::MallocRange
address_default_is_32_bits_	src/windows/mini_disassembler.h	/^  bool address_default_is_32_bits_;$/;"	m	class:sidestep::MiniDisassembler
address_is_32_bits_	src/windows/mini_disassembler.h	/^  bool address_is_32_bits_;$/;"	m	class:sidestep::MiniDisassembler
address_map_	src/heap-profile-table.h	/^  AllocationMap* address_map_;$/;"	m	class:HeapProfileTable
addressmap_unittest_CXXFLAGS	Makefile	/^addressmap_unittest_CXXFLAGS = -g $(AM_CXXFLAGS)$/;"	m
addressmap_unittest_DEPENDENCIES	Makefile	/^addressmap_unittest_DEPENDENCIES = liblogging.la$/;"	m
addressmap_unittest_LDADD	Makefile	/^addressmap_unittest_LDADD = liblogging.la$/;"	m
addressmap_unittest_LINK	Makefile	/^addressmap_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
addressmap_unittest_OBJECTS	Makefile	/^addressmap_unittest_OBJECTS = $(am_addressmap_unittest_OBJECTS)$/;"	m
addressmap_unittest_SOURCES	Makefile	/^addressmap_unittest_SOURCES = src\/tests\/addressmap_unittest.cc \\$/;"	m
aggressive_decommit_	src/page_heap.h	/^  bool aggressive_decommit_;$/;"	m	class:tcmalloc::PageHeap
aix_post_process_depfile	depcomp	/^aix_post_process_depfile ()$/;"	f
align_it	src/memory_region_map.cc	/^  void* align_it;  \/\/ do not need a better alignment for 'rep' than this$/;"	m	union:MemoryRegionMap::RegionSetRep	file:
all_impls	src/stacktrace.cc	/^static GetStackImplementation *all_impls[] = {$/;"	v	file:
alloc	src/tests/tcmalloc_unittest.cc	/^  void* alloc(size_t size) {$/;"	f	class:testing::AllocatorState
alloc_	src/addressmap-inl.h	/^  Allocator     alloc_;                 \/\/ The allocator$/;"	m	class:AddressMap
alloc_	src/heap-profile-table.h	/^  Allocator alloc_;$/;"	m	class:HeapProfileTable
alloc_count	src/heap-checker.cc	/^  static int alloc_count() {$/;"	f	class:HeapLeakChecker::Allocator
alloc_count_	src/heap-checker.cc	/^  static int alloc_count_;$/;"	m	class:HeapLeakChecker::Allocator	file:
alloc_count_	src/heap-checker.cc	/^int HeapLeakChecker::Allocator::alloc_count_ = 0;$/;"	m	class:HeapLeakChecker::Allocator	file:
alloc_map_	src/debugallocation.cc	/^  static AllocMap* alloc_map_;$/;"	m	class:MallocBlock	file:
alloc_map_	src/debugallocation.cc	/^MallocBlock::AllocMap* MallocBlock::alloc_map_ = NULL;$/;"	m	class:MallocBlock	file:
alloc_map_lock_	src/debugallocation.cc	/^  static SpinLock alloc_map_lock_;$/;"	m	class:MallocBlock	file:
alloc_size	src/heap-profile-stats.h	/^  int64 alloc_size;  \/\/ Total size of all allocated objects so far.$/;"	m	struct:HeapProfileStats
alloc_type_	src/debugallocation.cc	/^  size_t alloc_type_;$/;"	m	class:MallocBlock	file:
allocate	src/base/stl_allocator.h	/^  pointer allocate(size_type n, const void* = 0) {$/;"	f	class:STL_Allocator
allocated_	src/addressmap-inl.h	/^  Object*       allocated_;             \/\/ List of allocated objects$/;"	m	class:AddressMap
allocates	src/tests/low_level_alloc_unittest.cc	/^static int32 allocates;$/;"	v	file:
allocation_count	src/base/low_level_alloc.cc	/^  int32 allocation_count; \/\/ count of allocated blocks (under mu)$/;"	m	struct:LowLevelAlloc::Arena	file:
allocator_	src/pagemap.h	/^  void* (*allocator_)(size_t);          \/\/ Memory allocator$/;"	m	class:TCMalloc_PageMap2
allocator_	src/pagemap.h	/^  void* (*allocator_)(size_t);          \/\/ Memory allocator$/;"	m	class:TCMalloc_PageMap3
allocs	src/heap-profile-stats.h	/^  int32 allocs;      \/\/ Number of allocation calls.$/;"	m	struct:HeapProfileStats
allocs_	src/system-alloc.cc	/^  SysAllocator* allocs_[kMaxAllocators];$/;"	m	class:DefaultSysAllocator	file:
allowed	src/profile-handler.h	/^  bool allowed; \/* Profiling is allowed *\/$/;"	m	struct:ProfileHandlerState
allowed_	src/profile-handler.cc	/^  bool allowed_;$/;"	m	class:ProfileHandler	file:
altstack_mem	src/base/linuxthreads.cc	/^  char        *altstack_mem;$/;"	m	struct:ListerParams	file:
am__CONFIG_DISTCLEAN_FILES	Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__DEPENDENCIES_1	Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__DEPENDENCIES_2	Makefile	/^am__DEPENDENCIES_2 =  \\$/;"	m
am__DEPENDENCIES_3	Makefile	/^am__DEPENDENCIES_3 = libtcmalloc_minimal_internal.la \\$/;"	m
am__DEPENDENCIES_4	Makefile	/^am__DEPENDENCIES_4 = $(LIBTCMALLOC) \\$/;"	m
am__EXEEXT_1	Makefile	/^am__EXEEXT_1 = debugallocation_test$(EXEEXT)$/;"	m
am__EXEEXT_10	Makefile	/^am__EXEEXT_10 = system_alloc_unittest$(EXEEXT)$/;"	m
am__EXEEXT_11	Makefile	/^am__EXEEXT_11 = malloc_extension_c_test$(EXEEXT)$/;"	m
am__EXEEXT_12	Makefile	/^am__EXEEXT_12 = memalign_unittest$(EXEEXT)$/;"	m
am__EXEEXT_13	Makefile	/^am__EXEEXT_13 = tcmalloc_minimal_debug_unittest$(EXEEXT) \\$/;"	m
am__EXEEXT_14	Makefile	/^am__EXEEXT_14 = memalign_debug_unittest$(EXEEXT)$/;"	m
am__EXEEXT_15	Makefile	/^am__EXEEXT_15 = realloc_debug_unittest$(EXEEXT)$/;"	m
am__EXEEXT_16	Makefile	/^am__EXEEXT_16 = tcmalloc_both_unittest$(EXEEXT)$/;"	m
am__EXEEXT_17	Makefile	/^am__EXEEXT_17 = tcmalloc_large_unittest$(EXEEXT) \\$/;"	m
am__EXEEXT_18	Makefile	/^am__EXEEXT_18 =  \\$/;"	m
am__EXEEXT_19	Makefile	/^am__EXEEXT_19 = tcmalloc_debug_unittest$(EXEEXT) \\$/;"	m
am__EXEEXT_2	Makefile	/^am__EXEEXT_2 = tcmalloc_unittest$(EXEEXT) \\$/;"	m
am__EXEEXT_20	Makefile	/^am__EXEEXT_20 = getpc_test$(EXEEXT) \\$/;"	m
am__EXEEXT_21	Makefile	/^am__EXEEXT_21 = tcmalloc_and_profiler_unittest$(EXEEXT)$/;"	m
am__EXEEXT_22	Makefile	/^am__EXEEXT_22 = low_level_alloc_unittest$(EXEEXT) \\$/;"	m
am__EXEEXT_3	Makefile	/^am__EXEEXT_3 =  \\$/;"	m
am__EXEEXT_4	Makefile	/^am__EXEEXT_4 = heap-checker_unittest$(EXEEXT)$/;"	m
am__EXEEXT_5	Makefile	/^am__EXEEXT_5 = sampling_debug_test$(EXEEXT)$/;"	m
am__EXEEXT_6	Makefile	/^am__EXEEXT_6 = heap-profiler_debug_unittest$(EXEEXT)$/;"	m
am__EXEEXT_7	Makefile	/^am__EXEEXT_7 = heap-checker_debug_unittest$(EXEEXT)$/;"	m
am__EXEEXT_8	Makefile	/^am__EXEEXT_8 = profiler1_unittest$(EXEEXT) \\$/;"	m
am__EXEEXT_9	Makefile	/^am__EXEEXT_9 = stacktrace_unittest$(EXEEXT)$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/ac_have_attribute.m4 \\$/;"	m
am__addressmap_unittest_SOURCES_DIST	Makefile	/^am__addressmap_unittest_SOURCES_DIST =  \\$/;"	m
am__append_12	Makefile	/^am__append_12 = libspinlock.la$/;"	m
am__append_13	Makefile	/^am__append_13 = src\/maybe_threads.cc$/;"	m
am__append_14	Makefile	/^am__append_14 = $(SG_STACKTRACE_INCLUDES)$/;"	m
am__append_15	Makefile	/^am__append_15 = libstacktrace.la$/;"	m
am__append_16	Makefile	/^am__append_16 = stacktrace_unittest$/;"	m
am__append_17	Makefile	/^am__append_17 = doc\/pprof_remote_servers.html$/;"	m
am__append_18	Makefile	/^am__append_18 = PPROF_PATH=$(top_srcdir)\/src\/pprof$/;"	m
am__append_19	Makefile	/^am__append_19 =  \\$/;"	m
am__append_2	Makefile	/^am__append_2 = -Wall -Wwrite-strings -Woverloaded-virtual \\$/;"	m
am__append_23	Makefile	/^am__append_23 = system_alloc_unittest$/;"	m
am__append_24	Makefile	/^am__append_24 = malloc_extension_c_test$/;"	m
am__append_25	Makefile	/^am__append_25 = -ansi$/;"	m
am__append_26	Makefile	/^am__append_26 = memalign_unittest$/;"	m
am__append_27	Makefile	/^am__append_27 = libtcmalloc_minimal_debug.la$/;"	m
am__append_28	Makefile	/^am__append_28 = libtcmalloc_minimal_debug.la$/;"	m
am__append_29	Makefile	/^am__append_29 = tcmalloc_minimal_debug_unittest \\$/;"	m
am__append_3	Makefile	/^am__append_3 = -fno-builtin$/;"	m
am__append_30	Makefile	/^am__append_30 = memalign_debug_unittest$/;"	m
am__append_31	Makefile	/^am__append_31 = realloc_debug_unittest$/;"	m
am__append_32	Makefile	/^am__append_32 = debugallocation_test.sh$(EXEEXT)$/;"	m
am__append_33	Makefile	/^am__append_33 = $(debugallocation_test_sh_SOURCES)$/;"	m
am__append_34	Makefile	/^am__append_34 = debugallocation_test$/;"	m
am__append_35	Makefile	/^am__append_35 = $(SG_TCMALLOC_INCLUDES)$/;"	m
am__append_36	Makefile	/^am__append_36 = libtcmalloc_internal.la$/;"	m
am__append_37	Makefile	/^am__append_37 = libtcmalloc.la$/;"	m
am__append_38	Makefile	/^am__append_38 = $(HEAP_CHECKER_SOURCES)$/;"	m
am__append_41	Makefile	/^am__append_41 = libtcmalloc.la$/;"	m
am__append_42	Makefile	/^am__append_42 = tcmalloc_unittest.sh$(EXEEXT)$/;"	m
am__append_43	Makefile	/^am__append_43 = $(tcmalloc_unittest_sh_SOURCES) \\$/;"	m
am__append_44	Makefile	/^am__append_44 = tcmalloc_unittest \\$/;"	m
am__append_45	Makefile	/^am__append_45 = tcmalloc_both_unittest$/;"	m
am__append_46	Makefile	/^am__append_46 =  \\$/;"	m
am__append_47	Makefile	/^am__append_47 = TCMALLOC_SAMPLE_PARAMETER=524288 \\$/;"	m
am__append_48	Makefile	/^am__append_48 = vsprojects\/sampler_test\/sampler_test.vcproj$/;"	m
am__append_49	Makefile	/^am__append_49 =  \\$/;"	m
am__append_5	Makefile	/^am__append_5 = -Wno-unused-result$/;"	m
am__append_50	Makefile	/^am__append_50 = $(heap_profiler_unittest_sh_SOURCES)$/;"	m
am__append_51	Makefile	/^am__append_51 = heap-profiler_unittest$/;"	m
am__append_52	Makefile	/^am__append_52 =  \\$/;"	m
am__append_53	Makefile	/^am__append_53 =  \\$/;"	m
am__append_54	Makefile	/^am__append_54 = heap-checker_unittest$/;"	m
am__append_55	Makefile	/^am__append_55 = doc\/heapprofile.html doc\/heap-example1.png$/;"	m
am__append_56	Makefile	/^am__append_56 = doc\/heap_checker.html$/;"	m
am__append_57	Makefile	/^am__append_57 = libtcmalloc_debug.la$/;"	m
am__append_58	Makefile	/^am__append_58 = libtcmalloc_debug.la$/;"	m
am__append_59	Makefile	/^am__append_59 = tcmalloc_debug_unittest \\$/;"	m
am__append_60	Makefile	/^am__append_60 = sampling_debug_test$/;"	m
am__append_61	Makefile	/^am__append_61 = heap-profiler_debug_unittest.sh$(EXEEXT)$/;"	m
am__append_62	Makefile	/^am__append_62 = heap-profiler_debug_unittest$/;"	m
am__append_63	Makefile	/^am__append_63 = heap-checker_debug_unittest.sh$(EXEEXT)$/;"	m
am__append_64	Makefile	/^am__append_64 = heap-checker_debug_unittest$/;"	m
am__append_65	Makefile	/^am__append_65 = $(SG_CPU_PROFILER_INCLUDES)$/;"	m
am__append_66	Makefile	/^am__append_66 = libprofiler.la$/;"	m
am__append_67	Makefile	/^am__append_67 = getpc_test \\$/;"	m
am__append_68	Makefile	/^am__append_68 = $(profiler_unittest_sh_SOURCES)$/;"	m
am__append_69	Makefile	/^am__append_69 = profiler1_unittest profiler2_unittest profiler3_unittest \\$/;"	m
am__append_7	Makefile	/^am__append_7 = -DNO_FRAME_POINTER$/;"	m
am__append_70	Makefile	/^am__append_70 = doc\/cpuprofile.html \\$/;"	m
am__append_71	Makefile	/^am__append_71 = libtcmalloc_and_profiler.la$/;"	m
am__append_72	Makefile	/^am__append_72 = tcmalloc_and_profiler_unittest$/;"	m
am__append_73	Makefile	/^am__append_73 = libtcmalloc_and_profiler.la$/;"	m
am__base_list	Makefile	/^am__base_list = \\$/;"	m
am__can_run_installinfo	Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__check_pre	Makefile	/^am__check_pre = \\$/;"	m
am__common_driver_flags	Makefile	/^am__common_driver_flags = \\$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__copy_in_global_log_rx	Makefile	/^am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*$/;"	m
am__create_global_log	Makefile	/^am__create_global_log = $(AWK) ' \\$/;"	m
am__debugallocation_test_SOURCES_DIST	Makefile	/^am__debugallocation_test_SOURCES_DIST =  \\$/;"	m
am__debugallocation_test_sh_SOURCES_DIST	Makefile	/^am__debugallocation_test_sh_SOURCES_DIST =  \\$/;"	m
am__define_uniq_tagged_files	Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__dirstamp	Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__dist_doc_DATA_DIST	Makefile	/^am__dist_doc_DATA_DIST = AUTHORS COPYING ChangeLog INSTALL NEWS README \\$/;"	m
am__distuninstallcheck_listfiles	Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__getpc_test_SOURCES_DIST	Makefile	/^am__getpc_test_SOURCES_DIST = src\/tests\/getpc_test.cc src\/getpc.h$/;"	m
am__global_test_result_rx	Makefile	/^am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*$/;"	m
am__heap_checker_death_unittest_sh_SOURCES_DIST	Makefile	/^am__heap_checker_death_unittest_sh_SOURCES_DIST =  \\$/;"	m
am__heap_checker_debug_unittest_SOURCES_DIST	Makefile	/^am__heap_checker_debug_unittest_SOURCES_DIST =  \\$/;"	m
am__heap_checker_debug_unittest_sh_SOURCES_DIST	Makefile	/^am__heap_checker_debug_unittest_sh_SOURCES_DIST =  \\$/;"	m
am__heap_checker_unittest_SOURCES_DIST	Makefile	/^am__heap_checker_unittest_SOURCES_DIST =  \\$/;"	m
am__heap_checker_unittest_sh_SOURCES_DIST	Makefile	/^am__heap_checker_unittest_sh_SOURCES_DIST =  \\$/;"	m
am__heap_profiler_debug_unittest_SOURCES_DIST	Makefile	/^am__heap_profiler_debug_unittest_SOURCES_DIST =  \\$/;"	m
am__heap_profiler_debug_unittest_sh_SOURCES_DIST	Makefile	/^am__heap_profiler_debug_unittest_sh_SOURCES_DIST =  \\$/;"	m
am__heap_profiler_unittest_SOURCES_DIST	Makefile	/^am__heap_profiler_unittest_SOURCES_DIST =  \\$/;"	m
am__heap_profiler_unittest_sh_SOURCES_DIST	Makefile	/^am__heap_profiler_unittest_sh_SOURCES_DIST =  \\$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__install_max	Makefile	/^am__install_max = 40$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" \\$/;"	m
am__is_gnu_make	Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__libmaybe_threads_la_SOURCES_DIST	Makefile	/^am__libmaybe_threads_la_SOURCES_DIST = src\/maybe_threads.h \\$/;"	m
am__libprofiler_la_SOURCES_DIST	Makefile	/^am__libprofiler_la_SOURCES_DIST = src\/profiler.cc \\$/;"	m
am__libspinlock_la_SOURCES_DIST	Makefile	/^am__libspinlock_la_SOURCES_DIST = src\/base\/spinlock.cc \\$/;"	m
am__libstacktrace_la_SOURCES_DIST	Makefile	/^am__libstacktrace_la_SOURCES_DIST = src\/stacktrace.cc \\$/;"	m
am__libtcmalloc_and_profiler_la_SOURCES_DIST	Makefile	/^am__libtcmalloc_and_profiler_la_SOURCES_DIST = src\/tcmalloc.cc \\$/;"	m
am__libtcmalloc_debug_la_SOURCES_DIST	Makefile	/^am__libtcmalloc_debug_la_SOURCES_DIST = src\/debugallocation.cc \\$/;"	m
am__libtcmalloc_internal_la_SOURCES_DIST	Makefile	/^am__libtcmalloc_internal_la_SOURCES_DIST = src\/common.cc \\$/;"	m
am__libtcmalloc_la_SOURCES_DIST	Makefile	/^am__libtcmalloc_la_SOURCES_DIST = src\/tcmalloc.cc src\/common.h \\$/;"	m
am__libtcmalloc_minimal_debug_la_SOURCES_DIST	Makefile	/^am__libtcmalloc_minimal_debug_la_SOURCES_DIST =  \\$/;"	m
am__libtcmalloc_minimal_internal_la_SOURCES_DIST	Makefile	/^am__libtcmalloc_minimal_internal_la_SOURCES_DIST = src\/common.cc \\$/;"	m
am__libtcmalloc_minimal_la_SOURCES_DIST	Makefile	/^am__libtcmalloc_minimal_la_SOURCES_DIST = src\/tcmalloc.cc src\/common.h \\$/;"	m
am__libwindows_la_SOURCES_DIST	Makefile	/^am__libwindows_la_SOURCES_DIST = src\/windows\/port.h \\$/;"	m
am__list_recheck_tests	Makefile	/^am__list_recheck_tests = $(AWK) '{ \\$/;"	m
am__low_level_alloc_unittest_SOURCES_DIST	Makefile	/^am__low_level_alloc_unittest_SOURCES_DIST =  \\$/;"	m
am__make_dryrun	Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	Makefile	/^am__make_running_with_option = \\$/;"	m
am__malloc_extension_c_test_SOURCES_DIST	Makefile	/^am__malloc_extension_c_test_SOURCES_DIST =  \\$/;"	m
am__malloc_extension_debug_test_SOURCES_DIST	Makefile	/^am__malloc_extension_debug_test_SOURCES_DIST =  \\$/;"	m
am__maybe_threads_unittest_sh_SOURCES_DIST	Makefile	/^am__maybe_threads_unittest_sh_SOURCES_DIST =  \\$/;"	m
am__memalign_debug_unittest_SOURCES_DIST	Makefile	/^am__memalign_debug_unittest_SOURCES_DIST =  \\$/;"	m
am__memalign_unittest_SOURCES_DIST	Makefile	/^am__memalign_unittest_SOURCES_DIST = src\/tests\/memalign_unittest.cc \\$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__nobase_list	Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__objects_1	Makefile	/^am__objects_1 =$/;"	m
am__objects_10	Makefile	/^am__objects_10 = $(am__objects_9) \\$/;"	m
am__objects_11	Makefile	/^am__objects_11 = src\/base\/thread_lister.lo \\$/;"	m
am__objects_12	Makefile	/^am__objects_12 = $(am__objects_11)$/;"	m
am__objects_13	Makefile	/^am__objects_13 =  \\$/;"	m
am__objects_14	Makefile	/^am__objects_14 = src\/base\/thread_lister.lo \\$/;"	m
am__objects_15	Makefile	/^am__objects_15 = $(am__objects_14)$/;"	m
am__objects_16	Makefile	/^am__objects_16 =  \\$/;"	m
am__objects_17	Makefile	/^am__objects_17 = src\/libtcmalloc_and_profiler_la-profiler.lo \\$/;"	m
am__objects_18	Makefile	/^am__objects_18 = src\/base\/thread_lister.lo \\$/;"	m
am__objects_19	Makefile	/^am__objects_19 =  \\$/;"	m
am__objects_20	Makefile	/^am__objects_20 = $(am__objects_8) $(am__objects_1) $(am__objects_1)$/;"	m
am__objects_21	Makefile	/^am__objects_21 = src\/libtcmalloc_internal_la-common.lo \\$/;"	m
am__objects_22	Makefile	/^am__objects_22 = src\/libtcmalloc_minimal_la-tcmalloc.lo$/;"	m
am__objects_23	Makefile	/^am__objects_23 = src\/libtcmalloc_minimal_internal_la-system-alloc.lo$/;"	m
am__objects_25	Makefile	/^am__objects_25 = $(am__objects_1)$/;"	m
am__objects_26	Makefile	/^am__objects_26 = src\/tests\/heap_checker_debug_unittest-heap-checker_unittest.$(OBJEXT) \\$/;"	m
am__objects_27	Makefile	/^am__objects_27 = src\/tests\/heap_profiler_debug_unittest-heap-profiler_unittest.$(OBJEXT) \\$/;"	m
am__objects_28	Makefile	/^am__objects_28 = $(am__objects_1) $(am__objects_1)$/;"	m
am__objects_29	Makefile	/^am__objects_29 = src\/tests\/malloc_extension_debug_test-malloc_extension_test.$(OBJEXT)$/;"	m
am__objects_3	Makefile	/^am__objects_3 = src\/maybe_threads.lo$/;"	m
am__objects_30	Makefile	/^am__objects_30 = src\/tests\/memalign_debug_unittest-memalign_unittest.$(OBJEXT) \\$/;"	m
am__objects_31	Makefile	/^am__objects_31 = src\/tests\/profiler1_unittest-profiler_unittest.$(OBJEXT) \\$/;"	m
am__objects_32	Makefile	/^am__objects_32 = src\/tests\/profiler2_unittest-profiler_unittest.$(OBJEXT) \\$/;"	m
am__objects_33	Makefile	/^am__objects_33 = src\/tests\/profiler3_unittest-profiler_unittest.$(OBJEXT) \\$/;"	m
am__objects_34	Makefile	/^am__objects_34 = src\/tests\/profiler4_unittest-profiler_unittest.$(OBJEXT) \\$/;"	m
am__objects_35	Makefile	/^am__objects_35 =  \\$/;"	m
am__objects_36	Makefile	/^am__objects_36 = src\/tests\/sampler_debug_test-sampler_test.$(OBJEXT)$/;"	m
am__objects_37	Makefile	/^am__objects_37 = src\/tests\/sampling_debug_test-sampling_test.$(OBJEXT) \\$/;"	m
am__objects_38	Makefile	/^am__objects_38 = $(am__objects_6) \\$/;"	m
am__objects_39	Makefile	/^am__objects_39 = src\/tests\/tcmalloc_and_profiler_unittest-tcmalloc_unittest.$(OBJEXT) \\$/;"	m
am__objects_4	Makefile	/^am__objects_4 = $(am__objects_1) \\$/;"	m
am__objects_40	Makefile	/^am__objects_40 = src\/tests\/tcmalloc_both_unittest-tcmalloc_unittest.$(OBJEXT) \\$/;"	m
am__objects_41	Makefile	/^am__objects_41 = src\/tests\/tcmalloc_debug_unittest-tcmalloc_unittest.$(OBJEXT) \\$/;"	m
am__objects_42	Makefile	/^am__objects_42 = src\/tests\/tcmalloc_minimal_debug_unittest-tcmalloc_unittest.$(OBJEXT) \\$/;"	m
am__objects_5	Makefile	/^am__objects_5 = $(am__objects_4) \\$/;"	m
am__objects_6	Makefile	/^am__objects_6 = $(am__objects_1) \\$/;"	m
am__objects_7	Makefile	/^am__objects_7 = src\/libtcmalloc_la-tcmalloc.lo$/;"	m
am__objects_8	Makefile	/^am__objects_8 = $(am__objects_1)$/;"	m
am__objects_9	Makefile	/^am__objects_9 = $(am__objects_8) \\$/;"	m
am__perftoolsinclude_HEADERS_DIST	Makefile	/^am__perftoolsinclude_HEADERS_DIST = src\/gperftools\/stacktrace.h \\$/;"	m
am__post_remove_distdir	Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__profile_handler_unittest_SOURCES_DIST	Makefile	/^am__profile_handler_unittest_SOURCES_DIST =  \\$/;"	m
am__profiledata_unittest_SOURCES_DIST	Makefile	/^am__profiledata_unittest_SOURCES_DIST =  \\$/;"	m
am__profiler1_unittest_SOURCES_DIST	Makefile	/^am__profiler1_unittest_SOURCES_DIST = src\/tests\/profiler_unittest.cc \\$/;"	m
am__profiler2_unittest_SOURCES_DIST	Makefile	/^am__profiler2_unittest_SOURCES_DIST = src\/tests\/profiler_unittest.cc \\$/;"	m
am__profiler3_unittest_SOURCES_DIST	Makefile	/^am__profiler3_unittest_SOURCES_DIST = src\/tests\/profiler_unittest.cc \\$/;"	m
am__profiler4_unittest_SOURCES_DIST	Makefile	/^am__profiler4_unittest_SOURCES_DIST = src\/tests\/profiler_unittest.cc \\$/;"	m
am__profiler_unittest_sh_SOURCES_DIST	Makefile	/^am__profiler_unittest_sh_SOURCES_DIST =  \\$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__raw_printer_test_SOURCES_DIST	Makefile	/^am__raw_printer_test_SOURCES_DIST = src\/tests\/raw_printer_test.cc$/;"	m
am__realloc_debug_unittest_SOURCES_DIST	Makefile	/^am__realloc_debug_unittest_SOURCES_DIST =  \\$/;"	m
am__recheck_rx	Makefile	/^am__recheck_rx = ^[ 	]*:recheck:[ 	]*$/;"	m
am__remove_distdir	Makefile	/^am__remove_distdir = \\$/;"	m
am__rst_title	Makefile	/^am__rst_title = { sed 's\/.*\/   &   \/;h;s\/.\/=\/g;p;x;s\/ *$$\/\/;p;g' && echo; }$/;"	m
am__sampler_debug_test_SOURCES_DIST	Makefile	/^am__sampler_debug_test_SOURCES_DIST = src\/tests\/sampler_test.cc \\$/;"	m
am__sampler_test_SOURCES_DIST	Makefile	/^am__sampler_test_SOURCES_DIST = src\/tests\/sampler_test.cc \\$/;"	m
am__sampling_debug_test_SOURCES_DIST	Makefile	/^am__sampling_debug_test_SOURCES_DIST = src\/tests\/sampling_test.cc \\$/;"	m
am__sampling_debug_test_sh_SOURCES_DIST	Makefile	/^am__sampling_debug_test_sh_SOURCES_DIST = src\/tests\/sampling_test.sh$/;"	m
am__sampling_test_SOURCES_DIST	Makefile	/^am__sampling_test_SOURCES_DIST = src\/tests\/sampling_test.cc \\$/;"	m
am__sampling_test_sh_SOURCES_DIST	Makefile	/^am__sampling_test_sh_SOURCES_DIST = src\/tests\/sampling_test.sh$/;"	m
am__set_TESTS_bases	Makefile	/^am__set_TESTS_bases = \\$/;"	m
am__set_b	Makefile	/^am__set_b = \\$/;"	m
am__sh_e_setup	Makefile	/^am__sh_e_setup = case $$- in *e*) set +e;; esac$/;"	m
am__simple_compat_test_SOURCES_DIST	Makefile	/^am__simple_compat_test_SOURCES_DIST = src\/tests\/simple_compat_test.cc \\$/;"	m
am__stacktrace_unittest_SOURCES_DIST	Makefile	/^am__stacktrace_unittest_SOURCES_DIST =  \\$/;"	m
am__strip_dir	Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__system_alloc_unittest_SOURCES_DIST	Makefile	/^am__system_alloc_unittest_SOURCES_DIST = src\/config_for_unittests.h \\$/;"	m
am__tagged_files	Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tar	Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tcmalloc_and_profiler_unittest_SOURCES_DIST	Makefile	/^am__tcmalloc_and_profiler_unittest_SOURCES_DIST =  \\$/;"	m
am__tcmalloc_both_unittest_SOURCES_DIST	Makefile	/^am__tcmalloc_both_unittest_SOURCES_DIST =  \\$/;"	m
am__tcmalloc_debug_unittest_SOURCES_DIST	Makefile	/^am__tcmalloc_debug_unittest_SOURCES_DIST =  \\$/;"	m
am__tcmalloc_large_heap_fragmentation_unittest_SOURCES_DIST	Makefile	/^am__tcmalloc_large_heap_fragmentation_unittest_SOURCES_DIST =  \\$/;"	m
am__tcmalloc_large_unittest_SOURCES_DIST	Makefile	/^am__tcmalloc_large_unittest_SOURCES_DIST =  \\$/;"	m
am__tcmalloc_minimal_debug_unittest_SOURCES_DIST	Makefile	/^am__tcmalloc_minimal_debug_unittest_SOURCES_DIST =  \\$/;"	m
am__tcmalloc_unittest_SOURCES_DIST	Makefile	/^am__tcmalloc_unittest_SOURCES_DIST = src\/tests\/tcmalloc_unittest.cc \\$/;"	m
am__tcmalloc_unittest_sh_SOURCES_DIST	Makefile	/^am__tcmalloc_unittest_sh_SOURCES_DIST =  \\$/;"	m
am__test_logs1	Makefile	/^am__test_logs1 = $(TESTS:=.log)$/;"	m
am__test_logs2	Makefile	/^am__test_logs2 = $(am__test_logs1:.log=.log)$/;"	m
am__tty_colors	Makefile	/^am__tty_colors = { \\$/;"	m
am__tty_colors_dummy	Makefile	/^am__tty_colors_dummy = \\$/;"	m
am__uninstall_files_from_dir	Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uniquify_input	Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_CCLD_	Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	Makefile	/^am__v_CC_1 = $/;"	m
am__v_CXXLD_	Makefile	/^am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXXLD_0	Makefile	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_1	Makefile	/^am__v_CXXLD_1 = $/;"	m
am__v_CXX_	Makefile	/^am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXX_0	Makefile	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_1	Makefile	/^am__v_CXX_1 = $/;"	m
am__v_GEN_	Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	Makefile	/^am__v_GEN_1 = $/;"	m
am__v_P_	Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	Makefile	/^am__v_at_1 = $/;"	m
am__v_lt_	Makefile	/^am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_lt_0	Makefile	/^am__v_lt_0 = --silent$/;"	m
am__v_lt_1	Makefile	/^am__v_lt_1 = $/;"	m
am__vpath_adj	Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
am_addressmap_unittest_OBJECTS	Makefile	/^am_addressmap_unittest_OBJECTS =  \\$/;"	m
am_atomicops_unittest_OBJECTS	Makefile	/^am_atomicops_unittest_OBJECTS =  \\$/;"	m
am_current_allocated_bytes_test_OBJECTS	Makefile	/^am_current_allocated_bytes_test_OBJECTS = src\/tests\/current_allocated_bytes_test-current_allocated_bytes_test.$(OBJEXT)$/;"	m
am_debugallocation_test_OBJECTS	Makefile	/^am_debugallocation_test_OBJECTS = src\/tests\/debugallocation_test-debugallocation_test.$(OBJEXT)$/;"	m
am_debugallocation_test_sh_OBJECTS	Makefile	/^am_debugallocation_test_sh_OBJECTS =$/;"	m
am_frag_unittest_OBJECTS	Makefile	/^am_frag_unittest_OBJECTS =  \\$/;"	m
am_getpc_test_OBJECTS	Makefile	/^am_getpc_test_OBJECTS =  \\$/;"	m
am_heap_checker_death_unittest_sh_OBJECTS	Makefile	/^am_heap_checker_death_unittest_sh_OBJECTS =$/;"	m
am_heap_checker_debug_unittest_OBJECTS	Makefile	/^am_heap_checker_debug_unittest_OBJECTS = $(am__objects_26)$/;"	m
am_heap_checker_debug_unittest_sh_OBJECTS	Makefile	/^am_heap_checker_debug_unittest_sh_OBJECTS =$/;"	m
am_heap_checker_unittest_OBJECTS	Makefile	/^am_heap_checker_unittest_OBJECTS = src\/tests\/heap_checker_unittest-heap-checker_unittest.$(OBJEXT) \\$/;"	m
am_heap_checker_unittest_sh_OBJECTS	Makefile	/^am_heap_checker_unittest_sh_OBJECTS =$/;"	m
am_heap_profiler_debug_unittest_OBJECTS	Makefile	/^am_heap_profiler_debug_unittest_OBJECTS = $(am__objects_27)$/;"	m
am_heap_profiler_debug_unittest_sh_OBJECTS	Makefile	/^am_heap_profiler_debug_unittest_sh_OBJECTS =$/;"	m
am_heap_profiler_unittest_OBJECTS	Makefile	/^am_heap_profiler_unittest_OBJECTS = src\/tests\/heap_profiler_unittest-heap-profiler_unittest.$(OBJEXT) \\$/;"	m
am_heap_profiler_unittest_sh_OBJECTS	Makefile	/^am_heap_profiler_unittest_sh_OBJECTS =$/;"	m
am_liblogging_la_OBJECTS	Makefile	/^am_liblogging_la_OBJECTS = src\/base\/logging.lo \\$/;"	m
am_libmaybe_threads_la_OBJECTS	Makefile	/^am_libmaybe_threads_la_OBJECTS = $(am__objects_2) $(am__objects_3)$/;"	m
am_libprofiler_la_OBJECTS	Makefile	/^am_libprofiler_la_OBJECTS = src\/profiler.lo \\$/;"	m
am_libprofiler_la_rpath	Makefile	/^am_libprofiler_la_rpath = -rpath $(libdir)$/;"	m
am_libspinlock_la_OBJECTS	Makefile	/^am_libspinlock_la_OBJECTS = src\/base\/spinlock.lo \\$/;"	m
am_libspinlock_la_rpath	Makefile	/^am_libspinlock_la_rpath =$/;"	m
am_libstacktrace_la_OBJECTS	Makefile	/^am_libstacktrace_la_OBJECTS =  \\$/;"	m
am_libstacktrace_la_rpath	Makefile	/^am_libstacktrace_la_rpath =$/;"	m
am_libsysinfo_la_OBJECTS	Makefile	/^am_libsysinfo_la_OBJECTS = src\/base\/sysinfo.lo $(am__objects_1)$/;"	m
am_libtcmalloc_and_profiler_la_OBJECTS	Makefile	/^am_libtcmalloc_and_profiler_la_OBJECTS = $(am__objects_16) \\$/;"	m
am_libtcmalloc_and_profiler_la_rpath	Makefile	/^am_libtcmalloc_and_profiler_la_rpath = -rpath \\$/;"	m
am_libtcmalloc_debug_la_OBJECTS	Makefile	/^am_libtcmalloc_debug_la_OBJECTS = src\/libtcmalloc_debug_la-debugallocation.lo \\$/;"	m
am_libtcmalloc_debug_la_rpath	Makefile	/^am_libtcmalloc_debug_la_rpath = -rpath \\$/;"	m
am_libtcmalloc_internal_la_OBJECTS	Makefile	/^am_libtcmalloc_internal_la_OBJECTS =  \\$/;"	m
am_libtcmalloc_internal_la_rpath	Makefile	/^am_libtcmalloc_internal_la_rpath =$/;"	m
am_libtcmalloc_la_OBJECTS	Makefile	/^am_libtcmalloc_la_OBJECTS =  \\$/;"	m
am_libtcmalloc_la_rpath	Makefile	/^am_libtcmalloc_la_rpath = -rpath \\$/;"	m
am_libtcmalloc_minimal_debug_la_OBJECTS	Makefile	/^am_libtcmalloc_minimal_debug_la_OBJECTS = src\/libtcmalloc_minimal_debug_la-debugallocation.lo \\$/;"	m
am_libtcmalloc_minimal_debug_la_rpath	Makefile	/^am_libtcmalloc_minimal_debug_la_rpath = -rpath \\$/;"	m
am_libtcmalloc_minimal_internal_la_OBJECTS	Makefile	/^am_libtcmalloc_minimal_internal_la_OBJECTS =  \\$/;"	m
am_libtcmalloc_minimal_la_OBJECTS	Makefile	/^am_libtcmalloc_minimal_la_OBJECTS = $(am__objects_22) \\$/;"	m
am_low_level_alloc_unittest_OBJECTS	Makefile	/^am_low_level_alloc_unittest_OBJECTS =  \\$/;"	m
am_malloc_extension_c_test_OBJECTS	Makefile	/^am_malloc_extension_c_test_OBJECTS = src\/tests\/malloc_extension_c_test-malloc_extension_c_test.$(OBJEXT)$/;"	m
am_malloc_extension_debug_test_OBJECTS	Makefile	/^am_malloc_extension_debug_test_OBJECTS =  \\$/;"	m
am_malloc_extension_test_OBJECTS	Makefile	/^am_malloc_extension_test_OBJECTS = src\/tests\/malloc_extension_test-malloc_extension_test.$(OBJEXT)$/;"	m
am_malloc_hook_test_OBJECTS	Makefile	/^am_malloc_hook_test_OBJECTS =  \\$/;"	m
am_markidle_unittest_OBJECTS	Makefile	/^am_markidle_unittest_OBJECTS =  \\$/;"	m
am_maybe_threads_unittest_sh_OBJECTS	Makefile	/^am_maybe_threads_unittest_sh_OBJECTS =$/;"	m
am_memalign_debug_unittest_OBJECTS	Makefile	/^am_memalign_debug_unittest_OBJECTS = $(am__objects_30)$/;"	m
am_memalign_unittest_OBJECTS	Makefile	/^am_memalign_unittest_OBJECTS = src\/tests\/memalign_unittest-memalign_unittest.$(OBJEXT) \\$/;"	m
am_packed_cache_test_OBJECTS	Makefile	/^am_packed_cache_test_OBJECTS =  \\$/;"	m
am_page_heap_test_OBJECTS	Makefile	/^am_page_heap_test_OBJECTS =  \\$/;"	m
am_pagemap_unittest_OBJECTS	Makefile	/^am_pagemap_unittest_OBJECTS =  \\$/;"	m
am_profile_handler_unittest_OBJECTS	Makefile	/^am_profile_handler_unittest_OBJECTS = src\/tests\/profile_handler_unittest-profile-handler_unittest.$(OBJEXT)$/;"	m
am_profiledata_unittest_OBJECTS	Makefile	/^am_profiledata_unittest_OBJECTS = src\/tests\/profiledata_unittest.$(OBJEXT)$/;"	m
am_profiler1_unittest_OBJECTS	Makefile	/^am_profiler1_unittest_OBJECTS =  \\$/;"	m
am_profiler2_unittest_OBJECTS	Makefile	/^am_profiler2_unittest_OBJECTS =  \\$/;"	m
am_profiler3_unittest_OBJECTS	Makefile	/^am_profiler3_unittest_OBJECTS =  \\$/;"	m
am_profiler4_unittest_OBJECTS	Makefile	/^am_profiler4_unittest_OBJECTS =  \\$/;"	m
am_profiler_unittest_sh_OBJECTS	Makefile	/^am_profiler_unittest_sh_OBJECTS =$/;"	m
am_raw_printer_test_OBJECTS	Makefile	/^am_raw_printer_test_OBJECTS = src\/tests\/raw_printer_test-raw_printer_test.$(OBJEXT)$/;"	m
am_realloc_debug_unittest_OBJECTS	Makefile	/^am_realloc_debug_unittest_OBJECTS =  \\$/;"	m
am_realloc_unittest_OBJECTS	Makefile	/^am_realloc_unittest_OBJECTS =  \\$/;"	m
am_sampler_debug_test_OBJECTS	Makefile	/^am_sampler_debug_test_OBJECTS = $(am__objects_36)$/;"	m
am_sampler_test_OBJECTS	Makefile	/^am_sampler_test_OBJECTS = src\/tests\/sampler_test-sampler_test.$(OBJEXT)$/;"	m
am_sampling_debug_test_OBJECTS	Makefile	/^am_sampling_debug_test_OBJECTS = $(am__objects_37)$/;"	m
am_sampling_debug_test_sh_OBJECTS	Makefile	/^am_sampling_debug_test_sh_OBJECTS =$/;"	m
am_sampling_test_OBJECTS	Makefile	/^am_sampling_test_OBJECTS = src\/tests\/sampling_test-sampling_test.$(OBJEXT) \\$/;"	m
am_sampling_test_sh_OBJECTS	Makefile	/^am_sampling_test_sh_OBJECTS =$/;"	m
am_simple_compat_test_OBJECTS	Makefile	/^am_simple_compat_test_OBJECTS = src\/tests\/simple_compat_test.$(OBJEXT) \\$/;"	m
am_stack_trace_table_test_OBJECTS	Makefile	/^am_stack_trace_table_test_OBJECTS = src\/tests\/stack_trace_table_test-stack_trace_table_test.$(OBJEXT)$/;"	m
am_stacktrace_unittest_OBJECTS	Makefile	/^am_stacktrace_unittest_OBJECTS = src\/tests\/stacktrace_unittest.$(OBJEXT) \\$/;"	m
am_system_alloc_unittest_OBJECTS	Makefile	/^am_system_alloc_unittest_OBJECTS = src\/tests\/system_alloc_unittest-system-alloc_unittest.$(OBJEXT)$/;"	m
am_tcmalloc_and_profiler_unittest_OBJECTS	Makefile	/^am_tcmalloc_and_profiler_unittest_OBJECTS = $(am__objects_39)$/;"	m
am_tcmalloc_both_unittest_OBJECTS	Makefile	/^am_tcmalloc_both_unittest_OBJECTS = $(am__objects_40)$/;"	m
am_tcmalloc_debug_unittest_OBJECTS	Makefile	/^am_tcmalloc_debug_unittest_OBJECTS = $(am__objects_41)$/;"	m
am_tcmalloc_large_heap_fragmentation_unittest_OBJECTS	Makefile	/^am_tcmalloc_large_heap_fragmentation_unittest_OBJECTS = src\/tests\/tcmalloc_large_heap_fragmentation_unittest-large_heap_fragmentation_unittest.$(OBJEXT)$/;"	m
am_tcmalloc_large_unittest_OBJECTS	Makefile	/^am_tcmalloc_large_unittest_OBJECTS = src\/tests\/tcmalloc_large_unittest-tcmalloc_large_unittest.$(OBJEXT)$/;"	m
am_tcmalloc_minimal_debug_unittest_OBJECTS	Makefile	/^am_tcmalloc_minimal_debug_unittest_OBJECTS =  \\$/;"	m
am_tcmalloc_minimal_large_heap_fragmentation_unittest_OBJECTS	Makefile	/^am_tcmalloc_minimal_large_heap_fragmentation_unittest_OBJECTS = src\/tests\/tcmalloc_minimal_large_heap_fragmentation_unittest-large_heap_fragmentation_unittest.$(OBJEXT)$/;"	m
am_tcmalloc_minimal_large_unittest_OBJECTS	Makefile	/^am_tcmalloc_minimal_large_unittest_OBJECTS = src\/tests\/tcmalloc_minimal_large_unittest-tcmalloc_large_unittest.$(OBJEXT)$/;"	m
am_tcmalloc_minimal_unittest_OBJECTS	Makefile	/^am_tcmalloc_minimal_unittest_OBJECTS = src\/tests\/tcmalloc_minimal_unittest-tcmalloc_unittest.$(OBJEXT) \\$/;"	m
am_tcmalloc_unittest_OBJECTS	Makefile	/^am_tcmalloc_unittest_OBJECTS = src\/tests\/tcmalloc_unittest-tcmalloc_unittest.$(OBJEXT) \\$/;"	m
am_tcmalloc_unittest_sh_OBJECTS	Makefile	/^am_tcmalloc_unittest_sh_OBJECTS =$/;"	m
am_thread_dealloc_unittest_OBJECTS	Makefile	/^am_thread_dealloc_unittest_OBJECTS = src\/tests\/thread_dealloc_unittest-thread_dealloc_unittest.$(OBJEXT) \\$/;"	m
ap	src/base/linuxthreads.cc	/^  va_list     ap;$/;"	m	struct:ListerParams	file:
append	src/tests/heap-checker_unittest.cc	/^  void append(const Array& x) {$/;"	f	struct:Array
arena	src/base/low_level_alloc.cc	/^      LowLevelAlloc::Arena *arena; \/\/ pointer to parent arena$/;"	m	struct:low_level_alloc_internal::AllocList::Header	file:
arena_	src/base/low_level_alloc.cc	/^        : left_(false), mask_valid_(false), arena_(arena) {$/;"	f	class:__anon43::ArenaLock
arena_	src/base/low_level_alloc.cc	/^    LowLevelAlloc::Arena *arena_;$/;"	m	class:__anon43::ArenaLock	file:
arena_	src/heap-checker.cc	/^  static LowLevelAlloc::Arena* arena_;$/;"	m	class:HeapLeakChecker::Allocator	file:
arena_	src/heap-checker.cc	/^LowLevelAlloc::Arena* HeapLeakChecker::Allocator::arena_ = NULL;$/;"	m	class:HeapLeakChecker::Allocator	file:
arena_	src/memory_region_map.cc	/^LowLevelAlloc::Arena* MemoryRegionMap::arena_ = NULL;$/;"	m	class:MemoryRegionMap	file:
arena_	src/memory_region_map.h	/^  static LowLevelAlloc::Arena* arena_;$/;"	m	class:MemoryRegionMap
arm	src/base/elfcore.h	/^    struct arm_regs arm;$/;"	m	struct:Frame	typeref:struct:Frame::arm_regs
arm_regs	src/base/elfcore.h	/^  typedef struct arm_regs {     \/* General purpose registers                 *\/$/;"	s
arm_regs	src/base/elfcore.h	/^  } arm_regs;$/;"	t	typeref:struct:arm_regs
array_	src/packed-cache-inl.h	/^  volatile T array_[1 << kHashbits];$/;"	m	class:PackedCache
array_	src/pagemap.h	/^  void** array_;$/;"	m	class:TCMalloc_PageMap1
array_	src/tests/system-alloc_unittest.cc	/^  char array_[kArraySize];$/;"	m	class:ArraySysAllocator	file:
array_	src/windows/preamble_patcher.cc	/^  unsigned char* array_;$/;"	m	class:sidestep::DeleteUnsignedCharArray	file:
arraysize	src/base/basictypes.h	198;"	d
as_fn_append	config.status	/^  as_fn_append ()$/;"	f
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	config.status	/^as_fn_error ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
atoll	src/windows/port.h	/^inline long long atoll(const char *nptr) {$/;"	f
atomic_word_is_atomic	src/base/atomicops-internals-windows.h	/^COMPILE_ASSERT(sizeof(Atomic64) == sizeof(PVOID), atomic_word_is_atomic);$/;"	m	namespace:base::subtle
atomicops_unittest_DEPENDENCIES	Makefile	/^atomicops_unittest_DEPENDENCIES = $(LIBSPINLOCK)$/;"	m
atomicops_unittest_LDADD	Makefile	/^atomicops_unittest_LDADD = $(LIBSPINLOCK)$/;"	m
atomicops_unittest_OBJECTS	Makefile	/^atomicops_unittest_OBJECTS = $(am_atomicops_unittest_OBJECTS)$/;"	m
atomicops_unittest_SOURCES	Makefile	/^atomicops_unittest_SOURCES = src\/tests\/atomicops_unittest.cc \\$/;"	m
b	src/tests/heap-checker_unittest.cc	/^  char b[7];$/;"	m	class:ClassB	file:
b2	src/tests/heap-checker_unittest.cc	/^  char b2[11];$/;"	m	class:ClassB2	file:
base	src/base/atomicops-internals-arm-generic.h	/^namespace base {$/;"	n
base	src/base/atomicops-internals-arm-v6plus.h	/^namespace base {$/;"	n
base	src/base/atomicops-internals-gcc.h	/^namespace base {$/;"	n
base	src/base/atomicops-internals-linuxppc.h	/^namespace base {$/;"	n
base	src/base/atomicops-internals-macosx.h	/^namespace base {$/;"	n
base	src/base/atomicops-internals-mips.h	/^namespace base {$/;"	n
base	src/base/atomicops-internals-windows.h	/^namespace base {$/;"	n
base	src/base/atomicops-internals-x86.h	/^namespace base {$/;"	n
base	src/base/atomicops.h	/^namespace base {$/;"	n
base	src/base/basictypes.h	/^namespace base {$/;"	n
base	src/base/elf_mem_image.cc	/^namespace base {$/;"	n	file:
base	src/base/elf_mem_image.h	/^namespace base {$/;"	n
base	src/base/spinlock_internal.cc	/^namespace base { namespace internal { static int SuggestedDelayNS(int loop); }}$/;"	n	file:
base	src/base/spinlock_internal.cc	/^namespace base {$/;"	n	file:
base	src/base/spinlock_internal.h	/^namespace base {$/;"	n
base	src/base/spinlock_linux-inl.h	/^namespace base {$/;"	n
base	src/base/spinlock_posix-inl.h	/^namespace base {$/;"	n
base	src/base/spinlock_win32-inl.h	/^namespace base {$/;"	n
base	src/base/synchronization_profiling.h	/^namespace base {$/;"	n
base	src/base/vdso_support.cc	/^namespace base {$/;"	n	file:
base	src/base/vdso_support.h	/^namespace base {$/;"	n
base	src/gperftools/malloc_extension.h	/^namespace base {$/;"	n
base	src/heap-profile-table.h	/^    Snapshot* base;$/;"	m	struct:HeapProfileTable::AddNonLiveArgs
base	src/malloc_hook-inl.h	/^namespace base { namespace internal {$/;"	n
base	src/malloc_hook.cc	/^namespace base { namespace internal {$/;"	n	file:
base	src/page_heap.h	/^namespace base {$/;"	n
base	src/raw_printer.cc	/^namespace base {$/;"	n	file:
base	src/raw_printer.h	/^namespace base {$/;"	n
base_	src/raw_printer.h	/^  char* base_;          \/\/ Initial pointer$/;"	m	class:base::RawPrinter
begin	src/base/elf_mem_image.cc	/^ElfMemImage::SymbolIterator ElfMemImage::begin() const {$/;"	f	class:base::ElfMemImage
begin	src/base/vdso_support.h	/^  SymbolIterator begin() const { return image_.begin(); }$/;"	f	class:base::VDSOSupport
big_page_size_	src/memfs_malloc.cc	/^  int64 big_page_size_;$/;"	m	class:HugetlbSysAllocator	file:
bin_PROGRAMS	Makefile	/^bin_PROGRAMS =$/;"	m
bin_SCRIPTS	Makefile	/^bin_SCRIPTS = src\/pprof$/;"	m
bin_name	src/tcmalloc.cc	/^static char *bin_name;$/;"	v	file:
bin_subidx	src/tcmalloc.cc	/^static int bin_subidx;$/;"	v	file:
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bit_cast	src/base/basictypes.h	/^inline Dest bit_cast(const Source& source) {$/;"	f
block	src/debugallocation.cc	/^  MallocBlock* block;$/;"	m	struct:MallocBlockQueueEntry	file:
blocks	src/addressmap-inl.h	/^    Entry*   blocks[kClusterBlocks];    \/\/ Per-block linked-lists$/;"	m	struct:AddressMap::Cluster
bucket	src/heap-profile-table.cc	/^  Bucket* bucket;$/;"	m	struct:HeapProfileTable::Snapshot::Entry	file:
bucket	src/heap-profile-table.h	/^    Bucket* bucket() const {$/;"	f	struct:HeapProfileTable::AllocValue
bucket_allocator	src/static_vars.h	/^  static PageHeapAllocator<StackTraceTable::Bucket>* bucket_allocator() {$/;"	f	class:tcmalloc::Static
bucket_allocator_	src/static_vars.cc	/^PageHeapAllocator<StackTraceTable::Bucket> Static::bucket_allocator_;$/;"	m	class:tcmalloc::Static	file:
bucket_allocator_	src/static_vars.h	/^  static PageHeapAllocator<StackTraceTable::Bucket> bucket_allocator_;$/;"	m	class:tcmalloc::Static
bucket_rep	src/heap-profile-table.h	/^    uintptr_t bucket_rep;$/;"	m	struct:HeapProfileTable::AllocValue
bucket_table_	src/heap-profile-table.h	/^  Bucket** bucket_table_;$/;"	m	class:HeapProfileTable
bucket_table_	src/memory_region_map.cc	/^HeapProfileBucket** MemoryRegionMap::bucket_table_ = NULL;  \/\/ GUARDED_BY(lock_)$/;"	m	class:MemoryRegionMap	file:
bucket_total	src/stack_trace_table.h	/^  int bucket_total() const { return bucket_total_; }$/;"	f	class:tcmalloc::StackTraceTable
bucket_total_	src/stack_trace_table.h	/^  int bucket_total_;$/;"	m	class:tcmalloc::StackTraceTable
buckets_	src/heap-profile-table.cc	/^  map<Bucket*, Entry> buckets_;$/;"	m	struct:HeapProfileTable::Snapshot::ReportState	file:
buf	src/heap-profile-table.h	/^    char* buf;$/;"	m	struct:HeapProfileTable::BufferArgs
buf_	src/base/sysinfo.h	/^    char buf_[kBufSize];$/;"	m	struct:ProcMapsIterator::Buffer
buf_	src/internal_logging.cc	/^  char buf_[kBufSize];$/;"	m	class:tcmalloc::Logger	file:
buf_	src/internal_logging.h	/^  char* buf_;           \/\/ Where should we write next$/;"	m	class:TCMalloc_Printer
buflen	src/heap-profile-table.h	/^    int buflen;$/;"	m	struct:HeapProfileTable::BufferArgs
bufsize	src/heap-profile-table.h	/^    int bufsize;$/;"	m	struct:HeapProfileTable::BufferArgs
build	Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	Makefile	/^build_triplet = x86_64-unknown-linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = unknown$/;"	m
builddir	Makefile	/^builddir = .$/;"	m
busy_worker_	src/tests/profile-handler_unittest.cc	/^  BusyThread* busy_worker_;$/;"	m	class:__anon28::ProfileHandlerTest	file:
bwaves_enable_	src/tcmalloc.cc	/^void bwaves_enable_()$/;"	f
bytes	src/heap-profile-table.cc	/^  int bytes;$/;"	m	struct:HeapProfileTable::Snapshot::Entry	file:
bytes	src/heap-profile-table.h	/^    size_t  bytes;   \/\/ Number of bytes in this allocation$/;"	m	struct:HeapProfileTable::AllocValue
bytes_until_sample_	src/sampler.h	/^  size_t        bytes_until_sample_;    \/\/ Bytes until we sample next$/;"	m	class:tcmalloc::Sampler
bytes_until_sample_	src/tests/sampler_test.cc	/^  size_t bytes_until_sample_;$/;"	m	class:OldSampler	file:
c_open	src/base/linuxthreads.cc	/^static int c_open(const char *fname, int flags, int mode) {$/;"	f	file:
cache_manage_enabled	src/tcmalloc.cc	/^  int cache_manage_enabled;$/;"	m	struct:CacheManagerData	file:
cache_manager_private	src/tcmalloc.cc	/^  void *cache_manager_private;$/;"	m	struct:CacheManagerData	file:
cache_size_	src/central_freelist.h	/^  int32_t cache_size_;$/;"	m	class:tcmalloc::CentralFreeList
call_stack	src/heap-profile-table.h	/^    const void* const* call_stack;  \/\/ Stack trace$/;"	m	struct:HeapProfileTable::AllocContextInfo
call_stack	src/heap-profile-table.h	/^    const void* const* call_stack;  \/\/ call stack that made the allocation call$/;"	m	struct:HeapProfileTable::AllocInfo
call_stack	src/memory_region_map.h	/^    const void* call_stack[kMaxStackDepth];  \/\/ caller address stack array$/;"	m	struct:MemoryRegionMap::Region
call_stack_depth	src/memory_region_map.h	/^    int call_stack_depth;  \/\/ number of caller stack frames that we saved$/;"	m	struct:MemoryRegionMap::Region
callback	src/base/linuxthreads.cc	/^  ListAllProcessThreadsCallBack callback;$/;"	m	struct:ListerParams	file:
callback	src/profile-handler.cc	/^  ProfileHandlerCallback callback;$/;"	m	struct:ProfileHandlerToken	file:
callback_arg	src/profile-handler.cc	/^  void* callback_arg;$/;"	m	struct:ProfileHandlerToken	file:
callback_count	src/profile-handler.h	/^  int32 callback_count;  \/* Number of callbacks registered *\/$/;"	m	struct:ProfileHandlerState
caller	src/memory_region_map.h	/^    uintptr_t caller() const {$/;"	f	struct:MemoryRegionMap::Region
calloc	src/windows/override_functions.cc	93;"	d	file:
callunrollinfo	src/getpc.h	/^static const CallUnrollInfo callunrollinfo[] = {$/;"	v
can_create_leaks_reliably	src/tests/heap-checker_unittest.cc	/^static bool can_create_leaks_reliably = false;$/;"	v	file:
caveats	doc/tcmalloc.html	/^<h2><A NAME="caveats">Caveats<\/A><\/h2>$/;"	a
ccr	src/base/elfcore.h	/^    unsigned long ccr;$/;"	m	struct:ppc_regs
central_bytes	src/tcmalloc.cc	/^  uint64_t central_bytes;     \/\/ Bytes in central cache$/;"	m	struct:TCMallocStats	file:
central_cache	src/static_vars.h	/^  static CentralFreeListPadded* central_cache(int heap_type = DEFAULT_HEAP_TYPE) { $/;"	f	class:tcmalloc::Static
central_cache_	src/static_vars.cc	/^CentralFreeListPadded Static::central_cache_[NR_HEAP_TYPE][kNumClasses];$/;"	m	class:tcmalloc::Static	file:
central_cache_	src/static_vars.h	/^  static CentralFreeListPadded central_cache_[NR_HEAP_TYPE][kNumClasses];$/;"	m	class:tcmalloc::Static
cfree	src/libc_override_osx.h	/^  void  cfree(void* p)                   { tc_cfree(p);               }$/;"	f
cfree	src/tests/tcmalloc_unittest.cc	102;"	d	file:
chars	src/debugallocation.cc	/^  char chars[sizeof(DebugMallocImplementation)];$/;"	m	union:__anon53	file:
check_SCRIPTS	Makefile	/^check_SCRIPTS = pprof_unittest$/;"	m
checked_sections	src/malloc_hook.cc	/^static bool checked_sections = false;$/;"	v	file:
checker_	src/tests/profiledata_unittest.cc	/^  ProfileDataChecker checker_;$/;"	m	class:__anon30::ProfileDataTest	file:
chk_head2malloc_ptr	src/tcmalloc.cc	/^chk_head2malloc_ptr(struct chunk_head *chk_head) {$/;"	f	file:
chk_head2usr_ptr	src/tcmalloc.cc	/^chk_head2usr_ptr(struct chunk_head *chk_head) {$/;"	f	file:
chunk_head	src/tcmalloc.cc	/^struct chunk_head {$/;"	s	file:
chunk_head_size	src/tcmalloc.cc	/^chunk_head_size(size_t align) {$/;"	f	file:
class_array_	src/common.h	/^  unsigned char class_array_[kClassArraySize];$/;"	m	class:tcmalloc::SizeMap
class_to_pages	src/common.h	/^  inline size_t class_to_pages(size_t cl) {$/;"	f	class:tcmalloc::SizeMap
class_to_pages_	src/common.h	/^  size_t class_to_pages_[kNumClasses];$/;"	m	class:tcmalloc::SizeMap
class_to_size	src/common.h	/^  inline size_t class_to_size(size_t cl) {$/;"	f	class:tcmalloc::SizeMap
class_to_size_	src/common.h	/^  size_t class_to_size_[kNumClasses];$/;"	m	class:tcmalloc::SizeMap
cleanup	src/pprof	/^sub cleanup {$/;"	s
clear_lowwatermark	src/thread_cache.h	/^    void clear_lowwatermark() { lowater_ = length_; }$/;"	f	class:tcmalloc::ThreadCache::FreeList
client_count_	src/memory_region_map.cc	/^int MemoryRegionMap::client_count_ = 0;$/;"	m	class:MemoryRegionMap	file:
client_count_	src/memory_region_map.h	/^  static int client_count_;$/;"	m	class:MemoryRegionMap
clone	src/base/linux_syscall_support.h	/^    LSS_INLINE int LSS_NAME(clone)(int (*fn)(void *), void *child_stack,$/;"	f
close	src/windows/port.h	/^inline int close(int fd) {$/;"	f
clsa_begin	src/tcmalloc.cc	/^static void clsa_begin(const char *bin_path)$/;"	f	file:
clsa_monit_enable_	src/tcmalloc.cc	/^clsa_monit_enable_()$/;"	f
clsa_monit_end_	src/tcmalloc.cc	/^clsa_monit_end_()$/;"	f
clsa_monit_start_	src/tcmalloc.cc	/^clsa_monit_start_()$/;"	f
collector_	src/profiler.cc	/^  ProfileData   collector_;$/;"	m	class:CpuProfiler	file:
collector_	src/tests/profiledata_unittest.cc	/^  ProfileData        collector_;$/;"	m	class:__anon30::ProfileDataTest	file:
color	src/pprof	/^  color: #000000;$/;"	l
color	src/pprof	/^  color: #0000ff;$/;"	l
color	src/pprof	/^  color: #008800;$/;"	l
color	src/pprof	/^  color: #aaaaaa;$/;"	l
color	src/pprof	/^  color: #cccccc;$/;"	l
commandlineflags	src/base/commandlineflags.h	/^  namespace commandlineflags {$/;"	n	namespace:tcmalloc
committed_bytes	src/page_heap.h	/^    uint64_t committed_bytes;  \/\/ Bytes committed, always <= system_bytes_.$/;"	m	struct:tcmalloc::PageHeap::Stats
compiletime	doc/tcmalloc.html	/^<H2><A NAME="compiletime">Modifying Behavior In Code<\/A><\/H2>$/;"	a
condition_register	src/stacktrace_powerpc-inl.h	/^  long condition_register;$/;"	m	struct:layout_ppc
condition_register	src/stacktrace_powerpc-linux-inl.h	/^  long condition_register;$/;"	m	struct:layout_ppc
const_pointer	src/base/stl_allocator.h	/^  typedef const T*   const_pointer;$/;"	t	class:STL_Allocator
const_reference	src/base/stl_allocator.h	/^  typedef const T&   const_reference;$/;"	t	class:STL_Allocator
construct	src/base/stl_allocator.h	/^  void construct(pointer p) { ::new(p) T(); }$/;"	f	class:STL_Allocator
construct	src/base/stl_allocator.h	/^  void construct(pointer p, const T& val) { ::new(p) T(val); }$/;"	f	class:STL_Allocator
constructor_heap_profiling	src/heap-checker.cc	/^static bool constructor_heap_profiling = false;$/;"	v	file:
count	src/heap-profile-table.cc	/^  int count;$/;"	m	struct:HeapProfileTable::Snapshot::Entry	file:
count	src/profiledata.h	/^    Slot count;                  \/\/ Number of hits$/;"	m	struct:ProfileData::Entry
count	src/stack_trace_table.h	/^    int count;$/;"	m	struct:tcmalloc::StackTraceTable::Bucket
count_	src/heap-checker-bcad.cc	/^  static int count_;$/;"	m	class:HeapLeakCheckerGlobalPrePost	file:
count_	src/heap-checker-bcad.cc	/^int HeapLeakCheckerGlobalPrePost::count_ = 0;$/;"	m	class:HeapLeakCheckerGlobalPrePost	file:
count_	src/profiledata.h	/^  int           count_;         \/\/ How many samples recorded$/;"	m	class:ProfileData
counter_	src/central_freelist.h	/^  size_t   counter_;        \/\/ Number of free objects in cache entry$/;"	m	class:tcmalloc::CentralFreeList
cp0_badvaddr	src/base/elfcore.h	/^    unsigned long cp0_badvaddr;$/;"	m	struct:mips_regs
cp0_cause	src/base/elfcore.h	/^    unsigned long cp0_cause;$/;"	m	struct:mips_regs
cp0_epc	src/base/elfcore.h	/^    unsigned long cp0_epc;      \/* Program counter.                          *\/$/;"	m	struct:mips_regs
cp0_status	src/base/elfcore.h	/^    unsigned long cp0_status;$/;"	m	struct:mips_regs
cpp_alloc	src/tcmalloc.cc	/^inline void* cpp_alloc(size_t size, bool nothrow) {$/;"	f	namespace:__anon5
cpp_memalign	src/tcmalloc.cc	/^void* cpp_memalign(size_t align, size_t size) {$/;"	f
cpu_config	src/tcmalloc.cc	/^cpu_config()$/;"	f	file:
cpuid	src/base/atomicops-internals-x86.cc	52;"	d	file:
cpuid	src/base/atomicops-internals-x86.cc	58;"	d	file:
cpuinfo_cycles_per_second	src/base/sysinfo.cc	/^static double cpuinfo_cycles_per_second = 1.0;  \/\/ 0.0 might be dangerous$/;"	v	file:
cpuinfo_num_cpus	src/base/sysinfo.cc	/^static int cpuinfo_num_cpus = 1;  \/\/ Conservative guess$/;"	v	file:
cpy_chunk_head	src/tcmalloc.cc	/^cpy_chunk_head(struct chunk_head *dst, struct chunk_head *src) {$/;"	f	file:
crashed	src/internal_logging.cc	/^static bool crashed = false;$/;"	v	file:
cs	src/base/elfcore.h	/^    uint64_t  rip,cs,eflags;$/;"	m	struct:i386_regs
ctl	src/tcmalloc.cc	/^static const char *ctl = "\/root\/grt\/dbg\/spec.ctl";$/;"	v	file:
ctr	src/base/elfcore.h	/^    unsigned long ctr;$/;"	m	struct:ppc_regs
ctrgProcAddress	src/windows/patch_functions.cc	/^  static const int ctrgProcAddress = kNumFunctions;$/;"	m	class:__anon9::LibcInfo	file:
current_allocated_bytes_test_CXXFLAGS	Makefile	/^current_allocated_bytes_test_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS)$/;"	m
current_allocated_bytes_test_DEPENDENCIES	Makefile	/^current_allocated_bytes_test_DEPENDENCIES = $(LIBTCMALLOC_MINIMAL) \\$/;"	m
current_allocated_bytes_test_LDADD	Makefile	/^current_allocated_bytes_test_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)$/;"	m
current_allocated_bytes_test_LDFLAGS	Makefile	/^current_allocated_bytes_test_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
current_allocated_bytes_test_LINK	Makefile	/^current_allocated_bytes_test_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
current_allocated_bytes_test_OBJECTS	Makefile	/^current_allocated_bytes_test_OBJECTS =  \\$/;"	m
current_allocated_bytes_test_SOURCES	Makefile	/^current_allocated_bytes_test_SOURCES = src\/tests\/current_allocated_bytes_test.cc \\$/;"	m
current_filename_	src/base/sysinfo.h	/^  char current_filename_[PATH_MAX];$/;"	m	class:ProcMapsIterator
current_image_	src/base/sysinfo.h	/^  int current_image_; \/\/ dll's are called "images" in macos parlance$/;"	m	class:ProcMapsIterator
current_instance	src/malloc_extension.cc	/^static MallocExtension* current_instance;$/;"	v	file:
current_load_cmd_	src/base/sysinfo.h	/^  int current_load_cmd_;   \/\/ the segment of this dll we're examining$/;"	m	class:ProcMapsIterator
current_thread_is	src/memory_region_map.cc	/^static inline bool current_thread_is(pthread_t should_be) {$/;"	f	file:
cursor	src/pprof	/^  cursor: pointer;$/;"	l
cyg_backtrace	src/stacktrace_instrument-inl.h	/^static int cyg_backtrace(void **buffer, int size) {$/;"	f
d	src/system-alloc.cc	/^  double d;$/;"	m	union:MemoryAligner	file:
d	src/tests/heap-checker_unittest.cc	/^  char d[3];$/;"	m	class:ClassD	file:
d1	src/tests/heap-checker_unittest.cc	/^  char d1[11];$/;"	m	class:ClassMltD1	file:
d1	src/tests/heap-checker_unittest.cc	/^  char d1[15];$/;"	m	class:ClassD1	file:
d2	src/tests/heap-checker_unittest.cc	/^  char d2[15];$/;"	m	class:ClassMltD2	file:
d2	src/tests/heap-checker_unittest.cc	/^  char d2[19];$/;"	m	class:ClassD2	file:
d_ino	src/base/linux_syscall_support.h	/^  long               d_ino;$/;"	m	struct:kernel_dirent
d_ino	src/base/linux_syscall_support.h	/^  unsigned long long d_ino;$/;"	m	struct:kernel_dirent64
d_name	src/base/linux_syscall_support.h	/^  char               d_name[256];$/;"	m	struct:kernel_dirent
d_name	src/base/linux_syscall_support.h	/^  char               d_name[256];$/;"	m	struct:kernel_dirent64
d_off	src/base/linux_syscall_support.h	/^  long               d_off;$/;"	m	struct:kernel_dirent
d_off	src/base/linux_syscall_support.h	/^  long long          d_off;$/;"	m	struct:kernel_dirent64
d_reclen	src/base/linux_syscall_support.h	/^  unsigned short     d_reclen;$/;"	m	struct:kernel_dirent
d_reclen	src/base/linux_syscall_support.h	/^  unsigned short     d_reclen;$/;"	m	struct:kernel_dirent64
d_type	src/base/linux_syscall_support.h	/^  unsigned char      d_type;$/;"	m	struct:kernel_dirent64
data_	src/tests/profiledata_unittest.cc	/^  T* const data_;$/;"	m	class:__anon30::scoped_array	file:
data_addr	src/debugallocation.cc	/^  const void* data_addr() const { return (const void*)&size2_; }$/;"	f	class:MallocBlock
data_addr	src/debugallocation.cc	/^  void* data_addr() { return (void*)&size2_; }$/;"	f	class:MallocBlock
data_offset	src/debugallocation.cc	/^  static size_t data_offset() { return OFFSETOF_MEMBER(MallocBlock, size2_); }$/;"	f	class:MallocBlock
data_size	src/debugallocation.cc	/^  size_t data_size() const { return size1_; }$/;"	f	class:MallocBlock
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
dealloc_	src/addressmap-inl.h	/^  DeAllocator   dealloc_;               \/\/ The deallocator$/;"	m	class:AddressMap
dealloc_	src/heap-profile-table.h	/^  DeAllocator dealloc_;$/;"	m	class:HeapProfileTable
deallocate	src/base/stl_allocator.h	/^  void deallocate(pointer p, size_type n) { Alloc::Free(p, n * sizeof(T)); }$/;"	f	class:STL_Allocator
debug_cpp_alloc	src/debugallocation.cc	/^inline void* debug_cpp_alloc(size_t size, int new_type, bool nothrow) {$/;"	f
debug_cpp_memalign	src/debugallocation.cc	/^static void* debug_cpp_memalign(size_t align, size_t size) {$/;"	f	file:
debug_malloc_implementation_space	src/debugallocation.cc	/^} debug_malloc_implementation_space;$/;"	v	typeref:union:__anon53	file:
debugallocation_test_CXXFLAGS	Makefile	/^debugallocation_test_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
debugallocation_test_DEPENDENCIES	Makefile	/^debugallocation_test_DEPENDENCIES = libtcmalloc_debug.la \\$/;"	m
debugallocation_test_LDADD	Makefile	/^debugallocation_test_LDADD = libtcmalloc_debug.la $(PTHREAD_LIBS)$/;"	m
debugallocation_test_LDFLAGS	Makefile	/^debugallocation_test_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
debugallocation_test_LINK	Makefile	/^debugallocation_test_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
debugallocation_test_OBJECTS	Makefile	/^debugallocation_test_OBJECTS = $(am_debugallocation_test_OBJECTS)$/;"	m
debugallocation_test_SOURCES	Makefile	/^debugallocation_test_SOURCES = src\/tests\/debugallocation_test.cc$/;"	m
debugallocation_test_sh_LDADD	Makefile	/^debugallocation_test_sh_LDADD = $(LDADD)$/;"	m
debugallocation_test_sh_OBJECTS	Makefile	/^debugallocation_test_sh_OBJECTS =  \\$/;"	m
debugallocation_test_sh_SOURCES	Makefile	/^debugallocation_test_sh_SOURCES = src\/tests\/debugallocation_test.sh$/;"	m
default_arena	src/base/low_level_alloc.cc	/^static struct LowLevelAlloc::Arena default_arena;$/;"	v	typeref:struct:Arena	file:
default_bin_name	src/tcmalloc.cc	/^static const char *default_bin_name = "unknown";$/;"	v	file:
default_heap_type	src/tcmalloc.cc	/^static int default_heap_type = OPEN_MAPPING;$/;"	v	file:
default_space	src/system-alloc.cc	/^static char default_space[sizeof(DefaultSysAllocator)];$/;"	v	file:
delete_hooks_	src/malloc_hook.cc	/^HookList<MallocHook::DeleteHook> delete_hooks_ = INIT_HOOK_LIST;$/;"	m	namespace:base::internal	file:
deleted_buffer_initialized_	src/debugallocation.cc	/^  static pthread_once_t deleted_buffer_initialized_;$/;"	m	class:MallocBlock	file:
deleted_buffer_initialized_	src/debugallocation.cc	/^pthread_once_t MallocBlock::deleted_buffer_initialized_ = PTHREAD_ONCE_INIT;$/;"	m	class:MallocBlock	file:
deleted_buffer_initialized_no_pthreads_	src/debugallocation.cc	/^  static bool deleted_buffer_initialized_no_pthreads_;$/;"	m	class:MallocBlock	file:
deleted_buffer_initialized_no_pthreads_	src/debugallocation.cc	/^bool MallocBlock::deleted_buffer_initialized_no_pthreads_ = false;$/;"	m	class:MallocBlock	file:
deleter_pcs	src/debugallocation.cc	/^  void* deleter_pcs[16];$/;"	m	struct:MallocBlockQueueEntry	file:
deleter_threadid	src/debugallocation.cc	/^  pthread_t deleter_threadid;$/;"	m	struct:MallocBlockQueueEntry	file:
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depth	src/common.h	/^  uintptr_t depth;         \/\/ Number of PC values stored in array below$/;"	m	struct:tcmalloc::StackTrace
depth	src/heap-profile-stats.h	/^  int depth;                \/\/ Depth of stack trace.$/;"	m	struct:HeapProfileBucket
depth	src/profiledata.h	/^    Slot depth;                  \/\/ Stack depth$/;"	m	struct:ProfileData::Entry
depth_total	src/stack_trace_table.h	/^  int depth_total() const { return depth_total_; }$/;"	f	class:tcmalloc::StackTraceTable
depth_total_	src/stack_trace_table.h	/^  int depth_total_;$/;"	m	class:tcmalloc::StackTraceTable
dest	src/heap-profile-table.h	/^    Snapshot* dest;$/;"	m	struct:HeapProfileTable::AddNonLiveArgs
destr_fn	src/windows/port.cc	/^  void (*destr_fn)(void*);$/;"	m	struct:DestrFnClosure	file:
destr_fn_info	src/windows/port.cc	/^static DestrFnClosure destr_fn_info;   \/\/ initted to all NULL\/0.$/;"	v	file:
destroy	src/base/stl_allocator.h	/^  void destroy(pointer p) { p->~T(); }$/;"	f	class:STL_Allocator
destroy_	src/base/simple_mutex.h	/^  bool destroy_;$/;"	m	class:MUTEX_NAMESPACE::Mutex
destructor_	src/base/googleinit.h	/^  const VoidFunction destructor_;$/;"	m	class:GoogleInitializer
did_it_	src/windows/auto_testing_hook.h	/^  bool did_it_;  \/\/ Remember if we did it or not...$/;"	m	class:sidestep::AutoTestingHookImpl
die	sampling_debug_test.sh	/^die() {    # runs the command given as arguments, and then dies.$/;"	f
die	sampling_test.sh	/^die() {    # runs the command given as arguments, and then dies.$/;"	f
die	src/tests/sampling_test.sh	/^die() {    # runs the command given as arguments, and then dies.$/;"	f
difference_type	src/base/stl_allocator.h	/^  typedef ptrdiff_t  difference_type;$/;"	t	class:STL_Allocator
disable	doc/heap_checker.html	/^<h2><a name="disable">Disabling Heap-checking of Known Leaks<\/a><\/h2>$/;"	a
disabled_ranges	src/heap-checker.cc	/^static DisabledRangeMap* disabled_ranges = NULL;$/;"	v	file:
display	src/pprof	/^  display: none;$/;"	l
dist_doc_DATA	Makefile	/^dist_doc_DATA = AUTHORS COPYING ChangeLog INSTALL NEWS README \\$/;"	m
dist_man_MANS	Makefile	/^dist_man_MANS = doc\/pprof.1$/;"	m
distcleancheck_listfiles	Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
do_calloc	src/tcmalloc.cc	/^inline void* do_calloc(size_t size) {$/;"	f	namespace:__anon5
do_debug_malloc_or_debug_cpp_alloc	src/debugallocation.cc	/^inline void* do_debug_malloc_or_debug_cpp_alloc(size_t size) {$/;"	f
do_debug_memalign	src/debugallocation.cc	/^static void *do_debug_memalign(size_t alignment, size_t size) {$/;"	f	file:
do_debug_memalign_or_debug_cpp_memalign	src/debugallocation.cc	/^inline void* do_debug_memalign_or_debug_cpp_memalign(size_t align,$/;"	f
do_free	src/tcmalloc.cc	/^inline void do_free(void* ptr) {$/;"	f	namespace:__anon5
do_free_helper	src/tcmalloc.cc	/^inline void do_free_helper(void* ptr,$/;"	f	namespace:__anon5
do_free_with_callback	src/tcmalloc.cc	/^inline void do_free_with_callback(void* ptr, void (*invalid_free_fn)(void*)) {$/;"	f	namespace:__anon5
do_main_heap_check	src/heap-checker.cc	/^static bool do_main_heap_check = false;$/;"	v	file:
do_mallinfo	src/tcmalloc.cc	/^inline struct mallinfo do_mallinfo() {$/;"	f	namespace:__anon5
do_malloc	src/tcmalloc.cc	/^inline void* do_malloc(size_t size) {$/;"	f	namespace:__anon5
do_malloc_internal	src/tcmalloc.cc	/^inline void* do_malloc_internal(size_t size, int type) {$/;"	f	namespace:__anon5
do_malloc_no_errno	src/tcmalloc.cc	/^inline void* do_malloc_no_errno(size_t size) {$/;"	f	namespace:__anon5
do_malloc_no_errno_or_cpp_alloc	src/tcmalloc.cc	/^inline void* do_malloc_no_errno_or_cpp_alloc(size_t size) {$/;"	f	namespace:__anon5
do_malloc_or_cpp_alloc	src/tcmalloc.cc	/^inline void* do_malloc_or_cpp_alloc(size_t size) {$/;"	f	namespace:__anon5
do_malloc_pages	src/tcmalloc.cc	/^inline void* do_malloc_pages(ThreadCache* heap, size_t size) {$/;"	f	namespace:__anon5
do_malloc_small	src/tcmalloc.cc	/^inline void* do_malloc_small(ThreadCache* heap, size_t size) {$/;"	f	namespace:__anon5
do_malloc_stats	src/tcmalloc.cc	/^inline void do_malloc_stats() {$/;"	f	namespace:__anon5
do_mallopt	src/tcmalloc.cc	/^inline int do_mallopt(int cmd, int value) {$/;"	f	namespace:__anon5
do_memalign	src/tcmalloc.cc	/^void* do_memalign(size_t align, size_t size) {$/;"	f	namespace:__anon5
do_memalign_or_cpp_memalign	src/tcmalloc.cc	/^inline void* do_memalign_or_cpp_memalign(size_t align, size_t size) {$/;"	f	namespace:__anon5
do_realloc	src/tcmalloc.cc	/^inline void* do_realloc(void* old_ptr, size_t new_size) {$/;"	f	namespace:__anon5
do_realloc_with_callback	src/tcmalloc.cc	/^inline void* do_realloc_with_callback($/;"	f	namespace:__anon5
do_sbrk	src/malloc_hook_mmap_freebsd.h	/^static inline void* do_sbrk(intptr_t increment) {$/;"	f
docdir	Makefile	/^docdir = $(prefix)\/share\/doc\/$(PACKAGE)-$(VERSION)$/;"	m
done	src/base/spinlock_internal.h	/^  bool done;$/;"	m	struct:base::internal::SpinLockWaitTransition
ds	src/base/elfcore.h	/^    uint64_t  ds,es,fs,gs;$/;"	m	struct:i386_regs
dummy_ap	src/heap-checker.cc	/^static va_list dummy_ap;$/;"	v	file:
dummy_for_alignment	src/base/low_level_alloc.cc	/^      void *dummy_for_alignment;   \/\/ aligns regions to 0 mod 2*sizeof(void*)$/;"	m	struct:low_level_alloc_internal::AllocList::Header	file:
dump_count	src/heap-profiler.cc	/^static int   dump_count = 0;          \/\/ How many dumps so far$/;"	v	file:
dumping	src/heap-profiler.cc	/^static bool  dumping = false;         \/\/ Dumping status to prevent recursion$/;"	v	file:
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
dynamic_buffer_	src/base/sysinfo.h	/^  Buffer* dynamic_buffer_;  \/\/ dynamically-allocated Buffer$/;"	m	class:ProcMapsIterator
dynstr_	src/base/elf_mem_image.h	/^  const char *dynstr_;$/;"	m	class:base::ElfMemImage
dynsym_	src/base/elf_mem_image.h	/^  const ElfW(Sym) *dynsym_;$/;"	m	class:base::ElfMemImage
ebuf_	src/base/sysinfo.h	/^  char *ebuf_;        \/\/ end of buffer (1 char for a nul)$/;"	m	class:ProcMapsIterator
eflags	src/base/elfcore.h	/^    uint64_t  rip,cs,eflags;$/;"	m	struct:i386_regs
ehdr	src/base/elf_mem_image.cc	/^const T* GetTableElement(const ElfW(Ehdr) *ehdr,$/;"	m	namespace:base::__anon44	file:
ehdr_	src/base/elf_mem_image.h	/^  const ElfW(Ehdr) *ehdr_;$/;"	m	class:base::ElfMemImage
element_size	src/base/elf_mem_image.cc	/^                         ElfW(Word) element_size,$/;"	m	namespace:base::__anon44	file:
empty	src/malloc_hook-inl.h	/^  bool empty() const {$/;"	f	struct:base::internal::HookList
empty	src/thread_cache.h	/^    bool empty() const {$/;"	f	class:tcmalloc::ThreadCache::FreeList
empty_	src/central_freelist.h	/^  Span     empty_;          \/\/ Dummy header for list of empty spans$/;"	m	class:tcmalloc::CentralFreeList
enabled	src/gperftools/profiler.h	/^  int    enabled;             \/* Is profiling currently enabled? *\/$/;"	m	struct:ProfilerState
enabled	src/profiledata.h	/^    bool     enabled;             \/\/ Is profiling currently enabled?$/;"	m	struct:ProfileData::State
enabled	src/profiledata.h	/^  bool enabled() const { return out_ >= 0; }$/;"	f	class:ProfileData
end	src/base/elf_mem_image.cc	/^ElfMemImage::SymbolIterator ElfMemImage::end() const {$/;"	f	class:base::ElfMemImage
end	src/base/vdso_support.h	/^  SymbolIterator end() const { return image_.end(); }$/;"	f	class:base::VDSOSupport
end	src/tests/stacktrace_unittest.cc	/^  const void *start, *end;$/;"	m	struct:__anon26::AddressRange	file:
end_	src/internal_logging.cc	/^  char* end_;$/;"	m	class:tcmalloc::Logger	file:
end_addr	src/memory_region_map.h	/^    uintptr_t end_addr;  \/\/ region end address$/;"	m	struct:MemoryRegionMap::Region
entry	src/profiledata.h	/^    Entry entry[kAssociativity];$/;"	m	struct:ProfileData::Bucket
err	src/base/linuxthreads.cc	/^  int         result, err;$/;"	m	struct:ListerParams	file:
errno	src/tcmalloc.cc	/^  errno = ENOMEM;$/;"	m	namespace:__anon5	file:
errno_	src/base/elfcore.h	/^    int              errno_;$/;"	m	struct:Frame
errno_	src/base/elfcore.h	/^    int             errno_;$/;"	m	struct:Frame
error	src/pprof	/^sub error {$/;"	s
error_	src/stack_trace_table.h	/^  bool error_;$/;"	m	class:tcmalloc::StackTraceTable
es	src/base/elfcore.h	/^    uint64_t  ds,es,fs,gs;$/;"	m	struct:i386_regs
etext_	src/base/sysinfo.h	/^  char *etext_;       \/\/ end of text$/;"	m	class:ProcMapsIterator
evict_	src/profiledata.h	/^  Slot*         evict_;         \/\/ evicted entries$/;"	m	class:ProfileData
evictions_	src/profiledata.h	/^  int           evictions_;     \/\/ How many evictions$/;"	m	class:ProfileData
exec_prefix	Makefile	/^	echo 'exec_prefix='`echo '$(exec_prefix)' | sed 's@^$(prefix)@$${prefix}@'` >> "$@".tmp$/;"	m
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
expected_range	src/tests/stacktrace_unittest.cc	/^AddressRange expected_range[BACKTRACE_STEPS];$/;"	m	namespace:__anon26	file:
expected_type	src/tests/tcmalloc_unittest.cc	/^  base::MallocRange::Type expected_type;$/;"	m	struct:testing::__anon29::RangeCallbackState	file:
explicit	doc/heap_checker.html	/^<h2><a name="explicit">Explicit (Partial-program) Heap Leak Checking<\/h2>$/;"	a
extend_function_enable	src/tcmalloc.cc	247;"	d	file:
extend_info	src/tcmalloc.cc	/^	void *extend_info;$/;"	m	struct:chunk_head	file:
extend_malloc_and_get_usr_ptr	src/tcmalloc.cc	/^extend_malloc_and_get_usr_ptr(void *result, size_t align) {$/;"	f	file:
extra_bytes_released_	src/tcmalloc.cc	/^  size_t extra_bytes_released_;$/;"	m	class:TCMallocImplementation	file:
f	src/tests/heap-checker_unittest.cc	/^  virtual void f() { }$/;"	f	class:ClassB
f	src/tests/heap-checker_unittest.cc	/^  virtual void f() { }$/;"	f	class:ClassD	file:
f	src/tests/heap-checker_unittest.cc	/^  virtual void f() { }$/;"	f	class:ClassD1	file:
f	src/tests/heap-checker_unittest.cc	/^  virtual void f() { }$/;"	f	class:ClassMltD1
f	src/tests/heap-checker_unittest.cc	/^  virtual void f() { }$/;"	f	class:ClassMltD2
f2	src/tests/heap-checker_unittest.cc	/^  virtual void f2() { }$/;"	f	class:ClassB2
f2	src/tests/heap-checker_unittest.cc	/^  virtual void f2() { }$/;"	f	class:ClassD	file:
f2	src/tests/heap-checker_unittest.cc	/^  virtual void f2() { }$/;"	f	class:ClassD2	file:
f_	src/tests/heap-checker_unittest.cc	/^  FunctionSignature f_;$/;"	m	class:Callback0	file:
f_	src/tests/heap-checker_unittest.cc	/^  FunctionSignature f_;$/;"	m	class:Callback1	file:
f_	src/tests/heap-checker_unittest.cc	/^  FunctionSignature f_;$/;"	m	class:Callback2	file:
failed_	src/memfs_malloc.cc	/^  bool failed_;          \/\/ Whether failed to allocate memory.$/;"	m	class:HugetlbSysAllocator	file:
failed_	src/system-alloc.cc	/^  bool failed_[kMaxAllocators];$/;"	m	class:DefaultSysAllocator	file:
fallback_	src/memfs_malloc.cc	/^  SysAllocator* fallback_;  \/\/ Default system allocator to fall back to.$/;"	m	class:HugetlbSysAllocator	file:
fd	src/heap-profile-table.h	/^    RawFD fd;  \/\/ file to write to$/;"	m	struct:HeapProfileTable::DumpArgs
fd_	src/base/sysinfo.h	/^  int fd_;            \/\/ filehandle on \/proc\/*\/maps$/;"	m	class:ProcMapsIterator
fd_	src/base/sysinfo.h	/^  int fd_;$/;"	m	class:ProcMapsIterator
fd_	src/tests/profiledata_unittest.cc	/^  const int fd_;$/;"	m	struct:__anon30::FileDescriptor	file:
filename	src/tests/profiledata_unittest.cc	/^  string filename() const { return filename_; }$/;"	f	class:__anon30::ProfileDataChecker
filename_	src/tests/profiledata_unittest.cc	/^  string filename_;$/;"	m	class:__anon30::ProfileDataChecker	file:
filename_prefix	src/heap-profiler.cc	/^static char* filename_prefix = NULL;  \/\/ Prefix used for profile file names$/;"	v	file:
fill	src/tests/low_level_alloc_unittest.cc	/^  int fill;       \/\/ filled with data starting with this$/;"	m	struct:BlockDesc	file:
filter_	src/profiler.cc	/^  int           (*filter_)(void*);$/;"	m	class:CpuProfiler	file:
filter_arg_	src/profiler.cc	/^  void*         filter_arg_;$/;"	m	class:CpuProfiler	file:
filter_in_thread	src/gperftools/profiler.h	/^  int (*filter_in_thread)(void *arg);$/;"	m	struct:ProfilerOptions
filter_in_thread_arg	src/gperftools/profiler.h	/^  void *filter_in_thread_arg;$/;"	m	struct:ProfilerOptions
flag_aux_	src/windows/mini_disassembler_types.h	/^  int flag_aux_;$/;"	m	struct:sidestep::Opcode
flag_aux_	src/windows/mini_disassembler_types.h	/^  int flag_aux_;$/;"	m	struct:sidestep::SpecificOpcode
flag_dest_	src/windows/mini_disassembler_types.h	/^  int flag_dest_;$/;"	m	struct:sidestep::Opcode
flag_dest_	src/windows/mini_disassembler_types.h	/^  int flag_dest_;$/;"	m	struct:sidestep::SpecificOpcode
flag_source_	src/windows/mini_disassembler_types.h	/^  int flag_source_;$/;"	m	struct:sidestep::Opcode
flag_source_	src/windows/mini_disassembler_types.h	/^  int flag_source_;$/;"	m	struct:sidestep::SpecificOpcode
flags	src/base/low_level_alloc.cc	/^  int32 flags;            \/\/ flags passed to NewArena (ro after init)$/;"	m	struct:LowLevelAlloc::Arena	file:
flags	src/windows/nm-pdb.c	/^  ULONG flags;$/;"	m	struct:__anon12	file:
flags_	src/base/sysinfo.h	/^  char flags_[10];$/;"	m	class:ProcMapsIterator
fname_	src/profiledata.h	/^  char*         fname_;         \/\/ Profile file name$/;"	m	class:ProfileData
focus	doc/cpuprofile.html	/^<h3><a name=focus>Focus and Ignore<\/a><\/h3>$/;"	a
forced_malloc	src/tests/malloc_extension_c_test.c	/^void *forced_malloc(size_t size)$/;"	f	file:
fpr	src/base/elfcore.h	/^    double        fpr[32];	\/* Floating-Point Registers - f0-f31.        *\/$/;"	m	struct:ppc_regs
fraction	src/gperftools/malloc_extension.h	/^  double fraction;      \/\/ Fraction of range that is being used (0 if !INUSE)$/;"	m	struct:base::MallocRange
frag_unittest_CXXFLAGS	Makefile	/^frag_unittest_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
frag_unittest_DEPENDENCIES	Makefile	/^frag_unittest_DEPENDENCIES = $(LIBTCMALLOC_MINIMAL) \\$/;"	m
frag_unittest_LDADD	Makefile	/^frag_unittest_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)$/;"	m
frag_unittest_LDFLAGS	Makefile	/^frag_unittest_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
frag_unittest_LINK	Makefile	/^frag_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
frag_unittest_OBJECTS	Makefile	/^frag_unittest_OBJECTS = $(am_frag_unittest_OBJECTS)$/;"	m
frag_unittest_SOURCES	Makefile	/^frag_unittest_SOURCES = src\/tests\/frag_unittest.cc src\/config_for_unittests.h$/;"	m
frame	src/stacktrace_instrument-inl.h	/^  void* frame[MAX_DEPTH];$/;"	m	struct:__anon16
frame_forcer	src/stacktrace.cc	/^static int ATTRIBUTE_NOINLINE frame_forcer(int rv) {$/;"	f	file:
free	src/windows/override_functions.cc	92;"	d	file:
free_	src/addressmap-inl.h	/^  Entry*        free_;                   \/\/ Free list of unused Entry objects$/;"	m	class:AddressMap
free_	src/page_heap.h	/^  SpanList free_[kMaxPages];$/;"	m	class:tcmalloc::PageHeap
free_	src/windows/preamble_patcher.h	/^    void* free_;$/;"	m	struct:sidestep::PreamblePatcher::PreamblePage
free_area_	src/page_heap_allocator.h	/^  char* free_area_;$/;"	m	class:tcmalloc::PageHeapAllocator
free_avail_	src/page_heap_allocator.h	/^  size_t free_avail_;$/;"	m	class:tcmalloc::PageHeapAllocator
free_bytes	src/page_heap.h	/^    uint64_t free_bytes;      \/\/ Total bytes on normal freelists$/;"	m	struct:tcmalloc::PageHeap::Stats
free_list_	src/page_heap_allocator.h	/^  void* free_list_;$/;"	m	class:tcmalloc::PageHeapAllocator
free_null_or_invalid	src/tcmalloc.cc	/^inline void free_null_or_invalid(void* ptr, void (*invalid_free_fn)(void*)) {$/;"	f	namespace:__anon5
free_queue_	src/debugallocation.cc	/^  static FreeQueue<MallocBlockQueueEntry>* free_queue_;$/;"	m	class:MallocBlock	file:
free_queue_	src/debugallocation.cc	/^FreeQueue<MallocBlockQueueEntry>* MallocBlock::free_queue_ = NULL;$/;"	m	class:MallocBlock	file:
free_queue_lock_	src/debugallocation.cc	/^  static SpinLock free_queue_lock_;$/;"	m	class:MallocBlock	file:
free_queue_size_	src/debugallocation.cc	/^  static size_t free_queue_size_;  \/\/ total size of blocks in free_queue_$/;"	m	class:MallocBlock	file:
free_queue_size_	src/debugallocation.cc	/^size_t MallocBlock::free_queue_size_ = 0;$/;"	m	class:MallocBlock	file:
free_size	src/heap-profile-stats.h	/^  int64 free_size;   \/\/ Total size of all freed objects so far.$/;"	m	struct:HeapProfileStats
freelist	src/base/low_level_alloc.cc	/^  AllocList freelist;     \/\/ head of free list; sorted by addr (under mu)$/;"	m	struct:LowLevelAlloc::Arena	file:
freelist_length	src/thread_cache.h	/^  int freelist_length(size_t cl) const { $/;"	f	class:tcmalloc::ThreadCache
frees	src/heap-profile-stats.h	/^  int32 frees;       \/\/ Number of free calls.$/;"	m	struct:HeapProfileStats
frees	src/tests/low_level_alloc_unittest.cc	/^static int32 frees;$/;"	v	file:
frequency	src/profile-handler.h	/^  int32 frequency;  \/* Profiling frequency *\/$/;"	m	struct:ProfileHandlerState
frequency	src/profiledata.h	/^    int frequency() const {$/;"	f	class:ProfileData::Options
frequency_	src/profile-handler.cc	/^  int32 frequency_;$/;"	m	class:ProfileHandler	file:
frequency_	src/profiledata.h	/^    int      frequency_;                  \/\/ Sample frequency.$/;"	m	class:ProfileData::Options
from	src/base/spinlock_internal.h	/^  int32 from;$/;"	m	struct:base::internal::SpinLockWaitTransition
fs	src/base/elfcore.h	/^    uint64_t  ds,es,fs,gs;$/;"	m	struct:i386_regs
fs_base	src/base/elfcore.h	/^    uint64_t  fs_base, gs_base;$/;"	m	struct:i386_regs
func_append	config.status	/^func_append ()\\$/;"	f
func_append	configure	/^func_append ()\\$/;"	f
func_append	libtool	/^func_append ()$/;"	f
func_append	ltmain.sh	/^func_append ()$/;"	f
func_append_quoted	config.status	/^func_append_quoted ()\\$/;"	f
func_append_quoted	configure	/^func_append_quoted ()\\$/;"	f
func_append_quoted	libtool	/^func_append_quoted ()$/;"	f
func_append_quoted	ltmain.sh	/^func_append_quoted ()$/;"	f
func_arith	config.status	/^func_arith ()\\$/;"	f
func_arith	configure	/^func_arith ()\\$/;"	f
func_arith	libtool	/^func_arith ()$/;"	f
func_arith	ltmain.sh	/^func_arith ()$/;"	f
func_basename	config.status	/^func_basename ()\\$/;"	f
func_basename	configure	/^func_basename ()\\$/;"	f
func_basename	libtool	/^func_basename ()$/;"	f
func_basename	ltmain.sh	/^func_basename ()$/;"	f
func_check_version_match	libtool	/^func_check_version_match ()$/;"	f
func_check_version_match	ltmain.sh	/^func_check_version_match ()$/;"	f
func_cl_dashL	compile	/^func_cl_dashL ()$/;"	f
func_cl_dashl	compile	/^func_cl_dashl ()$/;"	f
func_cl_wrapper	compile	/^func_cl_wrapper ()$/;"	f
func_config	libtool	/^func_config ()$/;"	f
func_config	ltmain.sh	/^func_config ()$/;"	f
func_convert_core_file_wine_to_w32	libtool	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_file_wine_to_w32	ltmain.sh	/^func_convert_core_file_wine_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	libtool	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_msys_to_w32	ltmain.sh	/^func_convert_core_msys_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	libtool	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_core_path_wine_to_w32	ltmain.sh	/^func_convert_core_path_wine_to_w32 ()$/;"	f
func_convert_file_check	libtool	/^func_convert_file_check ()$/;"	f
func_convert_file_check	ltmain.sh	/^func_convert_file_check ()$/;"	f
func_convert_file_cygwin_to_w32	libtool	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_cygwin_to_w32	ltmain.sh	/^func_convert_file_cygwin_to_w32 ()$/;"	f
func_convert_file_msys_to_cygwin	libtool	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_cygwin	ltmain.sh	/^func_convert_file_msys_to_cygwin ()$/;"	f
func_convert_file_msys_to_w32	libtool	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_msys_to_w32	ltmain.sh	/^func_convert_file_msys_to_w32 ()$/;"	f
func_convert_file_nix_to_cygwin	libtool	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_cygwin	ltmain.sh	/^func_convert_file_nix_to_cygwin ()$/;"	f
func_convert_file_nix_to_w32	libtool	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_nix_to_w32	ltmain.sh	/^func_convert_file_nix_to_w32 ()$/;"	f
func_convert_file_noop	libtool	/^func_convert_file_noop ()$/;"	f
func_convert_file_noop	ltmain.sh	/^func_convert_file_noop ()$/;"	f
func_convert_path_check	libtool	/^func_convert_path_check ()$/;"	f
func_convert_path_check	ltmain.sh	/^func_convert_path_check ()$/;"	f
func_convert_path_cygwin_to_w32	libtool	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_cygwin_to_w32	ltmain.sh	/^func_convert_path_cygwin_to_w32 ()$/;"	f
func_convert_path_front_back_pathsep	libtool	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_front_back_pathsep	ltmain.sh	/^func_convert_path_front_back_pathsep ()$/;"	f
func_convert_path_msys_to_cygwin	libtool	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_cygwin	ltmain.sh	/^func_convert_path_msys_to_cygwin ()$/;"	f
func_convert_path_msys_to_w32	libtool	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_msys_to_w32	ltmain.sh	/^func_convert_path_msys_to_w32 ()$/;"	f
func_convert_path_nix_to_cygwin	libtool	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_cygwin	ltmain.sh	/^func_convert_path_nix_to_cygwin ()$/;"	f
func_convert_path_nix_to_w32	libtool	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_nix_to_w32	ltmain.sh	/^func_convert_path_nix_to_w32 ()$/;"	f
func_convert_path_noop	libtool	/^func_convert_path_noop ()$/;"	f
func_convert_path_noop	ltmain.sh	/^func_convert_path_noop ()$/;"	f
func_cygming_dll_for_implib	libtool	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib	ltmain.sh	/^func_cygming_dll_for_implib ()$/;"	f
func_cygming_dll_for_implib_fallback	libtool	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback	ltmain.sh	/^func_cygming_dll_for_implib_fallback ()$/;"	f
func_cygming_dll_for_implib_fallback_core	libtool	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_dll_for_implib_fallback_core	ltmain.sh	/^func_cygming_dll_for_implib_fallback_core ()$/;"	f
func_cygming_gnu_implib_p	libtool	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_gnu_implib_p	ltmain.sh	/^func_cygming_gnu_implib_p ()$/;"	f
func_cygming_ms_implib_p	libtool	/^func_cygming_ms_implib_p ()$/;"	f
func_cygming_ms_implib_p	ltmain.sh	/^func_cygming_ms_implib_p ()$/;"	f
func_cygpath	libtool	/^func_cygpath ()$/;"	f
func_cygpath	ltmain.sh	/^func_cygpath ()$/;"	f
func_dirname	config.status	/^func_dirname ()\\$/;"	f
func_dirname	configure	/^func_dirname ()\\$/;"	f
func_dirname	libtool	/^func_dirname ()$/;"	f
func_dirname	ltmain.sh	/^func_dirname ()$/;"	f
func_dirname_and_basename	config.status	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	configure	/^func_dirname_and_basename ()\\$/;"	f
func_dirname_and_basename	libtool	/^func_dirname_and_basename ()$/;"	f
func_dirname_and_basename	ltmain.sh	/^func_dirname_and_basename ()$/;"	f
func_echo	libtool	/^func_echo ()$/;"	f
func_echo	ltmain.sh	/^func_echo ()$/;"	f
func_echo_all	configure	/^func_echo_all ()$/;"	f
func_echo_all	libtool	/^func_echo_all ()$/;"	f
func_echo_all	ltmain.sh	/^func_echo_all ()$/;"	f
func_emit_cwrapperexe_src	libtool	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_cwrapperexe_src	ltmain.sh	/^func_emit_cwrapperexe_src ()$/;"	f
func_emit_wrapper	libtool	/^func_emit_wrapper ()$/;"	f
func_emit_wrapper	ltmain.sh	/^func_emit_wrapper ()$/;"	f
func_enable_tag	libtool	/^func_enable_tag ()$/;"	f
func_enable_tag	ltmain.sh	/^func_enable_tag ()$/;"	f
func_error	libtool	/^func_error ()$/;"	f
func_error	ltmain.sh	/^func_error ()$/;"	f
func_exec_program	current_allocated_bytes_test	/^func_exec_program ()$/;"	f
func_exec_program	debugallocation_test	/^func_exec_program ()$/;"	f
func_exec_program	frag_unittest	/^func_exec_program ()$/;"	f
func_exec_program	heap-checker_debug_unittest	/^func_exec_program ()$/;"	f
func_exec_program	heap-checker_unittest	/^func_exec_program ()$/;"	f
func_exec_program	heap-profiler_debug_unittest	/^func_exec_program ()$/;"	f
func_exec_program	heap-profiler_unittest	/^func_exec_program ()$/;"	f
func_exec_program	libtool	/^func_exec_program ()$/;"	f
func_exec_program	ltmain.sh	/^func_exec_program ()$/;"	f
func_exec_program	malloc_extension_c_test	/^func_exec_program ()$/;"	f
func_exec_program	malloc_extension_debug_test	/^func_exec_program ()$/;"	f
func_exec_program	malloc_extension_test	/^func_exec_program ()$/;"	f
func_exec_program	malloc_hook_test	/^func_exec_program ()$/;"	f
func_exec_program	markidle_unittest	/^func_exec_program ()$/;"	f
func_exec_program	memalign_debug_unittest	/^func_exec_program ()$/;"	f
func_exec_program	memalign_unittest	/^func_exec_program ()$/;"	f
func_exec_program	packed_cache_test	/^func_exec_program ()$/;"	f
func_exec_program	page_heap_test	/^func_exec_program ()$/;"	f
func_exec_program	pagemap_unittest	/^func_exec_program ()$/;"	f
func_exec_program	profile_handler_unittest	/^func_exec_program ()$/;"	f
func_exec_program	profiledata_unittest	/^func_exec_program ()$/;"	f
func_exec_program	profiler1_unittest	/^func_exec_program ()$/;"	f
func_exec_program	profiler2_unittest	/^func_exec_program ()$/;"	f
func_exec_program	profiler3_unittest	/^func_exec_program ()$/;"	f
func_exec_program	profiler4_unittest	/^func_exec_program ()$/;"	f
func_exec_program	raw_printer_test	/^func_exec_program ()$/;"	f
func_exec_program	realloc_debug_unittest	/^func_exec_program ()$/;"	f
func_exec_program	realloc_unittest	/^func_exec_program ()$/;"	f
func_exec_program	sampler_debug_test	/^func_exec_program ()$/;"	f
func_exec_program	sampler_test	/^func_exec_program ()$/;"	f
func_exec_program	sampling_debug_test	/^func_exec_program ()$/;"	f
func_exec_program	sampling_test	/^func_exec_program ()$/;"	f
func_exec_program	simple_compat_test	/^func_exec_program ()$/;"	f
func_exec_program	stack_trace_table_test	/^func_exec_program ()$/;"	f
func_exec_program	system_alloc_unittest	/^func_exec_program ()$/;"	f
func_exec_program	tcmalloc_and_profiler_unittest	/^func_exec_program ()$/;"	f
func_exec_program	tcmalloc_both_unittest	/^func_exec_program ()$/;"	f
func_exec_program	tcmalloc_debug_unittest	/^func_exec_program ()$/;"	f
func_exec_program	tcmalloc_large_heap_fragmentation_unittest	/^func_exec_program ()$/;"	f
func_exec_program	tcmalloc_large_unittest	/^func_exec_program ()$/;"	f
func_exec_program	tcmalloc_minimal_debug_unittest	/^func_exec_program ()$/;"	f
func_exec_program	tcmalloc_minimal_large_heap_fragmentation_unittest	/^func_exec_program ()$/;"	f
func_exec_program	tcmalloc_minimal_large_unittest	/^func_exec_program ()$/;"	f
func_exec_program	tcmalloc_minimal_unittest	/^func_exec_program ()$/;"	f
func_exec_program	tcmalloc_unittest	/^func_exec_program ()$/;"	f
func_exec_program	thread_dealloc_unittest	/^func_exec_program ()$/;"	f
func_exec_program_core	current_allocated_bytes_test	/^func_exec_program_core ()$/;"	f
func_exec_program_core	debugallocation_test	/^func_exec_program_core ()$/;"	f
func_exec_program_core	frag_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	heap-checker_debug_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	heap-checker_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	heap-profiler_debug_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	heap-profiler_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	libtool	/^func_exec_program_core ()$/;"	f
func_exec_program_core	ltmain.sh	/^func_exec_program_core ()$/;"	f
func_exec_program_core	malloc_extension_c_test	/^func_exec_program_core ()$/;"	f
func_exec_program_core	malloc_extension_debug_test	/^func_exec_program_core ()$/;"	f
func_exec_program_core	malloc_extension_test	/^func_exec_program_core ()$/;"	f
func_exec_program_core	malloc_hook_test	/^func_exec_program_core ()$/;"	f
func_exec_program_core	markidle_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	memalign_debug_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	memalign_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	packed_cache_test	/^func_exec_program_core ()$/;"	f
func_exec_program_core	page_heap_test	/^func_exec_program_core ()$/;"	f
func_exec_program_core	pagemap_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	profile_handler_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	profiledata_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	profiler1_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	profiler2_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	profiler3_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	profiler4_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	raw_printer_test	/^func_exec_program_core ()$/;"	f
func_exec_program_core	realloc_debug_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	realloc_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	sampler_debug_test	/^func_exec_program_core ()$/;"	f
func_exec_program_core	sampler_test	/^func_exec_program_core ()$/;"	f
func_exec_program_core	sampling_debug_test	/^func_exec_program_core ()$/;"	f
func_exec_program_core	sampling_test	/^func_exec_program_core ()$/;"	f
func_exec_program_core	simple_compat_test	/^func_exec_program_core ()$/;"	f
func_exec_program_core	stack_trace_table_test	/^func_exec_program_core ()$/;"	f
func_exec_program_core	system_alloc_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	tcmalloc_and_profiler_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	tcmalloc_both_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	tcmalloc_debug_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	tcmalloc_large_heap_fragmentation_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	tcmalloc_large_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	tcmalloc_minimal_debug_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	tcmalloc_minimal_large_heap_fragmentation_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	tcmalloc_minimal_large_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	tcmalloc_minimal_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	tcmalloc_unittest	/^func_exec_program_core ()$/;"	f
func_exec_program_core	thread_dealloc_unittest	/^func_exec_program_core ()$/;"	f
func_execute_cmds	libtool	/^func_execute_cmds ()$/;"	f
func_execute_cmds	ltmain.sh	/^func_execute_cmds ()$/;"	f
func_extract_an_archive	libtool	/^func_extract_an_archive ()$/;"	f
func_extract_an_archive	ltmain.sh	/^func_extract_an_archive ()$/;"	f
func_extract_archives	libtool	/^func_extract_archives ()$/;"	f
func_extract_archives	ltmain.sh	/^func_extract_archives ()$/;"	f
func_fallback_echo	config.status	/^func_fallback_echo ()$/;"	f
func_fallback_echo	configure	/^  func_fallback_echo ()$/;"	f
func_fallback_echo	configure	/^func_fallback_echo ()$/;"	f
func_fallback_echo	current_allocated_bytes_test	/^func_fallback_echo ()$/;"	f
func_fallback_echo	debugallocation_test	/^func_fallback_echo ()$/;"	f
func_fallback_echo	frag_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	heap-checker_debug_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	heap-checker_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	heap-profiler_debug_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	heap-profiler_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	libtool	/^func_fallback_echo ()$/;"	f
func_fallback_echo	ltmain.sh	/^func_fallback_echo ()$/;"	f
func_fallback_echo	malloc_extension_c_test	/^func_fallback_echo ()$/;"	f
func_fallback_echo	malloc_extension_debug_test	/^func_fallback_echo ()$/;"	f
func_fallback_echo	malloc_extension_test	/^func_fallback_echo ()$/;"	f
func_fallback_echo	malloc_hook_test	/^func_fallback_echo ()$/;"	f
func_fallback_echo	markidle_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	memalign_debug_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	memalign_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	packed_cache_test	/^func_fallback_echo ()$/;"	f
func_fallback_echo	page_heap_test	/^func_fallback_echo ()$/;"	f
func_fallback_echo	pagemap_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	profile_handler_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	profiledata_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	profiler1_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	profiler2_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	profiler3_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	profiler4_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	raw_printer_test	/^func_fallback_echo ()$/;"	f
func_fallback_echo	realloc_debug_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	realloc_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	sampler_debug_test	/^func_fallback_echo ()$/;"	f
func_fallback_echo	sampler_test	/^func_fallback_echo ()$/;"	f
func_fallback_echo	sampling_debug_test	/^func_fallback_echo ()$/;"	f
func_fallback_echo	sampling_test	/^func_fallback_echo ()$/;"	f
func_fallback_echo	simple_compat_test	/^func_fallback_echo ()$/;"	f
func_fallback_echo	stack_trace_table_test	/^func_fallback_echo ()$/;"	f
func_fallback_echo	system_alloc_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	tcmalloc_and_profiler_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	tcmalloc_both_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	tcmalloc_debug_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	tcmalloc_large_heap_fragmentation_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	tcmalloc_large_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	tcmalloc_minimal_debug_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	tcmalloc_minimal_large_heap_fragmentation_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	tcmalloc_minimal_large_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	tcmalloc_minimal_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	tcmalloc_unittest	/^func_fallback_echo ()$/;"	f
func_fallback_echo	thread_dealloc_unittest	/^func_fallback_echo ()$/;"	f
func_fatal_configuration	libtool	/^func_fatal_configuration ()$/;"	f
func_fatal_configuration	ltmain.sh	/^func_fatal_configuration ()$/;"	f
func_fatal_error	libtool	/^func_fatal_error ()$/;"	f
func_fatal_error	ltmain.sh	/^func_fatal_error ()$/;"	f
func_fatal_help	libtool	/^func_fatal_help ()$/;"	f
func_fatal_help	ltmain.sh	/^func_fatal_help ()$/;"	f
func_features	libtool	/^func_features ()$/;"	f
func_features	ltmain.sh	/^func_features ()$/;"	f
func_file_conv	compile	/^func_file_conv ()$/;"	f
func_generate_dlsyms	libtool	/^func_generate_dlsyms ()$/;"	f
func_generate_dlsyms	ltmain.sh	/^func_generate_dlsyms ()$/;"	f
func_grep	libtool	/^func_grep ()$/;"	f
func_grep	ltmain.sh	/^func_grep ()$/;"	f
func_help	libtool	/^func_help ()$/;"	f
func_help	ltmain.sh	/^func_help ()$/;"	f
func_infer_tag	libtool	/^func_infer_tag ()$/;"	f
func_infer_tag	ltmain.sh	/^func_infer_tag ()$/;"	f
func_init_to_host_path_cmd	libtool	/^func_init_to_host_path_cmd ()$/;"	f
func_init_to_host_path_cmd	ltmain.sh	/^func_init_to_host_path_cmd ()$/;"	f
func_lalib_p	libtool	/^func_lalib_p ()$/;"	f
func_lalib_p	ltmain.sh	/^func_lalib_p ()$/;"	f
func_lalib_unsafe_p	libtool	/^func_lalib_unsafe_p ()$/;"	f
func_lalib_unsafe_p	ltmain.sh	/^func_lalib_unsafe_p ()$/;"	f
func_len	config.status	/^func_len ()\\$/;"	f
func_len	configure	/^func_len ()\\$/;"	f
func_len	libtool	/^func_len ()$/;"	f
func_len	ltmain.sh	/^func_len ()$/;"	f
func_lo2o	config.status	/^func_lo2o ()\\$/;"	f
func_lo2o	configure	/^func_lo2o ()\\$/;"	f
func_lo2o	libtool	/^func_lo2o ()$/;"	f
func_lo2o	ltmain.sh	/^func_lo2o ()$/;"	f
func_lt_dump_args	current_allocated_bytes_test	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	debugallocation_test	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	frag_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	heap-checker_debug_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	heap-checker_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	heap-profiler_debug_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	heap-profiler_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	libtool	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	ltmain.sh	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	malloc_extension_c_test	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	malloc_extension_debug_test	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	malloc_extension_test	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	malloc_hook_test	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	markidle_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	memalign_debug_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	memalign_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	packed_cache_test	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	page_heap_test	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	pagemap_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	profile_handler_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	profiledata_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	profiler1_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	profiler2_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	profiler3_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	profiler4_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	raw_printer_test	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	realloc_debug_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	realloc_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	sampler_debug_test	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	sampler_test	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	sampling_debug_test	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	sampling_test	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	simple_compat_test	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	stack_trace_table_test	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	system_alloc_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	tcmalloc_and_profiler_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	tcmalloc_both_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	tcmalloc_debug_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	tcmalloc_large_heap_fragmentation_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	tcmalloc_large_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	tcmalloc_minimal_debug_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	tcmalloc_minimal_large_heap_fragmentation_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	tcmalloc_minimal_large_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	tcmalloc_minimal_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	tcmalloc_unittest	/^func_lt_dump_args ()$/;"	f
func_lt_dump_args	thread_dealloc_unittest	/^func_lt_dump_args ()$/;"	f
func_ltwrapper_executable_p	libtool	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_executable_p	ltmain.sh	/^func_ltwrapper_executable_p ()$/;"	f
func_ltwrapper_p	libtool	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_p	ltmain.sh	/^func_ltwrapper_p ()$/;"	f
func_ltwrapper_script_p	libtool	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_script_p	ltmain.sh	/^func_ltwrapper_script_p ()$/;"	f
func_ltwrapper_scriptname	libtool	/^func_ltwrapper_scriptname ()$/;"	f
func_ltwrapper_scriptname	ltmain.sh	/^func_ltwrapper_scriptname ()$/;"	f
func_missing_arg	libtool	/^func_missing_arg ()$/;"	f
func_missing_arg	ltmain.sh	/^func_missing_arg ()$/;"	f
func_mkdir_p	libtool	/^func_mkdir_p ()$/;"	f
func_mkdir_p	ltmain.sh	/^func_mkdir_p ()$/;"	f
func_mktempdir	libtool	/^func_mktempdir ()$/;"	f
func_mktempdir	ltmain.sh	/^func_mktempdir ()$/;"	f
func_mode_compile	libtool	/^func_mode_compile ()$/;"	f
func_mode_compile	ltmain.sh	/^func_mode_compile ()$/;"	f
func_mode_execute	libtool	/^func_mode_execute ()$/;"	f
func_mode_execute	ltmain.sh	/^func_mode_execute ()$/;"	f
func_mode_finish	libtool	/^func_mode_finish ()$/;"	f
func_mode_finish	ltmain.sh	/^func_mode_finish ()$/;"	f
func_mode_help	libtool	/^func_mode_help ()$/;"	f
func_mode_help	ltmain.sh	/^func_mode_help ()$/;"	f
func_mode_install	libtool	/^func_mode_install ()$/;"	f
func_mode_install	ltmain.sh	/^func_mode_install ()$/;"	f
func_mode_link	libtool	/^func_mode_link ()$/;"	f
func_mode_link	ltmain.sh	/^func_mode_link ()$/;"	f
func_mode_uninstall	libtool	/^func_mode_uninstall ()$/;"	f
func_mode_uninstall	ltmain.sh	/^func_mode_uninstall ()$/;"	f
func_normal_abspath	libtool	/^func_normal_abspath ()$/;"	f
func_normal_abspath	ltmain.sh	/^func_normal_abspath ()$/;"	f
func_parse_lt_options	current_allocated_bytes_test	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	debugallocation_test	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	frag_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	heap-checker_debug_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	heap-checker_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	heap-profiler_debug_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	heap-profiler_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	libtool	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	ltmain.sh	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	malloc_extension_c_test	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	malloc_extension_debug_test	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	malloc_extension_test	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	malloc_hook_test	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	markidle_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	memalign_debug_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	memalign_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	packed_cache_test	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	page_heap_test	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	pagemap_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	profile_handler_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	profiledata_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	profiler1_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	profiler2_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	profiler3_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	profiler4_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	raw_printer_test	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	realloc_debug_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	realloc_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	sampler_debug_test	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	sampler_test	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	sampling_debug_test	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	sampling_test	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	simple_compat_test	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	stack_trace_table_test	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	system_alloc_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	tcmalloc_and_profiler_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	tcmalloc_both_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	tcmalloc_debug_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	tcmalloc_large_heap_fragmentation_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	tcmalloc_large_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	tcmalloc_minimal_debug_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	tcmalloc_minimal_large_heap_fragmentation_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	tcmalloc_minimal_large_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	tcmalloc_minimal_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	tcmalloc_unittest	/^func_parse_lt_options ()$/;"	f
func_parse_lt_options	thread_dealloc_unittest	/^func_parse_lt_options ()$/;"	f
func_quote_for_eval	libtool	/^func_quote_for_eval ()$/;"	f
func_quote_for_eval	ltmain.sh	/^func_quote_for_eval ()$/;"	f
func_quote_for_expand	libtool	/^func_quote_for_expand ()$/;"	f
func_quote_for_expand	ltmain.sh	/^func_quote_for_expand ()$/;"	f
func_relative_path	libtool	/^func_relative_path ()$/;"	f
func_relative_path	ltmain.sh	/^func_relative_path ()$/;"	f
func_replace_sysroot	libtool	/^func_replace_sysroot ()$/;"	f
func_replace_sysroot	ltmain.sh	/^func_replace_sysroot ()$/;"	f
func_resolve_sysroot	libtool	/^func_resolve_sysroot ()$/;"	f
func_resolve_sysroot	ltmain.sh	/^func_resolve_sysroot ()$/;"	f
func_show_eval	libtool	/^func_show_eval ()$/;"	f
func_show_eval	ltmain.sh	/^func_show_eval ()$/;"	f
func_show_eval_locale	libtool	/^func_show_eval_locale ()$/;"	f
func_show_eval_locale	ltmain.sh	/^func_show_eval_locale ()$/;"	f
func_source	libtool	/^func_source ()$/;"	f
func_source	ltmain.sh	/^func_source ()$/;"	f
func_split_long_opt	config.status	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	configure	/^func_split_long_opt ()\\$/;"	f
func_split_long_opt	libtool	/^func_split_long_opt ()$/;"	f
func_split_long_opt	ltmain.sh	/^func_split_long_opt ()$/;"	f
func_split_short_opt	config.status	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	configure	/^func_split_short_opt ()\\$/;"	f
func_split_short_opt	libtool	/^func_split_short_opt ()$/;"	f
func_split_short_opt	ltmain.sh	/^func_split_short_opt ()$/;"	f
func_stripname	config.status	/^func_stripname ()\\$/;"	f
func_stripname	configure	/^func_stripname ()\\$/;"	f
func_stripname	libtool	/^func_stripname ()$/;"	f
func_stripname	ltmain.sh	/^func_stripname ()$/;"	f
func_stripname_cnf	configure	/^func_stripname_cnf ()$/;"	f
func_to_host_file	libtool	/^func_to_host_file ()$/;"	f
func_to_host_file	ltmain.sh	/^func_to_host_file ()$/;"	f
func_to_host_path	libtool	/^func_to_host_path ()$/;"	f
func_to_host_path	ltmain.sh	/^func_to_host_path ()$/;"	f
func_to_tool_file	libtool	/^func_to_tool_file ()$/;"	f
func_to_tool_file	ltmain.sh	/^func_to_tool_file ()$/;"	f
func_tr_sh	libtool	/^func_tr_sh ()$/;"	f
func_tr_sh	ltmain.sh	/^func_tr_sh ()$/;"	f
func_usage	libtool	/^func_usage ()$/;"	f
func_usage	ltmain.sh	/^func_usage ()$/;"	f
func_verbose	libtool	/^func_verbose ()$/;"	f
func_verbose	ltmain.sh	/^func_verbose ()$/;"	f
func_version	libtool	/^func_version ()$/;"	f
func_version	ltmain.sh	/^func_version ()$/;"	f
func_warning	libtool	/^func_warning ()$/;"	f
func_warning	ltmain.sh	/^func_warning ()$/;"	f
func_win32_import_lib_p	libtool	/^func_win32_import_lib_p ()$/;"	f
func_win32_import_lib_p	ltmain.sh	/^func_win32_import_lib_p ()$/;"	f
func_win32_libid	libtool	/^func_win32_libid ()$/;"	f
func_win32_libid	ltmain.sh	/^func_win32_libid ()$/;"	f
func_write_libtool_object	libtool	/^func_write_libtool_object ()$/;"	f
func_write_libtool_object	ltmain.sh	/^func_write_libtool_object ()$/;"	f
func_xform	config.status	/^func_xform ()\\$/;"	f
func_xform	configure	/^func_xform ()\\$/;"	f
func_xform	libtool	/^func_xform ()$/;"	f
func_xform	ltmain.sh	/^func_xform ()$/;"	f
function_info_	src/windows/patch_functions.cc	/^  static FunctionInfo function_info_[kNumFunctions];$/;"	m	class:__anon9::WindowsInfo	file:
function_info_	src/windows/patch_functions.cc	/^\/*static*\/ WindowsInfo::FunctionInfo WindowsInfo::function_info_[] = {$/;"	m	class:__anon9::WindowsInfo	file:
function_name	src/windows/patch_functions.cc	/^  static const char* const function_name(int ifunction) {$/;"	f	class:__anon9::LibcInfo
function_name_	src/windows/patch_functions.cc	/^  static const char* const function_name_[kNumFunctions];$/;"	m	class:__anon9::LibcInfo	file:
function_name_	src/windows/patch_functions.cc	/^const char* const LibcInfo::function_name_[] = {$/;"	m	class:__anon9::LibcInfo	file:
futex_private_flag	src/base/spinlock_linux-inl.h	/^static int futex_private_flag = FUTEX_PRIVATE_FLAG;$/;"	v
g_array	src/tests/heap-profiler_unittest.cc	/^int* g_array[kMaxCount];              \/\/ an array of int-vectors$/;"	v
g_delete_hook_calls	src/tests/malloc_extension_c_test.c	/^static int g_delete_hook_calls = 0;$/;"	v	file:
g_have_exited_main	src/tests/heap-checker_unittest.cc	/^static bool g_have_exited_main = false;$/;"	v	file:
g_iters	src/tests/profiler_unittest.cc	/^static int g_iters = 0;   \/\/ argv[1]$/;"	v	file:
g_last_loaded	src/windows/patch_functions.cc	/^static std::set<HMODULE> *g_last_loaded;$/;"	m	namespace:__anon9	file:
g_load_map	src/windows/patch_functions.cc	/^static std::map<HMODULE, int>* g_load_map = NULL;$/;"	v	file:
g_module_libcs	src/windows/patch_functions.cc	/^static LibcInfo* g_module_libcs[] = {$/;"	m	namespace:__anon9	file:
g_new_hook_calls	src/tests/malloc_extension_c_test.c	/^static int g_new_hook_calls = 0;$/;"	v	file:
g_no_memory	src/tests/tcmalloc_unittest.cc	/^volatile bool g_no_memory = false;$/;"	m	namespace:testing	file:
g_old_handler	src/tests/tcmalloc_unittest.cc	/^std::new_handler g_old_handler = NULL;$/;"	m	namespace:testing	file:
g_pprof_path	src/symbolize.cc	/^static string* g_pprof_path = new string(FLAGS_symbolize_pprof);$/;"	v	file:
gamess_enable_	src/tcmalloc.cc	/^void gamess_enable_()$/;"	f
gemsfdtd_enable_	src/tcmalloc.cc	/^void gemsfdtd_enable_()$/;"	f
generation	src/tests/tcmalloc_unittest.cc	/^    int         generation;             \/\/ Generation counter of object contents$/;"	m	struct:testing::TesterThread::Object	file:
get	src/gperftools/heap-checker.h	/^  T* get() const { return reinterpret_cast<T*>(masked_t_ ^ kHideMask); }$/;"	f	class:HiddenPointer
get	src/pagemap.h	/^  void* get(Number k) const {$/;"	f	class:TCMalloc_PageMap1
get	src/pagemap.h	/^  void* get(Number k) const {$/;"	f	class:TCMalloc_PageMap2
get	src/pagemap.h	/^  void* get(Number k) const {$/;"	f	class:TCMalloc_PageMap3
get	src/pprof	/^  sub get {$/;"	s
get	src/tests/profiledata_unittest.cc	/^  T* get() { return data_; }$/;"	f	class:__anon30::scoped_array
get	src/tests/profiledata_unittest.cc	/^  int get() { return fd_; }$/;"	f	struct:__anon30::FileDescriptor
get	src/tests/sampler_test.cc	/^  T* get() { return p_; }$/;"	f	class:__anon27::scoped_array
get	src/tests/sampler_test.cc	/^  const T* get() const { return p_; }$/;"	f	class:__anon27::scoped_array
get_bin_name	src/tcmalloc.cc	/^get_bin_name()$/;"	f	file:
get_chunk_head_mark	src/tcmalloc.cc	/^get_chunk_head_mark(struct chunk_head *chk_head) {$/;"	f	file:
get_ex_size	src/tcmalloc.cc	/^get_ex_size(size_t usr_sz, size_t align) {$/;"	f	file:
get_heap_type	src/tcmalloc.cc	/^get_heap_type(void *ptr) {$/;"	f	file:
get_heap_type_hint	src/tcmalloc.cc	/^get_heap_type_hint()$/;"	f	file:
get_heap_type_hint	src/tcmalloc.cc	/^get_heap_type_hint(size_t size) {$/;"	f	file:
get_out_path	src/tcmalloc.cc	/^get_out_path()$/;"	f
get_stack_impl	src/stacktrace.cc	/^static GetStackImplementation *get_stack_impl = &impl__arm;$/;"	v	file:
get_stack_impl	src/stacktrace.cc	/^static GetStackImplementation *get_stack_impl = &impl__generic;$/;"	v	file:
get_stack_impl	src/stacktrace.cc	/^static GetStackImplementation *get_stack_impl = &impl__instrument;$/;"	v	file:
get_stack_impl	src/stacktrace.cc	/^static GetStackImplementation *get_stack_impl = &impl__libunwind;$/;"	v	file:
get_stack_impl	src/stacktrace.cc	/^static GetStackImplementation *get_stack_impl = &impl__ppc;$/;"	v	file:
get_stack_impl	src/stacktrace.cc	/^static GetStackImplementation *get_stack_impl = &impl__win32;$/;"	v	file:
get_stack_impl	src/stacktrace.cc	/^static GetStackImplementation *get_stack_impl = &impl__x86;$/;"	v	file:
get_thread_disable_counter	src/heap-checker.cc	/^inline int get_thread_disable_counter() {$/;"	f
get_usr_size	src/tcmalloc.cc	/^get_usr_size(size_t malloc_sz, void *usr_ptr) {$/;"	f	file:
getcwd	src/windows/port.h	/^inline char *getcwd(char *buf, size_t size) {$/;"	f
getpagesize	src/windows/port.cc	/^int getpagesize() {$/;"	f
getpc_retval	src/tests/getpc_test.cc	/^static volatile void* getpc_retval = NULL;    \/\/ what GetPC returns$/;"	v	file:
getpc_test_LDADD	Makefile	/^getpc_test_LDADD = $(LDADD)$/;"	m
getpc_test_OBJECTS	Makefile	/^getpc_test_OBJECTS = $(am_getpc_test_OBJECTS)$/;"	m
getpc_test_SOURCES	Makefile	/^getpc_test_SOURCES = src\/tests\/getpc_test.cc src\/getpc.h$/;"	m
getpid	src/windows/port.h	/^inline pid_t getpid(void) { return _getpid(); }$/;"	f
getppid	src/windows/port.h	/^inline pid_t getppid(void) { return 0; }$/;"	f
gettid	src/base/linux_syscall_support.h	/^  LSS_INLINE pid_t LSS_NAME(gettid)() {$/;"	f
gettid	src/stacktrace_instrument-inl.h	56;"	d
give_advice	missing	/^give_advice ()$/;"	f
glibc_override_free	src/libc_override_glibc.h	/^static void glibc_override_free(void *ptr, const void *caller) {$/;"	f
glibc_override_malloc	src/libc_override_glibc.h	/^static void* glibc_override_malloc(size_t size, const void *caller) {$/;"	f
glibc_override_memalign	src/libc_override_glibc.h	/^static void* glibc_override_memalign(size_t align, size_t size,$/;"	f
glibc_override_realloc	src/libc_override_glibc.h	/^static void* glibc_override_realloc(void *ptr, size_t size,$/;"	f
global_profiler_buffer	src/heap-profiler.cc	/^static char* global_profiler_buffer = NULL;$/;"	v	file:
global_region_caller_ranges	src/heap-checker.cc	/^static GlobalRegionCallerRangeMap* global_region_caller_ranges = NULL;$/;"	v	file:
gobmk_stdin_redirect_	src/tcmalloc.cc	/^gobmk_stdin_redirect_(){$/;"	f
google_malloc	src/malloc_hook.cc	/^DECLARE_ATTRIBUTE_SECTION_VARS(google_malloc);$/;"	v
google_malloc	src/malloc_hook.cc	/^DEFINE_ATTRIBUTE_SECTION_VARS(google_malloc);$/;"	v
google_malloc	src/tcmalloc.cc	/^      ATTRIBUTE_SECTION(google_malloc);$/;"	v
googleinclude_HEADERS	Makefile	/^googleinclude_HEADERS = \\$/;"	m
googleincludedir	Makefile	/^googleincludedir = $(includedir)\/google$/;"	m
got_66_prefix_	src/windows/mini_disassembler.h	/^  bool got_f2_prefix_, got_f3_prefix_, got_66_prefix_;$/;"	m	class:sidestep::MiniDisassembler
got_f2_prefix_	src/windows/mini_disassembler.h	/^  bool got_f2_prefix_, got_f3_prefix_, got_66_prefix_;$/;"	m	class:sidestep::MiniDisassembler
got_f3_prefix_	src/windows/mini_disassembler.h	/^  bool got_f2_prefix_, got_f3_prefix_, got_66_prefix_;$/;"	m	class:sidestep::MiniDisassembler
granularity_	src/windows/preamble_patcher.cc	/^long PreamblePatcher::granularity_ = 0;$/;"	m	class:sidestep::PreamblePatcher	file:
granularity_	src/windows/preamble_patcher.h	/^  static long granularity_;$/;"	m	class:sidestep::PreamblePatcher
growth_stacks	src/static_vars.h	/^  static StackTrace* growth_stacks() { return growth_stacks_; }$/;"	f	class:tcmalloc::Static
growth_stacks_	src/static_vars.cc	/^StackTrace* Static::growth_stacks_ = NULL;$/;"	m	class:tcmalloc::Static	file:
growth_stacks_	src/static_vars.h	/^  static StackTrace* growth_stacks_;$/;"	m	class:tcmalloc::Static
grp	src/tests/heap-checker_unittest.cc	/^static struct group* grp = NULL;$/;"	v	typeref:struct:group	file:
gs	src/base/elfcore.h	/^    uint64_t  ds,es,fs,gs;$/;"	m	struct:i386_regs
gs_base	src/base/elfcore.h	/^    uint64_t  fs_base, gs_base;$/;"	m	struct:i386_regs
has_called_before_constructors	src/heap-checker.cc	/^static bool has_called_before_constructors = false;$/;"	v	file:
has_checked_	src/gperftools/heap-checker.h	/^  bool has_checked_;  \/\/ if we have done the leak check, so these are ready:$/;"	m	class:HeapLeakChecker
has_cmpxchg16b	src/base/atomicops-internals-x86.h	/^  bool has_cmpxchg16b;      \/\/ Processor supports cmpxchg16b instruction.$/;"	m	struct:AtomicOps_x86CPUFeatureStruct
has_sse2	src/base/atomicops-internals-x86.h	/^  bool has_sse2;            \/\/ Processor has SSE2.$/;"	m	struct:AtomicOps_x86CPUFeatureStruct
hash	src/heap-profile-stats.h	/^  uintptr_t hash;           \/\/ Hash value of the stack trace.$/;"	m	struct:HeapProfileBucket
hash	src/stack_trace_table.h	/^    uintptr_t hash;$/;"	m	struct:tcmalloc::StackTraceTable::Bucket
hash_	src/base/elf_mem_image.h	/^  const ElfW(Word) *hash_;$/;"	m	class:base::ElfMemImage
hash_	src/profiledata.h	/^  Bucket*       hash_;          \/\/ hash table$/;"	m	class:ProfileData
hashtable_	src/addressmap-inl.h	/^  Cluster**     hashtable_;              \/\/ The hash-table$/;"	m	class:AddressMap
have_futex	src/base/spinlock_linux-inl.h	/^static bool have_futex;$/;"	v
have_modrm_	src/windows/mini_disassembler.h	/^  bool have_modrm_;$/;"	m	class:sidestep::MiniDisassembler
have_tls	src/thread_cache.h	/^  enum { have_tls = true };$/;"	e	enum:tcmalloc::ThreadCache::__anon15
hc_strstr	src/heap-checker.cc	/^static const char* hc_strstr(const char* s1, const char* s2) {$/;"	f	file:
head	src/central_freelist.h	/^    void *head;  \/\/ Head of chain of objects.$/;"	m	struct:tcmalloc::CentralFreeList::TCEntry
header	src/base/low_level_alloc.cc	/^    } header;$/;"	m	struct:low_level_alloc_internal::AllocList	typeref:struct:low_level_alloc_internal::AllocList::Header	file:
heap	src/thread_cache.h	/^    ThreadCache* heap[NR_HEAP_TYPE];$/;"	m	struct:tcmalloc::ThreadCache::ThreadLocalData
heap_	src/tests/tcmalloc_unittest.cc	/^  vector<Object>        heap_;          \/\/ This thread's heap$/;"	m	class:testing::TesterThread	file:
heap_check	src/tests/heap-checker_unittest.cc	/^DECLARE_string(heap_check);  \/\/ in heap-checker.cc$/;"	v
heap_check_max_pointer_offset	src/tests/heap-checker_unittest.cc	/^DECLARE_int64(heap_check_max_pointer_offset);   \/\/ heap-checker.cc$/;"	v
heap_checker_death_unittest_sh_LDADD	Makefile	/^heap_checker_death_unittest_sh_LDADD = $(LDADD)$/;"	m
heap_checker_death_unittest_sh_OBJECTS	Makefile	/^heap_checker_death_unittest_sh_OBJECTS =  \\$/;"	m
heap_checker_death_unittest_sh_SOURCES	Makefile	/^heap_checker_death_unittest_sh_SOURCES = src\/tests\/heap-checker-death_unittest.sh$/;"	m
heap_checker_debug_unittest_CXXFLAGS	Makefile	/^heap_checker_debug_unittest_CXXFLAGS = $(heap_checker_unittest_CXXFLAGS)$/;"	m
heap_checker_debug_unittest_DEPENDENCIES	Makefile	/^heap_checker_debug_unittest_DEPENDENCIES = libtcmalloc_debug.la \\$/;"	m
heap_checker_debug_unittest_LDADD	Makefile	/^heap_checker_debug_unittest_LDADD = libtcmalloc_debug.la liblogging.la \\$/;"	m
heap_checker_debug_unittest_LDFLAGS	Makefile	/^heap_checker_debug_unittest_LDFLAGS = $(heap_checker_unittest_LDFLAGS)$/;"	m
heap_checker_debug_unittest_LINK	Makefile	/^heap_checker_debug_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
heap_checker_debug_unittest_OBJECTS	Makefile	/^heap_checker_debug_unittest_OBJECTS =  \\$/;"	m
heap_checker_debug_unittest_SOURCES	Makefile	/^heap_checker_debug_unittest_SOURCES = $(heap_checker_unittest_SOURCES)$/;"	m
heap_checker_debug_unittest_sh_LDADD	Makefile	/^heap_checker_debug_unittest_sh_LDADD = $(LDADD)$/;"	m
heap_checker_debug_unittest_sh_OBJECTS	Makefile	/^heap_checker_debug_unittest_sh_OBJECTS =  \\$/;"	m
heap_checker_debug_unittest_sh_SOURCES	Makefile	/^heap_checker_debug_unittest_sh_SOURCES = src\/tests\/heap-checker_unittest.sh$/;"	m
heap_checker_h	src/tests/simple_compat_test.cc	/^HeapLeakChecker::Disabler* heap_checker_h;$/;"	v
heap_checker_info_level	src/heap-checker.cc	/^static const int heap_checker_info_level = 0;$/;"	v	file:
heap_checker_on	src/heap-checker.cc	/^static bool heap_checker_on = false;$/;"	v	file:
heap_checker_pid	src/heap-checker.cc	/^static pid_t heap_checker_pid = 0;$/;"	v	file:
heap_checker_unittest_CXXFLAGS	Makefile	/^heap_checker_unittest_CXXFLAGS = -g $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
heap_checker_unittest_DEPENDENCIES	Makefile	/^heap_checker_unittest_DEPENDENCIES =  \\$/;"	m
heap_checker_unittest_LDADD	Makefile	/^heap_checker_unittest_LDADD = $(LIBTCMALLOC) liblogging.la $(PTHREAD_LIBS)$/;"	m
heap_checker_unittest_LDFLAGS	Makefile	/^heap_checker_unittest_LDFLAGS = -g $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
heap_checker_unittest_LINK	Makefile	/^heap_checker_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
heap_checker_unittest_OBJECTS	Makefile	/^heap_checker_unittest_OBJECTS = $(am_heap_checker_unittest_OBJECTS)$/;"	m
heap_checker_unittest_SOURCES	Makefile	/^heap_checker_unittest_SOURCES = src\/tests\/heap-checker_unittest.cc \\$/;"	m
heap_checker_unittest_sh_LDADD	Makefile	/^heap_checker_unittest_sh_LDADD = $(LDADD)$/;"	m
heap_checker_unittest_sh_OBJECTS	Makefile	/^heap_checker_unittest_sh_OBJECTS =  \\$/;"	m
heap_checker_unittest_sh_SOURCES	Makefile	/^heap_checker_unittest_sh_SOURCES = src\/tests\/heap-checker_unittest.sh$/;"	m
heap_cleanups_	src/gperftools/heap-checker.h	/^  static std::vector<void_function>* heap_cleanups_;$/;"	m	class:HeapCleaner
heap_cleanups_	src/heap-checker.cc	/^vector<HeapCleaner::void_function>* HeapCleaner::heap_cleanups_ = NULL;$/;"	m	class:HeapCleaner	file:
heap_key_	src/thread_cache.cc	/^pthread_key_t ThreadCache::heap_key_;$/;"	m	class:tcmalloc::ThreadCache	file:
heap_key_	src/thread_cache.h	/^  static pthread_key_t heap_key_;$/;"	m	class:tcmalloc::ThreadCache
heap_leak_checker_bcad_variable	src/heap-checker-bcad.cc	/^bool heap_leak_checker_bcad_variable;$/;"	v
heap_leak_checker_global_pre_post	src/heap-checker-bcad.cc	/^static const HeapLeakCheckerGlobalPrePost heap_leak_checker_global_pre_post;$/;"	v	file:
heap_profile	src/heap-checker.cc	/^static HeapProfileTable* heap_profile = NULL;$/;"	v	file:
heap_profile	src/heap-profiler.cc	/^static HeapProfileTable* heap_profile = NULL;  \/\/ the heap profile table$/;"	v	file:
heap_profile_end_writer	src/heap-profiler.cc	/^static HeapProfileEndWriter heap_profile_end_writer;$/;"	v	file:
heap_profiler_debug_unittest_CXXFLAGS	Makefile	/^heap_profiler_debug_unittest_CXXFLAGS = $(heap_profiler_unittest_CXXFLAGS)$/;"	m
heap_profiler_debug_unittest_DEPENDENCIES	Makefile	/^heap_profiler_debug_unittest_DEPENDENCIES = libtcmalloc_debug.la \\$/;"	m
heap_profiler_debug_unittest_LDADD	Makefile	/^heap_profiler_debug_unittest_LDADD = libtcmalloc_debug.la $(PTHREAD_LIBS)$/;"	m
heap_profiler_debug_unittest_LDFLAGS	Makefile	/^heap_profiler_debug_unittest_LDFLAGS = $(heap_profiler_unittest_LDFLAGS)$/;"	m
heap_profiler_debug_unittest_LINK	Makefile	/^heap_profiler_debug_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
heap_profiler_debug_unittest_OBJECTS	Makefile	/^heap_profiler_debug_unittest_OBJECTS =  \\$/;"	m
heap_profiler_debug_unittest_SOURCES	Makefile	/^heap_profiler_debug_unittest_SOURCES = $(heap_profiler_unittest_SOURCES)$/;"	m
heap_profiler_debug_unittest_sh_LDADD	Makefile	/^heap_profiler_debug_unittest_sh_LDADD = $(LDADD)$/;"	m
heap_profiler_debug_unittest_sh_OBJECTS	Makefile	/^heap_profiler_debug_unittest_sh_OBJECTS =  \\$/;"	m
heap_profiler_debug_unittest_sh_SOURCES	Makefile	/^heap_profiler_debug_unittest_sh_SOURCES = src\/tests\/heap-profiler_unittest.sh$/;"	m
heap_profiler_h	src/tests/simple_compat_test.cc	/^void (*heap_profiler_h)(const char*) = &HeapProfilerStart;$/;"	v
heap_profiler_memory	src/heap-profiler.cc	/^static LowLevelAlloc::Arena *heap_profiler_memory;$/;"	v	file:
heap_profiler_unittest_CXXFLAGS	Makefile	/^heap_profiler_unittest_CXXFLAGS = -g $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
heap_profiler_unittest_DEPENDENCIES	Makefile	/^heap_profiler_unittest_DEPENDENCIES =  \\$/;"	m
heap_profiler_unittest_LDADD	Makefile	/^heap_profiler_unittest_LDADD = $(LIBTCMALLOC) $(PTHREAD_LIBS)$/;"	m
heap_profiler_unittest_LDFLAGS	Makefile	/^heap_profiler_unittest_LDFLAGS = -g $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
heap_profiler_unittest_LINK	Makefile	/^heap_profiler_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
heap_profiler_unittest_OBJECTS	Makefile	/^heap_profiler_unittest_OBJECTS = $(am_heap_profiler_unittest_OBJECTS)$/;"	m
heap_profiler_unittest_SOURCES	Makefile	/^heap_profiler_unittest_SOURCES = src\/tests\/heap-profiler_unittest.cc \\$/;"	m
heap_profiler_unittest_sh_LDADD	Makefile	/^heap_profiler_unittest_sh_LDADD = $(LDADD)$/;"	m
heap_profiler_unittest_sh_OBJECTS	Makefile	/^heap_profiler_unittest_sh_OBJECTS =  \\$/;"	m
heap_profiler_unittest_sh_SOURCES	Makefile	/^heap_profiler_unittest_sh_SOURCES = src\/tests\/heap-profiler_unittest.sh$/;"	m
heap_size_	src/tests/tcmalloc_unittest.cc	/^  size_t                heap_size_;     \/\/ Current heap size$/;"	m	class:testing::TesterThread	file:
heap_type2mmap_type	config_bak.h	317;"	d
heap_type2mmap_type	src/cacheex.h	20;"	d
heaptype	src/span.h	/^  int			heaptype;		\/\/ Heap type$/;"	m	struct:tcmalloc::Span
held_	src/central_freelist.cc	/^  SpinLock *held_, *temp_;$/;"	m	class:tcmalloc::__anon51::LockInverter	file:
hi	src/base/elfcore.h	/^    unsigned long hi;           \/* Used for multiplication and division.     *\/$/;"	m	struct:mips_regs
high_water_mark	src/heap-profiler.cc	/^static int64 high_water_mark = 0;     \/\/ In-use-bytes at last high-water dump$/;"	v	file:
history	src/span.h	/^  char history[64];$/;"	m	struct:tcmalloc::Span
hmodule	src/windows/patch_functions.cc	/^  HMODULE hmodule() const {$/;"	f	class:__anon9::LibcInfo
hook_	src/windows/auto_testing_hook.h	/^  AutoTestingHookBase* hook_;$/;"	m	class:sidestep::AutoTestingHookHolder
host	Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host	src/pprof	/^   host:port[\/<service>]   - a location of a service to get profile from$/;"	l
host_alias	Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = unknown$/;"	m
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
hugetlb_base_	src/memfs_malloc.cc	/^  off_t hugetlb_base_;$/;"	m	class:HugetlbSysAllocator	file:
hugetlb_fd_	src/memfs_malloc.cc	/^  int hugetlb_fd_;       \/\/ file descriptor for hugetlb$/;"	m	class:HugetlbSysAllocator	file:
hugetlb_space	src/memfs_malloc.cc	/^static char hugetlb_space[sizeof(HugetlbSysAllocator)];$/;"	v	file:
i0	src/tests/heap-checker_unittest.cc	/^  Inner i0;$/;"	m	struct:Nesting	file:
i1	src/tests/heap-checker_unittest.cc	/^  Inner i1;$/;"	m	struct:Nesting	file:
i2	src/tests/heap-checker_unittest.cc	/^  Inner i2;$/;"	m	struct:Nesting	file:
i3	src/tests/heap-checker_unittest.cc	/^  Inner i3;$/;"	m	struct:Nesting	file:
i386_regs	src/base/elfcore.h	/^  typedef struct i386_regs {    \/* Normal (non-FPU) CPU registers            *\/$/;"	s
i386_regs	src/base/elfcore.h	/^  } i386_regs;$/;"	t	typeref:struct:i386_regs
ibuf_	src/base/sysinfo.h	/^  char *ibuf_;        \/\/ input buffer$/;"	m	class:ProcMapsIterator
id	src/addressmap-inl.h	/^    Number   id;                        \/\/ Cluster ID$/;"	m	struct:AddressMap::Cluster
id	src/tests/testutil.cc	/^  int id;$/;"	m	struct:FunctionAndId	file:
id_	src/tests/tcmalloc_unittest.cc	/^  int                   id_;            \/\/ My thread id$/;"	m	class:testing::TesterThread	file:
ignore	src/heap-profile-table.h	/^    bool ignore() const { return bucket_rep & kIgnore; }$/;"	f	struct:HeapProfileTable::AllocValue
ignored	src/heap-profile-table.h	/^    bool ignored;$/;"	m	struct:HeapProfileTable::AllocInfo
ignored_objects	src/heap-checker.cc	/^static IgnoredObjectsMap* ignored_objects = NULL;$/;"	v	file:
image_	src/base/elf_mem_image.h	/^    const void *const image_;$/;"	m	class:base::ElfMemImage::SymbolIterator
image_	src/base/vdso_support.h	/^  ElfMemImage image_;$/;"	m	class:base::VDSOSupport
in_setspecific_	src/thread_cache.h	/^  bool          in_setspecific_;        \/\/ In call to pthread_setspecific?$/;"	m	class:tcmalloc::ThreadCache
includedir	Makefile	/^	echo 'includedir='`echo '$(includedir)' | sed 's@^$(prefix)@$${prefix}@'` >> "$@".tmp$/;"	m
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
index_	src/base/elf_mem_image.h	/^    int index_;$/;"	m	class:base::ElfMemImage::SymbolIterator
info_	src/base/elf_mem_image.h	/^    SymbolInfo info_;$/;"	m	class:base::ElfMemImage::SymbolIterator
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
init_chunk_head	src/tcmalloc.cc	/^init_chunk_head(struct chunk_head *p, size_t offset) {$/;"	f	file:
init_default_stack_impl	src/stacktrace.cc	/^static void init_default_stack_impl(void) {$/;"	f	file:
init_default_stack_impl_inner	src/stacktrace.cc	/^static void init_default_stack_impl_inner(void) {$/;"	f	file:
init_helper	src/base/spinlock.cc	/^static SpinLock_InitHelper init_helper;$/;"	m	namespace:__anon35	file:
init_module	src/base/spinlock_linux-inl.h	/^} init_module;$/;"	m	namespace:__anon37	typeref:struct:__anon37::InitModule
init_thread_disable_counter	src/heap-checker.cc	/^InitThreadDisableCounter init_thread_disable_counter;$/;"	v
initialized	src/tests/heap-checker_unittest.cc	/^static Initialized initialized;$/;"	v	file:
initialized_	src/windows/preamble_patcher.cc	/^bool PreamblePatcher::initialized_ = false;$/;"	m	class:sidestep::PreamblePatcher	file:
initialized_	src/windows/preamble_patcher.h	/^  static bool initialized_;$/;"	m	class:sidestep::PreamblePatcher
initializer	src/memory_region_map.cc	/^static bool initializer = (libpthread_initialized = true, true);$/;"	v	file:
inline	src/windows/config.h	290;"	d
inline	src/windows/port.h	489;"	d
inline	src/windows/port.h	84;"	d
inline	src/windows/port.h	86;"	d
ins	src/getpc.h	/^  unsigned char ins[16];$/;"	m	struct:CallUnrollInfo
ins_size	src/getpc.h	/^  int ins_size;$/;"	m	struct:CallUnrollInfo
install_sh	Makefile	/^install_sh = ${SHELL} \/root\/grt\/tcmalloc\/gperftools-2.4_NW_externed_v2.0\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
instance	src/malloc_extension.cc	/^MallocExtension* MallocExtension::instance() {$/;"	f	class:MallocExtension
instance_	src/profile-handler.cc	/^  static ProfileHandler* instance_;$/;"	m	class:ProfileHandler	file:
instance_	src/profile-handler.cc	/^ProfileHandler* ProfileHandler::instance_ = NULL;$/;"	m	class:ProfileHandler	file:
instance_	src/profiler.cc	/^  static CpuProfiler instance_;$/;"	m	class:CpuProfiler	file:
instance_	src/profiler.cc	/^CpuProfiler CpuProfiler::instance_;$/;"	m	class:CpuProfiler	file:
instruction_type_	src/windows/mini_disassembler.h	/^  InstructionType instruction_type_;$/;"	m	class:sidestep::MiniDisassembler
int16	src/base/basictypes.h	/^typedef int16_t             int16;$/;"	t
int16_t	src/windows/port.h	/^typedef __int16 int16_t;$/;"	t
int32	src/base/basictypes.h	/^typedef int32_t             int32;$/;"	t
int32_t	src/windows/port.h	/^typedef __int32 int32_t;$/;"	t
int64	src/base/basictypes.h	/^typedef int64_t             int64;$/;"	t
int64_t	src/windows/port.h	/^typedef __int64 int64_t;$/;"	t
int8	src/base/basictypes.h	/^typedef int8_t              int8;$/;"	t
int8_t	src/windows/port.h	/^typedef __int8 int8_t;$/;"	t
internal	src/base/spinlock_internal.cc	/^namespace base { namespace internal { static int SuggestedDelayNS(int loop); }}$/;"	n	namespace:base	file:
internal	src/base/spinlock_internal.cc	/^namespace internal {$/;"	n	namespace:base	file:
internal	src/base/spinlock_internal.h	/^namespace internal {$/;"	n	namespace:base
internal	src/base/spinlock_linux-inl.h	/^namespace internal {$/;"	n	namespace:base
internal	src/base/spinlock_posix-inl.h	/^namespace internal {$/;"	n	namespace:base
internal	src/base/spinlock_win32-inl.h	/^namespace internal {$/;"	n	namespace:base
internal	src/malloc_hook-inl.h	/^namespace base { namespace internal {$/;"	n	namespace:base
internal	src/malloc_hook.cc	/^namespace base { namespace internal {$/;"	n	namespace:base	file:
internal_init_start_has_run	src/heap-checker.cc	/^static bool internal_init_start_has_run = false;$/;"	v	file:
interrupts	src/profile-handler.h	/^  int64 interrupts;  \/* Number of interrupts received *\/$/;"	m	struct:ProfileHandlerState
inuse	src/page_heap_allocator.h	/^  int inuse() const { return inuse_; }$/;"	f	class:tcmalloc::PageHeapAllocator
inuse_	src/page_heap_allocator.h	/^  int inuse_;$/;"	m	class:tcmalloc::PageHeapAllocator
inuse_allocs_increase_	src/gperftools/heap-checker.h	/^  ssize_t inuse_allocs_increase_;  \/\/ allocations-in-use increase$/;"	m	class:HeapLeakChecker
inuse_bytes_increase_	src/gperftools/heap-checker.h	/^  ssize_t inuse_bytes_increase_;  \/\/ bytes-in-use increase for this checker$/;"	m	class:HeapLeakChecker
invocation_name	src/heap-checker.cc	/^static const char* invocation_name() { return "<your binary>"; }$/;"	f	file:
invocation_name	src/heap-checker.cc	/^static const char* invocation_name() { return program_invocation_short_name; }$/;"	f	file:
invocation_path	src/heap-checker.cc	/^static string invocation_path() { return "<your binary>"; }$/;"	f	file:
invocation_path	src/heap-checker.cc	/^static string invocation_path() { return program_invocation_name; }$/;"	f	file:
invoked_	src/tests/system-alloc_unittest.cc	/^  bool invoked_;$/;"	m	class:ArraySysAllocator	file:
is_encoded_in_instruction_	src/windows/mini_disassembler_types.h	/^  bool is_encoded_in_instruction_;$/;"	m	struct:sidestep::ModrmEntry
is_on	src/heap-profiler.cc	/^static bool  is_on = false;           \/\/ If are on as a subsytem.$/;"	v	file:
is_prefix_dependent_	src/windows/mini_disassembler_types.h	/^  bool is_prefix_dependent_;$/;"	m	struct:sidestep::Opcode
is_safe_	src/base/simple_mutex.h	/^  volatile bool is_safe_;$/;"	m	class:MUTEX_NAMESPACE::Mutex
is_stack	src/memory_region_map.h	/^    bool is_stack;  \/\/ does this region contain a thread's stack:$/;"	m	struct:MemoryRegionMap::Region
is_valid	src/windows/patch_functions.cc	/^  bool is_valid() const { return is_valid_; }$/;"	f	class:__anon9::LibcInfo
is_valid_	src/windows/patch_functions.cc	/^  bool is_valid_;$/;"	m	class:__anon9::LibcInfo	file:
joinable_	src/tests/profile-handler_unittest.cc	/^  bool joinable_;$/;"	m	class:__anon28::Thread	file:
jumpspot	src/windows/shortproc.asm	/^jumpspot:$/;"	l
kAddressBits	src/common.h	/^static const int kAddressBits = (sizeof(void*) < 8 ? (8 * sizeof(void*)) : 48);$/;"	v
kAddressBits	src/common.h	/^static const int kAddressBits = 8 * sizeof(void*);$/;"	v
kAlignment	src/common.h	/^static const size_t kAlignment  = 8;$/;"	v
kAllocIncrement	src/page_heap_allocator.h	/^  static const int kAllocIncrement = 128 << 10;$/;"	m	class:tcmalloc::PageHeapAllocator
kAllocName	src/debugallocation.cc	/^  static const char* const kAllocName[];$/;"	m	class:MallocBlock	file:
kAllocName	src/debugallocation.cc	/^const char* const MallocBlock::kAllocName[] = {$/;"	m	class:MallocBlock	file:
kAllocTypeMask	src/debugallocation.cc	/^  static const int kAllocTypeMask = 0x3;$/;"	m	class:MallocBlock	file:
kArrayNewType	src/debugallocation.cc	/^  static const int kArrayNewType = 0xBCEADF72;$/;"	m	class:MallocBlock	file:
kArraySize	src/tests/system-alloc_unittest.cc	/^  static const int kArraySize = 8 * 1024 * 1024;$/;"	m	class:ArraySysAllocator	file:
kArraySize	src/tests/system-alloc_unittest.cc	/^const int ArraySysAllocator::kArraySize;$/;"	m	class:ArraySysAllocator	file:
kAssociativity	src/profiledata.cc	/^const int ProfileData::kAssociativity;$/;"	m	class:ProfileData	file:
kAssociativity	src/profiledata.h	/^  static const int kAssociativity = 4;          \/\/ For hashtable$/;"	m	class:ProfileData
kAsyncSignalSafe	src/base/low_level_alloc.h	/^    kAsyncSignalSafe = 0x0002,$/;"	e	enum:LowLevelAlloc::__anon38
kBaseClasses	src/common.h	/^static const size_t kBaseClasses = 16;$/;"	v
kBaseClasses	src/common.h	/^static const size_t kBaseClasses = 9;$/;"	v
kBlockBits	src/addressmap-inl.h	/^  static const int kBlockBits = 7;$/;"	m	class:AddressMap
kBlockSize	src/addressmap-inl.h	/^  static const int kBlockSize = 1 << kBlockBits;$/;"	m	class:AddressMap
kBuckets	src/profiledata.cc	/^const int ProfileData::kBuckets;$/;"	m	class:ProfileData	file:
kBuckets	src/profiledata.h	/^  static const int kBuckets = 1 << 10;          \/\/ For hashtable$/;"	m	class:ProfileData
kBufSize	src/base/sysinfo.h	/^    static const size_t kBufSize = 102400;$/;"	m	struct:ProcMapsIterator::Buffer
kBufSize	src/internal_logging.cc	/^  static const int kBufSize = 200;$/;"	m	class:tcmalloc::Logger	file:
kBufferLength	src/profiledata.cc	/^const int ProfileData::kBufferLength;$/;"	m	class:ProfileData	file:
kBufferLength	src/profiledata.h	/^  static const int kBufferLength = 1 << 18;     \/\/ For eviction buffer$/;"	m	class:ProfileData
kCallMallocHook	src/base/low_level_alloc.h	/^    kCallMallocHook = 0x0001,$/;"	e	enum:LowLevelAlloc::__anon38
kCalloc	src/windows/patch_functions.cc	/^    kMalloc, kFree, kRealloc, kCalloc,$/;"	e	enum:__anon9::LibcInfo::__anon10	file:
kClassArraySize	src/common.h	/^  static const size_t kClassArraySize =$/;"	m	class:tcmalloc::SizeMap
kClusterBits	src/addressmap-inl.h	/^  static const int kClusterBits = 13;$/;"	m	class:AddressMap
kClusterBlocks	src/addressmap-inl.h	/^  static const int kClusterBlocks = 1 << kClusterBits;$/;"	m	class:AddressMap
kClusterSize	src/addressmap-inl.h	/^  static const Number kClusterSize = 1 << (kBlockBits + kClusterBits);$/;"	m	class:AddressMap
kCrash	src/internal_logging.h	/^  kCrash,                     \/\/ Print the message and crash$/;"	e	enum:tcmalloc::LogMode
kCrashWithStats	src/internal_logging.h	/^  kCrashWithStats             \/\/ Print the message, some stats, and crash$/;"	e	enum:tcmalloc::LogMode
kCurrent	src/tests/current_allocated_bytes_test.cc	/^const char kCurrent[] = "generic.current_allocated_bytes";$/;"	v
kDeallocName	src/debugallocation.cc	/^  static const char* const kDeallocName[];$/;"	m	class:MallocBlock	file:
kDeallocName	src/debugallocation.cc	/^const char* const MallocBlock::kDeallocName[] = {$/;"	m	class:MallocBlock	file:
kDeallocatedTypeBit	src/debugallocation.cc	/^  static const int kDeallocatedTypeBit = 0x4;$/;"	m	class:MallocBlock	file:
kDebugMode	src/system-alloc.cc	/^static const bool kDebugMode = false;$/;"	v	file:
kDebugMode	src/system-alloc.cc	/^static const bool kDebugMode = true;$/;"	v	file:
kDefaultFrequency	src/profile-handler.cc	/^  static const int32 kDefaultFrequency = 100;$/;"	m	class:ProfileHandler	file:
kDefaultFrequency	src/profile-handler.cc	/^const int32 ProfileHandler::kDefaultFrequency;$/;"	m	class:ProfileHandler	file:
kDefaultLargeAllocReportThreshold	src/tcmalloc.cc	/^const int64 kDefaultLargeAllocReportThreshold = static_cast<int64>(1) << 30;$/;"	v
kDefaultLargeAllocReportThreshold	src/tcmalloc.cc	/^const int64 kDefaultLargeAllocReportThreshold = static_cast<int64>(1) << 62;$/;"	v
kDefaultOverallThreadCacheSize	src/common.h	/^static const size_t kDefaultOverallThreadCacheSize = 8u * kMaxThreadCacheSize;$/;"	v
kDefaultOverallThreadCacheSize	src/common.h	/^static const size_t kDefaultOverallThreadCacheSize = kMaxThreadCacheSize;$/;"	v
kDefaultReleaseDelay	src/page_heap.h	/^  static const int kDefaultReleaseDelay = 1 << 18;$/;"	m	class:tcmalloc::PageHeap
kDefaultTransferNumObjecs	src/common.cc	/^static const int32 kDefaultTransferNumObjecs = 32768;$/;"	m	namespace:tcmalloc	file:
kDelete	src/windows/patch_functions.cc	/^    kNew, kNewArray, kDelete, kDeleteArray,$/;"	e	enum:__anon9::LibcInfo::__anon10	file:
kDeleteArray	src/windows/patch_functions.cc	/^    kNew, kNewArray, kDelete, kDeleteArray,$/;"	e	enum:__anon9::LibcInfo::__anon10	file:
kDeleteArrayNothrow	src/windows/patch_functions.cc	/^    kNewNothrow, kNewArrayNothrow, kDeleteNothrow, kDeleteArrayNothrow,$/;"	e	enum:__anon9::LibcInfo::__anon10	file:
kDeleteNothrow	src/windows/patch_functions.cc	/^    kNewNothrow, kNewArrayNothrow, kDeleteNothrow, kDeleteArrayNothrow,$/;"	e	enum:__anon9::LibcInfo::__anon10	file:
kElfClass	src/base/elf_mem_image.cc	/^  static const int kElfClass = -1;$/;"	m	class:base::__anon44::ElfClass	file:
kElfClass	src/base/elf_mem_image.cc	/^  static const int kElfClass = ELFCLASS32;$/;"	m	class:base::__anon44::ElfClass	file:
kElfClass	src/base/elf_mem_image.cc	/^  static const int kElfClass = ELFCLASS64;$/;"	m	class:base::__anon44::ElfClass	file:
kEnd	src/internal_logging.h	/^    kEnd$/;"	e	enum:tcmalloc::LogItem::Tag
kFastlogMask	src/sampler.h	/^  static const int kFastlogMask = (1 << kFastlogNumBits) - 1;$/;"	m	class:tcmalloc::Sampler
kFastlogNumBits	src/sampler.h	/^  static const int kFastlogNumBits = 10;$/;"	m	class:tcmalloc::Sampler
kFileExt	src/heap-profile-table.cc	/^const char HeapProfileTable::kFileExt[] = ".heap";$/;"	m	class:HeapProfileTable	file:
kFileExt	src/heap-profile-table.h	/^  static const char kFileExt[];$/;"	m	class:HeapProfileTable
kForcedCoalesceInterval	src/page_heap.cc	/^static const size_t kForcedCoalesceInterval = 128*1024*1024;$/;"	m	namespace:tcmalloc	file:
kFree	src/windows/patch_functions.cc	/^    kMalloc, kFree, kRealloc, kCalloc,$/;"	e	enum:__anon9::LibcInfo::__anon10	file:
kFreeLibrary	src/windows/patch_functions.cc	/^    kMapViewOfFileEx, kUnmapViewOfFile, kLoadLibraryExW, kFreeLibrary,$/;"	e	enum:__anon9::WindowsInfo::__anon11	file:
kFreeQueueSize	src/debugallocation.cc	/^  static const int kFreeQueueSize = 1024;$/;"	m	class:FreeQueue	file:
kHashBits	src/addressmap-inl.h	/^  static const int kHashBits = 12;$/;"	m	class:AddressMap
kHashMultiplier	src/addressmap-inl.h	/^  static const uint32_t kHashMultiplier = 2654435769u;$/;"	m	class:AddressMap
kHashSize	src/addressmap-inl.h	/^  static const int kHashSize = 1 << 12;$/;"	m	class:AddressMap
kHashTableSize	src/heap-profile-table.cc	/^static const int kHashTableSize = 179999;   \/\/ Size for bucket_table_.$/;"	v	file:
kHashTableSize	src/memory_region_map.h	/^  static const int kHashTableSize = 179999;$/;"	m	class:MemoryRegionMap
kHashTableSize	src/stack_trace_table.h	/^  static const int kHashTableSize = 1 << 14; \/\/ => table_ is 128k$/;"	m	class:tcmalloc::StackTraceTable
kHashbits	src/packed-cache-inl.h	/^  static const int kHashbits = 12;$/;"	m	class:PackedCache
kHashbits	src/packed-cache-inl.h	/^  static const int kHashbits = 16;$/;"	m	class:PackedCache
kHashbits	src/tests/packed-cache_test.cc	/^static const int kHashbits = PackedCache<64, uint64>::kHashbits;$/;"	v	file:
kHeapAlloc	src/windows/patch_functions.cc	/^    kHeapAlloc, kHeapFree, kVirtualAllocEx, kVirtualFreeEx,$/;"	e	enum:__anon9::WindowsInfo::__anon11	file:
kHeapCheckMaxPointerOffset	src/heap-checker.cc	/^static const int64 kHeapCheckMaxPointerOffset = 1024;$/;"	v	file:
kHeapFree	src/windows/patch_functions.cc	/^    kHeapAlloc, kHeapFree, kVirtualAllocEx, kVirtualFreeEx,$/;"	e	enum:__anon9::WindowsInfo::__anon11	file:
kHideMask	src/gperftools/heap-checker.h	/^  static const uintptr_t kHideMask =$/;"	m	class:HiddenPointer
kHideMask	src/tests/heap-checker_unittest.cc	/^static const uintptr_t kHideMask =$/;"	v	file:
kHookListCapacity	src/malloc_hook-inl.h	/^static const int kHookListCapacity = 8;$/;"	m	namespace:base::internal
kHookListMaxValues	src/malloc_hook-inl.h	/^static const int kHookListMaxValues = 7;$/;"	m	namespace:base::internal
kHookListSingularIdx	src/malloc_hook-inl.h	/^static const int kHookListSingularIdx = 7;$/;"	m	namespace:base::internal
kIgnore	src/heap-profile-table.h	/^    static const int kIgnore = 2;$/;"	m	struct:HeapProfileTable::AllocValue
kIllegalRawFD	src/base/logging.h	/^const RawFD kIllegalRawFD = -1;   \/\/ what open returns if it fails$/;"	v
kIllegalRawFD	src/base/logging.h	/^const RawFD kIllegalRawFD = INVALID_HANDLE_VALUE;$/;"	v
kInvalidBase	src/base/elf_mem_image.cc	/^const void *const ElfMemImage::kInvalidBase =$/;"	m	class:base::ElfMemImage	file:
kInvalidBase	src/base/elf_mem_image.h	/^  static const void *const kInvalidBase;$/;"	m	class:base::ElfMemImage
kIs64BitBinary	src/windows/preamble_patcher.h	/^static const bool kIs64BitBinary = false;$/;"	v
kIs64BitBinary	src/windows/preamble_patcher.h	/^static const bool kIs64BitBinary = true;$/;"	v
kKeyMask	src/packed-cache-inl.h	/^  static const K kKeyMask = N_ONES_(K, kKeybits);$/;"	m	class:PackedCache
kKeys	src/tests/heap-checker_unittest.cc	/^static const int kKeys = 50;$/;"	v	file:
kLargeSizeClass	src/common.h	/^static const size_t kLargeSizeClass = 0;$/;"	v
kLive	src/heap-profile-table.h	/^    static const int kLive = 1;$/;"	m	struct:HeapProfileTable::AllocValue
kLoadLibraryExW	src/windows/patch_functions.cc	/^    kMapViewOfFileEx, kUnmapViewOfFile, kLoadLibraryExW, kFreeLibrary,$/;"	e	enum:__anon9::WindowsInfo::__anon11	file:
kLog	src/internal_logging.h	/^  kLog,                       \/\/ Just print the message$/;"	e	enum:tcmalloc::LogMode
kLogBufSize	src/internal_logging.cc	/^static const int kLogBufSize = 800;$/;"	v	file:
kMagicAllocated	src/base/low_level_alloc.cc	/^static const intptr_t kMagicAllocated = 0x4c833e95;$/;"	v	file:
kMagicDeletedBuffer	src/debugallocation.cc	/^  static unsigned char kMagicDeletedBuffer[1024];$/;"	m	class:MallocBlock	file:
kMagicDeletedBuffer	src/debugallocation.cc	/^unsigned char MallocBlock::kMagicDeletedBuffer[1024];$/;"	m	class:MallocBlock	file:
kMagicDeletedByte	src/debugallocation.cc	/^  static const int kMagicDeletedByte = 0xCD;$/;"	m	class:MallocBlock	file:
kMagicDeletedSizeT	src/debugallocation.cc	/^  static const size_t kMagicDeletedSizeT =$/;"	m	class:MallocBlock	file:
kMagicMMap	src/debugallocation.cc	/^  static const int kMagicMMap = 0xABCDEFAB;$/;"	m	class:MallocBlock	file:
kMagicMMap	src/debugallocation.cc	/^const int MallocBlock::kMagicMMap;$/;"	m	class:MallocBlock	file:
kMagicMalloc	src/debugallocation.cc	/^  static const int kMagicMalloc = 0xDEADBEEF;$/;"	m	class:MallocBlock	file:
kMagicMalloc	src/debugallocation.cc	/^const int MallocBlock::kMagicMalloc;$/;"	m	class:MallocBlock	file:
kMagicUnallocated	src/base/low_level_alloc.cc	/^static const intptr_t kMagicUnallocated = ~kMagicAllocated;$/;"	v	file:
kMagicUninitializedByte	src/debugallocation.cc	/^  static const int kMagicUninitializedByte = 0xAB;$/;"	m	class:MallocBlock	file:
kMalloc	src/windows/patch_functions.cc	/^    kMalloc, kFree, kRealloc, kCalloc,$/;"	e	enum:__anon9::LibcInfo::__anon10	file:
kMallocExtensionHistogramSize	src/gperftools/malloc_extension_c.h	58;"	d
kMallocHistogramSize	src/gperftools/malloc_extension.h	/^static const int kMallocHistogramSize = 64;$/;"	v
kMallocType	src/debugallocation.cc	/^  static const int kMallocType = 0xEFCDAB90;$/;"	m	class:MallocBlock	file:
kMangledDelete	src/windows/patch_functions.cc	/^const char kMangledDelete[] = "??3@YAXPAX@Z";$/;"	v
kMangledDeleteArray	src/windows/patch_functions.cc	/^const char kMangledDeleteArray[] = "??_V@YAXPAX@Z";$/;"	v
kMangledDeleteArrayNothrow	src/windows/patch_functions.cc	/^const char kMangledDeleteArrayNothrow[] = "??_V@YAXPAXABUnothrow_t@std@@@Z";$/;"	v
kMangledDeleteNothrow	src/windows/patch_functions.cc	/^const char kMangledDeleteNothrow[] = "??3@YAXPAXABUnothrow_t@std@@@Z";$/;"	v
kMangledNew	src/windows/patch_functions.cc	/^const char kMangledNew[] = "??2@YAPAXI@Z";$/;"	v
kMangledNewArray	src/windows/patch_functions.cc	/^const char kMangledNewArray[] = "??_U@YAPAXI@Z";$/;"	v
kMangledNewArrayNothrow	src/windows/patch_functions.cc	/^const char kMangledNewArrayNothrow[] = "??_U@YAPAXIABUnothrow_t@std@@@Z";$/;"	v
kMangledNewNothrow	src/windows/patch_functions.cc	/^const char kMangledNewNothrow[] = "??2@YAPAXIABUnothrow_t@std@@@Z";$/;"	v
kMapViewOfFileEx	src/windows/patch_functions.cc	/^    kMapViewOfFileEx, kUnmapViewOfFile, kLoadLibraryExW, kFreeLibrary,$/;"	e	enum:__anon9::WindowsInfo::__anon11	file:
kMask	src/heap-profile-table.h	/^    static const int kMask = kLive | kIgnore;$/;"	m	struct:HeapProfileTable::AllocValue
kMaxAllocators	src/system-alloc.cc	/^  static const int kMaxAllocators = 2;$/;"	m	class:DefaultSysAllocator	file:
kMaxBytes	src/stacktrace_x86-inl.h	/^static const int kMaxBytes = 10;$/;"	v
kMaxCount	src/tests/heap-profiler_unittest.cc	/^static const int kMaxCount = 100000;$/;"	v	file:
kMaxDynamicFreeListLength	src/common.h	/^static const int kMaxDynamicFreeListLength = 8192;$/;"	v
kMaxFrequency	src/profile-handler.cc	/^  static const int32 kMaxFrequency = 4000;$/;"	m	class:ProfileHandler	file:
kMaxFrequency	src/profile-handler.cc	/^const int32 ProfileHandler::kMaxFrequency;$/;"	m	class:ProfileHandler	file:
kMaxLevel	src/base/low_level_alloc.cc	/^static const int kMaxLevel = 30;$/;"	v	file:
kMaxModules	src/windows/patch_functions.cc	/^const int kMaxModules = 8182;$/;"	v
kMaxNumTransferEntries	src/central_freelist.h	/^  static const int kMaxNumTransferEntries = 0;$/;"	m	class:tcmalloc::CentralFreeList
kMaxNumTransferEntries	src/central_freelist.h	/^  static const int kMaxNumTransferEntries = 64;$/;"	m	class:tcmalloc::CentralFreeList
kMaxOverages	src/common.h	/^static const int kMaxOverages = 3;$/;"	v
kMaxPages	src/common.h	/^static const size_t kMaxPages = 1 << (20 - kPageShift);$/;"	v
kMaxReleaseDelay	src/page_heap.h	/^  static const int kMaxReleaseDelay = 1 << 20;$/;"	m	class:tcmalloc::PageHeap
kMaxSignedSize	src/tests/tcmalloc_unittest.cc	/^static const size_t kMaxSignedSize = ((size_t(1) << (kSizeBits-1)) - 1);$/;"	m	namespace:testing	file:
kMaxSize	src/common.h	/^static const size_t kMaxSize    = 256 * 1024;$/;"	v
kMaxSize	src/tests/tcmalloc_unittest.cc	/^static const size_t kMaxSize = ~static_cast<size_t>(0);$/;"	m	namespace:testing	file:
kMaxSmallSize	src/common.h	/^  static const int kMaxSmallSize = 1024;$/;"	m	class:tcmalloc::SizeMap
kMaxStackDepth	src/common.h	/^static const int kMaxStackDepth = 31;$/;"	m	namespace:tcmalloc
kMaxStackDepth	src/heap-profile-stats.h	/^  static const int kMaxStackDepth = 32;$/;"	m	struct:HeapProfileBucket
kMaxStackDepth	src/heap-profile-table.cc	/^\/*static*\/ const int HeapProfileTable::kMaxStackDepth;$/;"	m	class:HeapProfileTable	file:
kMaxStackDepth	src/heap-profile-table.h	/^  static const int kMaxStackDepth = 32;$/;"	m	class:HeapProfileTable
kMaxStackDepth	src/memory_region_map.h	/^  static const int kMaxStackDepth = 32;$/;"	m	class:MemoryRegionMap
kMaxStackDepth	src/profiledata.cc	/^const int ProfileData::kMaxStackDepth;$/;"	m	class:ProfileData	file:
kMaxStackDepth	src/profiledata.h	/^  static const int kMaxStackDepth = 64;  \/\/ Max stack depth stored in profile$/;"	m	class:ProfileData
kMaxThreadCacheSize	src/common.h	/^static const size_t kMaxThreadCacheSize = 4 << 20;$/;"	v
kMaxValidPages	src/common.h	/^static const Length kMaxValidPages = (~static_cast<Length>(0)) >> kPageShift;$/;"	v
kMetadataAllignment	src/common.cc	/^static const size_t kMetadataAllignment = sizeof(void *);$/;"	m	namespace:tcmalloc	file:
kMetadataAllocChunkSize	src/common.cc	/^static const size_t kMetadataAllocChunkSize = 8*1024*1024;$/;"	m	namespace:tcmalloc	file:
kMetadataBigAllocThreshold	src/common.cc	/^static const size_t kMetadataBigAllocThreshold = kMetadataAllocChunkSize \/ 8;$/;"	m	namespace:tcmalloc	file:
kMinAlign	src/common.h	/^static const size_t kMinAlign   = 16;$/;"	v
kMinAlign	src/common.h	/^static const size_t kMinAlign   = 8;$/;"	v
kMinSystemAlloc	src/page_heap.h	/^  static const int kMinSystemAlloc = kMaxPages;$/;"	m	class:tcmalloc::PageHeap
kMinThreadCacheSize	src/common.h	/^static const size_t kMinThreadCacheSize = kMaxSize * 2;$/;"	v
kMmapMagicFd	src/tests/malloc_hook_test.cc	/^const int kMmapMagicFd = 1;$/;"	m	namespace:__anon25	file:
kMmapMagicPointer	src/tests/malloc_hook_test.cc	/^void* const kMmapMagicPointer = reinterpret_cast<void*>(1);$/;"	m	namespace:__anon25	file:
kNew	src/windows/patch_functions.cc	/^    kNew, kNewArray, kDelete, kDeleteArray,$/;"	e	enum:__anon9::LibcInfo::__anon10	file:
kNewArray	src/windows/patch_functions.cc	/^    kNew, kNewArray, kDelete, kDeleteArray,$/;"	e	enum:__anon9::LibcInfo::__anon10	file:
kNewArrayNothrow	src/windows/patch_functions.cc	/^    kNewNothrow, kNewArrayNothrow, kDeleteNothrow, kDeleteArrayNothrow,$/;"	e	enum:__anon9::LibcInfo::__anon10	file:
kNewNothrow	src/windows/patch_functions.cc	/^    kNewNothrow, kNewArrayNothrow, kDeleteNothrow, kDeleteArrayNothrow,$/;"	e	enum:__anon9::LibcInfo::__anon10	file:
kNewType	src/debugallocation.cc	/^  static const int kNewType = 0xFEBADC81;$/;"	m	class:MallocBlock	file:
kNoError	src/tests/profiledata_unittest.cc	/^const char kNoError[] = "";$/;"	m	namespace:__anon30	file:
kNotOwned	src/gperftools/malloc_extension.h	/^    kNotOwned$/;"	e	enum:MallocExtension::Ownership
kNotTooBig	src/tests/tcmalloc_unittest.cc	/^static const size_t kNotTooBig = 100000;$/;"	m	namespace:testing	file:
kNumClasses	src/common.h	/^static const size_t kNumClasses = kBaseClasses + 69;$/;"	v
kNumClasses	src/common.h	/^static const size_t kNumClasses = kBaseClasses + 73;$/;"	v
kNumClasses	src/common.h	/^static const size_t kNumClasses = kBaseClasses + 79;$/;"	v
kNumFunctions	src/windows/patch_functions.cc	/^    kNumFunctions$/;"	e	enum:__anon9::LibcInfo::__anon10	file:
kNumFunctions	src/windows/patch_functions.cc	/^    kNumFunctions$/;"	e	enum:__anon9::WindowsInfo::__anon11	file:
kNumObjects	src/tests/thread_dealloc_unittest.cc	/^static const int kNumObjects = 1024;$/;"	v	file:
kNumThreads	src/tests/thread_dealloc_unittest.cc	/^static const int kNumThreads = 1000;$/;"	v	file:
kOSSupportsMemalign	src/tests/tcmalloc_unittest.cc	/^static bool kOSSupportsMemalign = false;$/;"	v	file:
kOSSupportsMemalign	src/tests/tcmalloc_unittest.cc	/^static bool kOSSupportsMemalign = true;$/;"	v	file:
kObjectSize	src/tests/thread_dealloc_unittest.cc	/^static const int kObjectSize = 1024;$/;"	v	file:
kOwned	src/gperftools/malloc_extension.h	/^    kOwned,$/;"	e	enum:MallocExtension::Ownership
kPageMapBigAllocationThreshold	src/page_heap.h	/^  static const size_t kPageMapBigAllocationThreshold = 128 << 20;$/;"	m	class:tcmalloc::PageHeap
kPageShift	src/common.h	/^static const size_t kPageShift  = 13;$/;"	v
kPageShift	src/common.h	/^static const size_t kPageShift  = 15;$/;"	v
kPageShift	src/common.h	/^static const size_t kPageShift  = 16;$/;"	v
kPageSize	src/common.h	/^static const size_t kPageSize   = 1 << kPageShift;$/;"	v
kPointerSourceAlignment	src/heap-checker.cc	/^static const size_t kPointerSourceAlignment = sizeof(void*);$/;"	v	file:
kPreamblePageMagic	src/windows/preamble_patcher.cc	/^static const unsigned int kPreamblePageMagic = 0x4347414D; \/\/ "MAGC"$/;"	m	namespace:sidestep	file:
kProcSelfMapsHeader	src/heap-profile-table.cc	/^static const char kProcSelfMapsHeader[] = "\\nMAPPED_LIBRARIES:\\n";$/;"	v	file:
kProfileBufferSize	src/heap-profiler.cc	/^static const int kProfileBufferSize = 1 << 20;$/;"	v	file:
kProfileHeader	src/heap-profile-table.cc	/^static const char kProfileHeader[] = "heap profile: ";$/;"	v	file:
kPtr	src/internal_logging.h	/^    kPtr,$/;"	e	enum:tcmalloc::LogItem::Tag
kRealloc	src/windows/patch_functions.cc	/^    kMalloc, kFree, kRealloc, kCalloc,$/;"	e	enum:__anon9::LibcInfo::__anon10	file:
kRoutineSize	src/tests/getpc_test.cc	/^const int kRoutineSize = 512 * sizeof(void*)\/4;    \/\/ allow 1024 for 64-bit$/;"	v
kSamplingInterval	src/tests/sampler_test.cc	/^static const size_t kSamplingInterval = 512*1024;$/;"	v	file:
kSigmas	src/tests/sampler_test.cc	/^static const double kSigmas = 4;$/;"	v	file:
kSigned	src/internal_logging.h	/^    kSigned,$/;"	e	enum:tcmalloc::LogItem::Tag
kSizeBits	src/tests/tcmalloc_unittest.cc	/^static const int kSizeBits = 8 * sizeof(size_t);$/;"	m	namespace:testing	file:
kSleepInterval	src/tests/profile-handler_unittest.cc	/^int kSleepInterval = 200000000;$/;"	m	namespace:__anon28	file:
kSpinLockFree	src/base/spinlock.h	/^  enum { kSpinLockFree = 0 };$/;"	e	enum:SpinLock::__anon40
kSpinLockHeld	src/base/spinlock.h	/^  enum { kSpinLockHeld = 1 };$/;"	e	enum:SpinLock::__anon41
kSpinLockSleeper	src/base/spinlock.h	/^  enum { kSpinLockSleeper = 2 };$/;"	e	enum:SpinLock::__anon42
kStatsBufferSize	src/internal_logging.cc	/^static const int kStatsBufferSize = 16 << 10;$/;"	v	file:
kStealAmount	src/common.h	/^static const size_t kStealAmount = 1 << 16;$/;"	v
kStr	src/internal_logging.h	/^    kStr,$/;"	e	enum:tcmalloc::LogItem::Tag
kStripFrames	src/heap-profile-table.cc	/^static const int kStripFrames = 2;$/;"	v	file:
kStripFrames	src/heap-profile-table.cc	/^static const int kStripFrames = 3;$/;"	v	file:
kStripFrames	src/memory_region_map.cc	/^static const int kStripFrames = 1;$/;"	v	file:
kStripFrames	src/memory_region_map.cc	/^static const int kStripFrames = 3;$/;"	v	file:
kSymbolSize	src/symbolize.h	/^  static const int kSymbolSize = 1024;$/;"	m	class:SymbolTable
kTbits	src/packed-cache-inl.h	/^  static const int kTbits = 8 * sizeof(T);$/;"	m	class:PackedCache
kTimerResetInterval	src/tests/profile-handler_unittest.cc	/^int kTimerResetInterval = 5000000;$/;"	m	namespace:__anon28	file:
kTooBig	src/tests/tcmalloc_unittest.cc	/^static const size_t kTooBig = kMaxSize - 100000;$/;"	m	namespace:testing	file:
kUnknownOwnership	src/gperftools/malloc_extension.h	/^    kUnknownOwnership = 0,$/;"	e	enum:MallocExtension::Ownership
kUnmapViewOfFile	src/windows/patch_functions.cc	/^    kMapViewOfFileEx, kUnmapViewOfFile, kLoadLibraryExW, kFreeLibrary,$/;"	e	enum:__anon9::WindowsInfo::__anon11	file:
kUnnamedProcSelfMapEntry	src/heap-checker.cc	/^static const char kUnnamedProcSelfMapEntry[] = "UNNAMED";$/;"	v	file:
kUnsigned	src/internal_logging.h	/^    kUnsigned,$/;"	e	enum:tcmalloc::LogItem::Tag
kUpperMask	src/packed-cache-inl.h	/^  static const T kUpperMask = N_ONES_(T, kUpperbits) << kValuebits;$/;"	m	class:PackedCache
kUpperbits	src/packed-cache-inl.h	/^  static const int kUpperbits = kUseWholeKeys ? kKeybits : kKeybits - kHashbits;$/;"	m	class:PackedCache
kUseWholeKeys	src/packed-cache-inl.h	/^  static const bool kUseWholeKeys = kKeybits + kValuebits <= 8 * sizeof(T);$/;"	m	class:PackedCache
kValueMask	src/packed-cache-inl.h	/^  static const V kValueMask = N_ONES_(V, kValuebits);$/;"	m	class:PackedCache
kValuebits	src/packed-cache-inl.h	/^  static const int kValuebits = 7;$/;"	m	class:PackedCache
kVirtualAllocEx	src/windows/patch_functions.cc	/^    kHeapAlloc, kHeapFree, kVirtualAllocEx, kVirtualFreeEx,$/;"	e	enum:__anon9::WindowsInfo::__anon11	file:
kVirtualFreeEx	src/windows/patch_functions.cc	/^    kHeapAlloc, kHeapFree, kVirtualAllocEx, kVirtualFreeEx,$/;"	e	enum:__anon9::WindowsInfo::__anon11	file:
k_CallocCrt	src/windows/patch_functions.cc	/^    k_CallocCrt,$/;"	e	enum:__anon9::LibcInfo::__anon10	file:
k_Expand	src/windows/patch_functions.cc	/^    k_Msize, k_Expand,$/;"	e	enum:__anon9::LibcInfo::__anon10	file:
k_Msize	src/windows/patch_functions.cc	/^    k_Msize, k_Expand,$/;"	e	enum:__anon9::LibcInfo::__anon10	file:
keep_profiles_	src/gperftools/heap-checker.h	/^  bool keep_profiles_;  \/\/ iff we should keep the heap profiles we've made$/;"	m	class:HeapLeakChecker
kernel_dirent	src/base/linux_syscall_support.h	/^struct kernel_dirent {$/;"	s
kernel_dirent64	src/base/linux_syscall_support.h	/^struct kernel_dirent64 {$/;"	s
kernel_old_sigaction	src/base/linux_syscall_support.h	/^struct kernel_old_sigaction {$/;"	s
kernel_old_sigaction	src/base/linux_syscall_support.h	262;"	d
kernel_rusage	src/base/linux_syscall_support.h	/^struct kernel_rusage {$/;"	s
kernel_sigaction	src/base/linux_syscall_support.h	/^struct kernel_sigaction {$/;"	s
kernel_sigset_t	src/base/linux_syscall_support.h	/^struct kernel_sigset_t {$/;"	s
kernel_stat	src/base/linux_syscall_support.h	/^struct kernel_stat {$/;"	s
kernel_stat64	src/base/linux_syscall_support.h	/^struct kernel_stat64 {$/;"	s
kernel_timespec	src/base/linux_syscall_support.h	/^struct kernel_timespec {$/;"	s
kernel_timeval	src/base/linux_syscall_support.h	/^struct kernel_timeval {$/;"	s
key	src/addressmap-inl.h	/^    Key    key;$/;"	m	struct:AddressMap::Entry
key	src/tests/heap-checker_unittest.cc	/^static pthread_key_t key[kKeys];$/;"	v	file:
key_for_destr_fn_arg	src/windows/port.cc	/^  pthread_key_t key_for_destr_fn_arg;$/;"	m	struct:DestrFnClosure	file:
key_init_has_run	src/tests/heap-checker_unittest.cc	/^static bool key_init_has_run = false;$/;"	v	file:
kint16max	src/base/basictypes.h	/^const  int16 kint16max  = (   ( int16) 0x7FFF);$/;"	v
kint16min	src/base/basictypes.h	/^const  int16 kint16min  = (   ( int16) 0x8000);$/;"	v
kint32max	src/base/basictypes.h	/^const  int32 kint32max  = (   ( int32) 0x7FFFFFFF);$/;"	v
kint32min	src/base/basictypes.h	/^const  int32 kint32min  = (   ( int32) 0x80000000);$/;"	v
kint64max	src/base/basictypes.h	/^const  int64 kint64max =  ( ((( int64) kint32max) << 32) | kuint32max );$/;"	v
kint64min	src/base/basictypes.h	/^const  int64 kint64min =  ( ((( int64) kint32min) << 32) | 0 );$/;"	v
kint8max	src/base/basictypes.h	/^const  int8  kint8max   = (   (  int8) 0x7F);$/;"	v
kint8min	src/base/basictypes.h	/^const  int8  kint8min   = (   (  int8) 0x80);$/;"	v
kuint16max	src/base/basictypes.h	/^const uint16 kuint16max = (   (uint16) 0xFFFF);$/;"	v
kuint32max	src/base/basictypes.h	/^const uint32 kuint32max = (   (uint32) 0xFFFFFFFF);$/;"	v
kuint64max	src/base/basictypes.h	/^const uint64 kuint64max = ( (((uint64) kuint32max) << 32) | kuint32max );$/;"	v
large_	src/page_heap.h	/^  SpanList large_;$/;"	m	class:tcmalloc::PageHeap
large_alloc_threshold	src/tcmalloc.cc	/^static int64_t large_alloc_threshold =$/;"	m	namespace:__anon5	file:
last_dump_alloc	src/heap-profiler.cc	/^static int64 last_dump_alloc = 0;     \/\/ alloc_size when did we last dump$/;"	v	file:
last_dump_free	src/heap-profiler.cc	/^static int64 last_dump_free = 0;      \/\/ free_size when did we last dump$/;"	v	file:
last_dump_time	src/heap-profiler.cc	/^static int64 last_dump_time = 0;      \/\/ The time of the last dump$/;"	v	file:
layout_ppc	src/stacktrace_powerpc-inl.h	/^struct layout_ppc {$/;"	s
layout_ppc	src/stacktrace_powerpc-linux-inl.h	/^struct layout_ppc {$/;"	s
left_	src/base/low_level_alloc.cc	/^    bool left_;       \/\/ whether left region$/;"	m	class:__anon43::ArenaLock	file:
left_	src/internal_logging.h	/^  int   left_;          \/\/ Space left in buffer (including space for \\0)$/;"	m	class:TCMalloc_Printer
len	src/tests/low_level_alloc_unittest.cc	/^  int len;        \/\/ number of bytes$/;"	m	struct:BlockDesc	file:
length	src/central_freelist.h	/^  int length() {$/;"	f	class:tcmalloc::CentralFreeList
length	src/gperftools/malloc_extension.h	/^  size_t length;        \/\/ Byte length of range$/;"	m	struct:base::MallocRange
length	src/raw_printer.h	/^  int length() const { return (ptr_ - base_); }$/;"	f	class:base::RawPrinter
length	src/span.h	/^  Length        length;         \/\/ Number of pages in span$/;"	m	struct:tcmalloc::Span
length	src/thread_cache.h	/^    size_t length() const {$/;"	f	class:tcmalloc::ThreadCache::FreeList
length_	src/thread_cache.h	/^    uint16_t length_;$/;"	m	class:tcmalloc::ThreadCache::FreeList
length_	src/thread_cache.h	/^    uint32_t length_;      \/\/ Current length.$/;"	m	class:tcmalloc::ThreadCache::FreeList
length_overages	src/thread_cache.h	/^    size_t length_overages() const {$/;"	f	class:tcmalloc::ThreadCache::FreeList
length_overages_	src/thread_cache.h	/^    uint16_t length_overages_;$/;"	m	class:tcmalloc::ThreadCache::FreeList
length_overages_	src/thread_cache.h	/^    uint32_t length_overages_;$/;"	m	class:tcmalloc::ThreadCache::FreeList
leslie3d_enable_	src/tcmalloc.cc	/^void leslie3d_enable_()$/;"	f
leslie3d_stdin_redirect_	src/tcmalloc.cc	/^leslie3d_stdin_redirect_(){$/;"	f
levels	src/base/low_level_alloc.cc	/^    int levels;           \/\/ levels in skiplist used$/;"	m	struct:low_level_alloc_internal::AllocList	file:
lib_LTLIBRARIES	Makefile	/^lib_LTLIBRARIES = libtcmalloc_minimal.la $(am__append_27) \\$/;"	m
libc1	src/windows/patch_functions.cc	/^static LibcInfoWithPatchFunctions<1> libc1;$/;"	m	namespace:__anon9	file:
libc2	src/windows/patch_functions.cc	/^static LibcInfoWithPatchFunctions<2> libc2;$/;"	m	namespace:__anon9	file:
libc3	src/windows/patch_functions.cc	/^static LibcInfoWithPatchFunctions<3> libc3;$/;"	m	namespace:__anon9	file:
libc4	src/windows/patch_functions.cc	/^static LibcInfoWithPatchFunctions<4> libc4;$/;"	m	namespace:__anon9	file:
libc5	src/windows/patch_functions.cc	/^static LibcInfoWithPatchFunctions<5> libc5;$/;"	m	namespace:__anon9	file:
libc6	src/windows/patch_functions.cc	/^static LibcInfoWithPatchFunctions<6> libc6;$/;"	m	namespace:__anon9	file:
libc7	src/windows/patch_functions.cc	/^static LibcInfoWithPatchFunctions<7> libc7;$/;"	m	namespace:__anon9	file:
libc8	src/windows/patch_functions.cc	/^static LibcInfoWithPatchFunctions<8> libc8;$/;"	m	namespace:__anon9	file:
libdir	Makefile	/^	echo 'libdir='`echo '$(libdir)' | sed 's@^$(exec_prefix)@$${exec_prefix}@'` >> "$@".tmp$/;"	m
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
liblogging_la_LIBADD	Makefile	/^liblogging_la_LIBADD =$/;"	m
liblogging_la_OBJECTS	Makefile	/^liblogging_la_OBJECTS = $(am_liblogging_la_OBJECTS)$/;"	m
liblogging_la_SOURCES	Makefile	/^liblogging_la_SOURCES = src\/base\/logging.cc \\$/;"	m
libmaybe_threads_la_LIBADD	Makefile	/^libmaybe_threads_la_LIBADD =$/;"	m
libmaybe_threads_la_OBJECTS	Makefile	/^libmaybe_threads_la_OBJECTS = $(am_libmaybe_threads_la_OBJECTS)$/;"	m
libmaybe_threads_la_SOURCES	Makefile	/^libmaybe_threads_la_SOURCES = src\/maybe_threads.h $(am__append_11) \\$/;"	m
libprofiler_la_DEPENDENCIES	Makefile	/^libprofiler_la_DEPENDENCIES =  \\$/;"	m
libprofiler_la_LDFLAGS	Makefile	/^libprofiler_la_LDFLAGS = -export-symbols-regex $(CPU_PROFILER_SYMBOLS) \\$/;"	m
libprofiler_la_LIBADD	Makefile	/^libprofiler_la_LIBADD = libstacktrace.la libmaybe_threads.la$/;"	m
libprofiler_la_LINK	Makefile	/^libprofiler_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libprofiler_la_OBJECTS	Makefile	/^libprofiler_la_OBJECTS = $(am_libprofiler_la_OBJECTS)$/;"	m
libprofiler_la_SOURCES	Makefile	/^libprofiler_la_SOURCES = src\/profiler.cc \\$/;"	m
libpthread_initialized	src/memory_region_map.cc	/^static bool libpthread_initialized = false;$/;"	v	file:
library_live_objects	src/heap-checker.cc	/^static LibraryLiveObjectsStacks* library_live_objects = NULL;$/;"	v	file:
libspinlock_la_DEPENDENCIES	Makefile	/^libspinlock_la_DEPENDENCIES = $(am__DEPENDENCIES_1)$/;"	m
libspinlock_la_LIBADD	Makefile	/^libspinlock_la_LIBADD = $(NANOSLEEP_LIBS)$/;"	m
libspinlock_la_OBJECTS	Makefile	/^libspinlock_la_OBJECTS = $(am_libspinlock_la_OBJECTS)$/;"	m
libspinlock_la_SOURCES	Makefile	/^libspinlock_la_SOURCES = src\/base\/spinlock.cc \\$/;"	m
libstacktrace_la_DEPENDENCIES	Makefile	/^libstacktrace_la_DEPENDENCIES =  \\$/;"	m
libstacktrace_la_LDFLAGS	Makefile	/^libstacktrace_la_LDFLAGS = -export-symbols-regex $(STACKTRACE_SYMBOLS) $(AM_LDFLAGS)$/;"	m
libstacktrace_la_LIBADD	Makefile	/^libstacktrace_la_LIBADD = $(UNWIND_LIBS) $(LIBSPINLOCK)$/;"	m
libstacktrace_la_LINK	Makefile	/^libstacktrace_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libstacktrace_la_OBJECTS	Makefile	/^libstacktrace_la_OBJECTS = $(am_libstacktrace_la_OBJECTS)$/;"	m
libstacktrace_la_SOURCES	Makefile	/^libstacktrace_la_SOURCES = src\/stacktrace.cc \\$/;"	m
libsysinfo_la_DEPENDENCIES	Makefile	/^libsysinfo_la_DEPENDENCIES = $(am__DEPENDENCIES_1) \\$/;"	m
libsysinfo_la_LIBADD	Makefile	/^libsysinfo_la_LIBADD = $(NANOSLEEP_LIBS) $(am__append_10)$/;"	m
libsysinfo_la_OBJECTS	Makefile	/^libsysinfo_la_OBJECTS = $(am_libsysinfo_la_OBJECTS)$/;"	m
libsysinfo_la_SOURCES	Makefile	/^libsysinfo_la_SOURCES = src\/base\/sysinfo.cc \\$/;"	m
libtcmalloc_and_profiler_la_CXXFLAGS	Makefile	/^libtcmalloc_and_profiler_la_CXXFLAGS = $(libtcmalloc_la_CXXFLAGS) $(libprofiler_la_CXXFLAGS)$/;"	m
libtcmalloc_and_profiler_la_DEPENDENCIES	Makefile	/^libtcmalloc_and_profiler_la_DEPENDENCIES = $(am__DEPENDENCIES_2)$/;"	m
libtcmalloc_and_profiler_la_LDFLAGS	Makefile	/^libtcmalloc_and_profiler_la_LDFLAGS = $(PTHREAD_CFLAGS) \\$/;"	m
libtcmalloc_and_profiler_la_LIBADD	Makefile	/^libtcmalloc_and_profiler_la_LIBADD = $(libtcmalloc_la_LIBADD)$/;"	m
libtcmalloc_and_profiler_la_LINK	Makefile	/^libtcmalloc_and_profiler_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libtcmalloc_and_profiler_la_OBJECTS	Makefile	/^libtcmalloc_and_profiler_la_OBJECTS =  \\$/;"	m
libtcmalloc_and_profiler_la_SOURCES	Makefile	/^libtcmalloc_and_profiler_la_SOURCES = $(libtcmalloc_la_SOURCES) $(libprofiler_la_SOURCES)$/;"	m
libtcmalloc_debug_la_CXXFLAGS	Makefile	/^libtcmalloc_debug_la_CXXFLAGS = $(libtcmalloc_la_CXXFLAGS) \\$/;"	m
libtcmalloc_debug_la_DEPENDENCIES	Makefile	/^libtcmalloc_debug_la_DEPENDENCIES = $(am__DEPENDENCIES_2)$/;"	m
libtcmalloc_debug_la_LDFLAGS	Makefile	/^libtcmalloc_debug_la_LDFLAGS = $(libtcmalloc_la_LDFLAGS) \\$/;"	m
libtcmalloc_debug_la_LIBADD	Makefile	/^libtcmalloc_debug_la_LIBADD = $(libtcmalloc_la_LIBADD)$/;"	m
libtcmalloc_debug_la_LINK	Makefile	/^libtcmalloc_debug_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libtcmalloc_debug_la_OBJECTS	Makefile	/^libtcmalloc_debug_la_OBJECTS = $(am_libtcmalloc_debug_la_OBJECTS)$/;"	m
libtcmalloc_debug_la_SOURCES	Makefile	/^libtcmalloc_debug_la_SOURCES = src\/debugallocation.cc $(HEAP_CHECKER_SOURCES) \\$/;"	m
libtcmalloc_internal_la_CXXFLAGS	Makefile	/^libtcmalloc_internal_la_CXXFLAGS =  \\$/;"	m
libtcmalloc_internal_la_DEPENDENCIES	Makefile	/^libtcmalloc_internal_la_DEPENDENCIES =  \\$/;"	m
libtcmalloc_internal_la_LDFLAGS	Makefile	/^libtcmalloc_internal_la_LDFLAGS = $(PTHREAD_CFLAGS)$/;"	m
libtcmalloc_internal_la_LIBADD	Makefile	/^libtcmalloc_internal_la_LIBADD = libstacktrace.la $(PTHREAD_LIBS)$/;"	m
libtcmalloc_internal_la_LINK	Makefile	/^libtcmalloc_internal_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libtcmalloc_internal_la_OBJECTS	Makefile	/^libtcmalloc_internal_la_OBJECTS =  \\$/;"	m
libtcmalloc_internal_la_SOURCES	Makefile	/^libtcmalloc_internal_la_SOURCES = $(libtcmalloc_minimal_internal_la_SOURCES) \\$/;"	m
libtcmalloc_la_CXXFLAGS	Makefile	/^libtcmalloc_la_CXXFLAGS =  \\$/;"	m
libtcmalloc_la_DEPENDENCIES	Makefile	/^libtcmalloc_la_DEPENDENCIES =  \\$/;"	m
libtcmalloc_la_LDFLAGS	Makefile	/^libtcmalloc_la_LDFLAGS = $(PTHREAD_CFLAGS) -version-info 6:6:2$/;"	m
libtcmalloc_la_LIBADD	Makefile	/^libtcmalloc_la_LIBADD = libtcmalloc_internal.la libmaybe_threads.la $(PTHREAD_LIBS)$/;"	m
libtcmalloc_la_LINK	Makefile	/^libtcmalloc_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libtcmalloc_la_OBJECTS	Makefile	/^libtcmalloc_la_OBJECTS = $(am_libtcmalloc_la_OBJECTS)$/;"	m
libtcmalloc_la_SOURCES	Makefile	/^libtcmalloc_la_SOURCES =  \\$/;"	m
libtcmalloc_minimal_debug_la_CXXFLAGS	Makefile	/^libtcmalloc_minimal_debug_la_CXXFLAGS = $(libtcmalloc_minimal_la_CXXFLAGS) \\$/;"	m
libtcmalloc_minimal_debug_la_DEPENDENCIES	Makefile	/^libtcmalloc_minimal_debug_la_DEPENDENCIES =  \\$/;"	m
libtcmalloc_minimal_debug_la_LDFLAGS	Makefile	/^libtcmalloc_minimal_debug_la_LDFLAGS = $(libtcmalloc_minimal_la_LDFLAGS) \\$/;"	m
libtcmalloc_minimal_debug_la_LIBADD	Makefile	/^libtcmalloc_minimal_debug_la_LIBADD = $(libtcmalloc_minimal_la_LIBADD)$/;"	m
libtcmalloc_minimal_debug_la_LINK	Makefile	/^libtcmalloc_minimal_debug_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libtcmalloc_minimal_debug_la_OBJECTS	Makefile	/^libtcmalloc_minimal_debug_la_OBJECTS =  \\$/;"	m
libtcmalloc_minimal_debug_la_SOURCES	Makefile	/^libtcmalloc_minimal_debug_la_SOURCES = src\/debugallocation.cc \\$/;"	m
libtcmalloc_minimal_internal_la_CXXFLAGS	Makefile	/^libtcmalloc_minimal_internal_la_CXXFLAGS = -DNO_TCMALLOC_SAMPLES \\$/;"	m
libtcmalloc_minimal_internal_la_DEPENDENCIES	Makefile	/^libtcmalloc_minimal_internal_la_DEPENDENCIES = $(am__DEPENDENCIES_1) \\$/;"	m
libtcmalloc_minimal_internal_la_LDFLAGS	Makefile	/^libtcmalloc_minimal_internal_la_LDFLAGS = $(PTHREAD_CFLAGS) $(AM_LDFLAGS)$/;"	m
libtcmalloc_minimal_internal_la_LIBADD	Makefile	/^libtcmalloc_minimal_internal_la_LIBADD = $(PTHREAD_LIBS) $(LIBSPINLOCK) libmaybe_threads.la$/;"	m
libtcmalloc_minimal_internal_la_LINK	Makefile	/^libtcmalloc_minimal_internal_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libtcmalloc_minimal_internal_la_OBJECTS	Makefile	/^libtcmalloc_minimal_internal_la_OBJECTS =  \\$/;"	m
libtcmalloc_minimal_internal_la_SOURCES	Makefile	/^libtcmalloc_minimal_internal_la_SOURCES = src\/common.cc \\$/;"	m
libtcmalloc_minimal_la_CXXFLAGS	Makefile	/^libtcmalloc_minimal_la_CXXFLAGS = -DNO_TCMALLOC_SAMPLES \\$/;"	m
libtcmalloc_minimal_la_DEPENDENCIES	Makefile	/^libtcmalloc_minimal_la_DEPENDENCIES = libtcmalloc_minimal_internal.la \\$/;"	m
libtcmalloc_minimal_la_LDFLAGS	Makefile	/^libtcmalloc_minimal_la_LDFLAGS = $(PTHREAD_CFLAGS) -version-info 6:6:2 $(AM_LDFLAGS)$/;"	m
libtcmalloc_minimal_la_LIBADD	Makefile	/^libtcmalloc_minimal_la_LIBADD = libtcmalloc_minimal_internal.la $(PTHREAD_LIBS)$/;"	m
libtcmalloc_minimal_la_LINK	Makefile	/^libtcmalloc_minimal_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
libtcmalloc_minimal_la_OBJECTS	Makefile	/^libtcmalloc_minimal_la_OBJECTS = $(am_libtcmalloc_minimal_la_OBJECTS)$/;"	m
libtcmalloc_minimal_la_SOURCES	Makefile	/^libtcmalloc_minimal_la_SOURCES = $(TCMALLOC_CC) $(TCMALLOC_MINIMAL_INCLUDES)$/;"	m
libwindows_la_DEPENDENCIES	Makefile	/^libwindows_la_DEPENDENCIES =$/;"	m
libwindows_la_OBJECTS	Makefile	/^libwindows_la_OBJECTS = $(am_libwindows_la_OBJECTS)$/;"	m
limit_	src/raw_printer.h	/^  char* limit_;         \/\/ One past last non-\\0 char we can write$/;"	m	class:base::RawPrinter
link_base_	src/base/elf_mem_image.h	/^  ElfW(Addr) link_base_;     \/\/ Link-time base (p_vaddr of first PT_LOAD).$/;"	m	class:base::ElfMemImage
linux_per_thread_timers_mode_	src/tests/profile-handler_unittest.cc	/^static bool linux_per_thread_timers_mode_ = false;$/;"	m	namespace:__anon28	file:
list	src/tests/malloc_hook_test.cc	/^static TestHookList list = INIT_HOOK_LIST(69);$/;"	m	namespace:__anon25	file:
list_	src/thread_cache.h	/^    void*    list_;       \/\/ Linked list of nodes$/;"	m	class:tcmalloc::ThreadCache::FreeList
list_	src/thread_cache.h	/^  FreeList      list_[kNumClasses];     \/\/ Array indexed by size-class$/;"	m	class:tcmalloc::ThreadCache
live	doc/heap_checker.html	/^<h3><A name=live>Detecting Live Objects<\/A><\/h3>$/;"	a
live	src/heap-profile-table.h	/^    bool live() const { return bucket_rep & kLive; }$/;"	f	struct:HeapProfileTable::AllocValue
live	src/heap-profile-table.h	/^    bool live;$/;"	m	struct:HeapProfileTable::AllocInfo
live_bytes_total	src/heap-checker.cc	/^static int64 live_bytes_total;$/;"	v	file:
live_objects	src/heap-checker.cc	/^static LiveObjectsStack* live_objects = NULL;$/;"	v	file:
live_objects	src/tests/heap-checker_unittest.cc	/^static list<void*>* live_objects = new list<void*>;$/;"	v	file:
live_objects_total	src/heap-checker.cc	/^static int64 live_objects_total;$/;"	v	file:
lo	src/base/elfcore.h	/^    unsigned long lo;$/;"	m	struct:mips_regs
local_atoi	src/base/linuxthreads.cc	/^static int local_atoi(const char *s) {$/;"	f	file:
local_clone	src/base/linuxthreads.cc	/^static int local_clone (int (*fn)(void *), void *arg, ...) {$/;"	f	file:
local_itoa	src/base/linuxthreads.cc	/^static char *local_itoa(char *buf, int i) {$/;"	f	file:
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
location	src/span.h	/^  unsigned int  location : 2;   \/\/ Is the span on a freelist, and if so, which?$/;"	m	struct:tcmalloc::Span
lock	src/base/linuxthreads.cc	/^  sem_t       *lock;$/;"	m	struct:ListerParams	file:
lock_	src/base/spinlock.h	/^  SpinLock* lock_;$/;"	m	class:SpinLockHolder
lock_	src/central_freelist.h	/^  SpinLock lock_;$/;"	m	class:tcmalloc::CentralFreeList
lock_	src/gperftools/heap-checker.h	/^  class SpinLock* lock_;  \/\/ to make HeapLeakChecker objects thread-safe$/;"	m	class:HeapLeakChecker	typeref:class:HeapLeakChecker::SpinLock
lock_	src/memory_region_map.h	/^  static SpinLock lock_;$/;"	m	class:MemoryRegionMap
lock_	src/profiler.cc	/^  SpinLock      lock_;$/;"	m	class:CpuProfiler	file:
lock_	src/tests/tcmalloc_unittest.cc	/^  Mutex                 lock_;          \/\/ For passing in another thread's obj$/;"	m	class:testing::TesterThread	file:
lock_owner_tid_	src/memory_region_map.cc	/^pthread_t MemoryRegionMap::lock_owner_tid_;  \/\/ GUARDED_BY(owner_lock_)$/;"	m	class:MemoryRegionMap	file:
lock_owner_tid_	src/memory_region_map.h	/^  static pthread_t lock_owner_tid_;$/;"	m	class:MemoryRegionMap
locks_failed_	src/tests/tcmalloc_unittest.cc	/^  int                   locks_failed_;  \/\/ Number of failed TryLock() ops$/;"	m	class:testing::TesterThread	file:
locks_ok_	src/tests/tcmalloc_unittest.cc	/^  int                   locks_ok_;      \/\/ Number of OK TryLock() ops$/;"	m	class:testing::TesterThread	file:
lockword_	src/base/spinlock.h	/^  volatile Atomic32 lockword_;$/;"	m	class:SpinLock
log_message_writer	src/internal_logging.cc	/^void (*log_message_writer)(const char* msg, int length) = WriteMessage;$/;"	m	namespace:tcmalloc	file:
log_table_	src/sampler.cc	/^double Sampler::log_table_[1<<kFastlogNumBits];$/;"	m	class:tcmalloc::Sampler	file:
log_table_	src/sampler.h	/^  static double log_table_[1<<kFastlogNumBits];  \/\/ Constant$/;"	m	class:tcmalloc::Sampler
low_level_alloc_internal	src/base/low_level_alloc.cc	/^namespace low_level_alloc_internal {$/;"	n	file:
low_level_alloc_unittest_CXXFLAGS	Makefile	/^low_level_alloc_unittest_CXXFLAGS = -DNO_TCMALLOC_SAMPLES$/;"	m
low_level_alloc_unittest_DEPENDENCIES	Makefile	/^low_level_alloc_unittest_DEPENDENCIES = $(LIBSPINLOCK) \\$/;"	m
low_level_alloc_unittest_LDADD	Makefile	/^low_level_alloc_unittest_LDADD = $(LIBSPINLOCK) libmaybe_threads.la$/;"	m
low_level_alloc_unittest_LINK	Makefile	/^low_level_alloc_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
low_level_alloc_unittest_OBJECTS	Makefile	/^low_level_alloc_unittest_OBJECTS =  \\$/;"	m
low_level_alloc_unittest_SOURCES	Makefile	/^low_level_alloc_unittest_SOURCES = src\/base\/low_level_alloc.cc \\$/;"	m
lowater_	src/thread_cache.h	/^    uint16_t lowater_;$/;"	m	class:tcmalloc::ThreadCache::FreeList
lowater_	src/thread_cache.h	/^    uint32_t lowater_;     \/\/ Low water mark for list length.$/;"	m	class:tcmalloc::ThreadCache::FreeList
lowwatermark	src/thread_cache.h	/^    int lowwatermark() const { return lowater_; }$/;"	f	class:tcmalloc::ThreadCache::FreeList
lr	src/base/elfcore.h	/^    unsigned long lr;$/;"	m	struct:ppc_regs
lseek	src/base/linux_syscall_support.h	/^    LSS_INLINE off_t LSS_NAME(lseek)(int f, off_t o, int w) {$/;"	f
lseek	src/windows/port.h	/^inline off_t lseek(int fd, off_t offset, int whence) {$/;"	f
m	src/windows/get_mangled_names.cc	/^static char m;   \/\/ some dummy memory so new doesn't return NULL.$/;"	v	file:
magic	src/base/low_level_alloc.cc	/^      intptr_t magic; \/\/ kMagicAllocated or kMagicUnallocated xor this$/;"	m	struct:low_level_alloc_internal::AllocList::Header	file:
magic1_	src/debugallocation.cc	/^  size_t magic1_;$/;"	m	class:MallocBlock	file:
magic2_	src/debugallocation.cc	/^  int magic2_;$/;"	m	class:MallocBlock	file:
magic2_addr	src/debugallocation.cc	/^  const int* magic2_addr() const { return (const int*)(size2_addr() + 1); }$/;"	f	class:MallocBlock	file:
magic2_addr	src/debugallocation.cc	/^  int* magic2_addr() { return (int*)(size2_addr() + 1); }$/;"	f	class:MallocBlock	file:
magic_	src/windows/preamble_patcher.h	/^    unsigned int magic_;$/;"	m	struct:sidestep::PreamblePatcher::PreamblePage
main	config.guess	/^		main()$/;"	f
main	config.guess	/^	main ()$/;"	f
main	src/tests/addressmap_unittest.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/atomicops_unittest.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/current_allocated_bytes_test.cc	/^int main() {$/;"	f
main	src/tests/debugallocation_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/frag_unittest.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/getpc_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/heap-checker_unittest.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/heap-profiler_unittest.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/large_heap_fragmentation_unittest.cc	/^int main (int argc, char** argv) {$/;"	f
main	src/tests/low_level_alloc_unittest.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	src/tests/malloc_extension_c_test.c	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/malloc_extension_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/malloc_hook_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/markidle_unittest.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/memalign_unittest.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/packed-cache_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/tests/page_heap_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/tests/pagemap_unittest.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/profile-handler_unittest.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/profiledata_unittest.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/profiler_unittest.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/raw_printer_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/tests/realloc_unittest.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/sampler_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/tests/sampling_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/simple_compat_test.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/stack_trace_table_test.cc	/^int main(int argc, char **argv) {$/;"	f
main	src/tests/stacktrace_unittest.cc	/^int main(int argc, char ** argv) {$/;"	f
main	src/tests/system-alloc_unittest.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/tcmalloc_large_unittest.cc	/^int main (int argc, char** argv) {$/;"	f
main	src/tests/tcmalloc_unittest.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/tests/thread_dealloc_unittest.cc	/^int main(int argc, char** argv) {$/;"	f
main	src/windows/addr2line-pdb.c	/^int main(int argc, char *argv[]) {$/;"	f
main	src/windows/nm-pdb.c	/^int main(int argc, char *argv[]) {$/;"	f
main_executable	src/windows/patch_functions.cc	/^static LibcInfoWithPatchFunctions<0> main_executable;$/;"	m	namespace:__anon9	file:
main_executable_windows	src/windows/patch_functions.cc	/^static WindowsInfo main_executable_windows;$/;"	m	namespace:__anon9	file:
main_heap_checker	src/heap-checker.cc	/^static HeapLeakChecker* main_heap_checker = NULL;$/;"	v	file:
main_thread_counter	src/heap-checker.cc	/^static int main_thread_counter;   \/\/ storage for use before main()$/;"	v	file:
main_thread_pid	src/heap-checker.cc	/^static int32 main_thread_pid = getpid();$/;"	v	file:
major	packages/deb/rules	/^major=`ls src\/.libs\/lib*.so.* | \\$/;"	m
make_dummy_depfile	depcomp	/^make_dummy_depfile ()$/;"	f
malloc	src/windows/override_functions.cc	91;"	d	file:
malloc_extension_c_h	src/tests/simple_compat_test.cc	/^MallocExtension_Ownership malloc_extension_c_h;$/;"	v
malloc_extension_c_test_CFLAGS	Makefile	/^malloc_extension_c_test_CFLAGS = $(PTHREAD_CFLAGS) \\$/;"	m
malloc_extension_c_test_DEPENDENCIES	Makefile	/^malloc_extension_c_test_DEPENDENCIES =  \\$/;"	m
malloc_extension_c_test_LDADD	Makefile	/^malloc_extension_c_test_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS) -lstdc++ -lm$/;"	m
malloc_extension_c_test_LDFLAGS	Makefile	/^malloc_extension_c_test_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
malloc_extension_c_test_LINK	Makefile	/^malloc_extension_c_test_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC \\$/;"	m
malloc_extension_c_test_OBJECTS	Makefile	/^malloc_extension_c_test_OBJECTS =  \\$/;"	m
malloc_extension_c_test_SOURCES	Makefile	/^malloc_extension_c_test_SOURCES = src\/tests\/malloc_extension_c_test.c \\$/;"	m
malloc_extension_debug_test_CXXFLAGS	Makefile	/^malloc_extension_debug_test_CXXFLAGS = $(malloc_extension_test_CXXFLAGS)$/;"	m
malloc_extension_debug_test_DEPENDENCIES	Makefile	/^malloc_extension_debug_test_DEPENDENCIES =  \\$/;"	m
malloc_extension_debug_test_LDADD	Makefile	/^malloc_extension_debug_test_LDADD = libtcmalloc_minimal_debug.la $(PTHREAD_LIBS)$/;"	m
malloc_extension_debug_test_LDFLAGS	Makefile	/^malloc_extension_debug_test_LDFLAGS = $(malloc_extension_test_LDFLAGS)$/;"	m
malloc_extension_debug_test_LINK	Makefile	/^malloc_extension_debug_test_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
malloc_extension_debug_test_OBJECTS	Makefile	/^malloc_extension_debug_test_OBJECTS =  \\$/;"	m
malloc_extension_debug_test_SOURCES	Makefile	/^malloc_extension_debug_test_SOURCES = $(malloc_extension_test_SOURCES)$/;"	m
malloc_extension_h	src/tests/simple_compat_test.cc	/^MallocExtension::Ownership malloc_extension_h;$/;"	v
malloc_extension_test_CXXFLAGS	Makefile	/^malloc_extension_test_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS)$/;"	m
malloc_extension_test_DEPENDENCIES	Makefile	/^malloc_extension_test_DEPENDENCIES = $(LIBTCMALLOC_MINIMAL) \\$/;"	m
malloc_extension_test_LDADD	Makefile	/^malloc_extension_test_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)$/;"	m
malloc_extension_test_LDFLAGS	Makefile	/^malloc_extension_test_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
malloc_extension_test_LINK	Makefile	/^malloc_extension_test_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
malloc_extension_test_OBJECTS	Makefile	/^malloc_extension_test_OBJECTS = $(am_malloc_extension_test_OBJECTS)$/;"	m
malloc_extension_test_SOURCES	Makefile	/^malloc_extension_test_SOURCES = src\/tests\/malloc_extension_test.cc \\$/;"	m
malloc_hook	src/malloc_hook.cc	/^DECLARE_ATTRIBUTE_SECTION_VARS(malloc_hook);$/;"	v
malloc_hook	src/malloc_hook.cc	/^DEFINE_ATTRIBUTE_SECTION_VARS(malloc_hook);$/;"	v
malloc_hook_c_h	src/tests/simple_compat_test.cc	/^MallocHook_NewHook* malloc_hook_c_h;$/;"	v
malloc_hook_h	src/tests/simple_compat_test.cc	/^MallocHook::NewHook* malloc_hook_h;$/;"	v
malloc_hook_test_CXXFLAGS	Makefile	/^malloc_hook_test_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS)$/;"	m
malloc_hook_test_DEPENDENCIES	Makefile	/^malloc_hook_test_DEPENDENCIES = $(LIBTCMALLOC_MINIMAL) \\$/;"	m
malloc_hook_test_LDADD	Makefile	/^malloc_hook_test_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)$/;"	m
malloc_hook_test_LDFLAGS	Makefile	/^malloc_hook_test_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
malloc_hook_test_LINK	Makefile	/^malloc_hook_test_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
malloc_hook_test_OBJECTS	Makefile	/^malloc_hook_test_OBJECTS = $(am_malloc_hook_test_OBJECTS)$/;"	m
malloc_hook_test_SOURCES	Makefile	/^malloc_hook_test_SOURCES = src\/tests\/malloc_hook_test.cc \\$/;"	m
malloc_stats	src/libc_override_osx.h	/^  void malloc_stats(void)                { tc_malloc_stats();         }$/;"	f
malloc_usable_size	src/libc_override_osx.h	/^  size_t malloc_usable_size(void* p)     { return tc_malloc_size(p); }$/;"	f
mallocer_addr	src/tests/heap-checker_unittest.cc	/^static void* (*mallocer_addr)(uintptr_t* addr) = &Mallocer;$/;"	v	file:
mallopt	src/libc_override_osx.h	/^  int mallopt(int cmd, int v)            { return tc_mallopt(cmd, v); }$/;"	f
man1dir	Makefile	/^man1dir = $(mandir)\/man1$/;"	m
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
map_	src/heap-profile-table.h	/^  AllocationMap map_;$/;"	m	class:HeapProfileTable::Snapshot
map_size_	src/memory_region_map.cc	/^int64 MemoryRegionMap::map_size_ = 0;$/;"	m	class:MemoryRegionMap	file:
map_size_	src/memory_region_map.h	/^  static int64 map_size_;$/;"	m	class:MemoryRegionMap
mark	src/tcmalloc.cc	/^	uint32_t mark;$/;"	m	struct:chunk_head	file:
markidle_unittest_CXXFLAGS	Makefile	/^markidle_unittest_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
markidle_unittest_DEPENDENCIES	Makefile	/^markidle_unittest_DEPENDENCIES = $(LIBTCMALLOC_MINIMAL) \\$/;"	m
markidle_unittest_LDADD	Makefile	/^markidle_unittest_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)$/;"	m
markidle_unittest_LDFLAGS	Makefile	/^markidle_unittest_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
markidle_unittest_LINK	Makefile	/^markidle_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
markidle_unittest_OBJECTS	Makefile	/^markidle_unittest_OBJECTS = $(am_markidle_unittest_OBJECTS)$/;"	m
markidle_unittest_SOURCES	Makefile	/^markidle_unittest_SOURCES = src\/tests\/markidle_unittest.cc \\$/;"	m
mask_	src/windows/mini_disassembler_types.h	/^  unsigned char mask_;$/;"	m	struct:sidestep::OpcodeTable
mask_valid_	src/base/low_level_alloc.cc	/^    bool mask_valid_;$/;"	m	class:__anon43::ArenaLock	file:
masked_t_	src/gperftools/heap-checker.h	/^  uintptr_t masked_t_;$/;"	m	class:HiddenPointer
matched	src/tests/tcmalloc_unittest.cc	/^  bool matched;$/;"	m	struct:testing::__anon29::RangeCallbackState	file:
max	src/heap-checker.cc	66;"	d	file:
max_cache_size_	src/central_freelist.h	/^  int32_t max_cache_size_;$/;"	m	class:tcmalloc::CentralFreeList
max_depth	src/heap-checker.cc	/^  int       max_depth;      \/\/ the maximal stack depth to disable at$/;"	m	struct:HeapLeakChecker::RangeValue	file:
max_free_queue_size	src/tests/debugallocation_test.cc	/^DECLARE_int32(max_free_queue_size);$/;"	v
max_free_queue_size	src/tests/tcmalloc_unittest.cc	/^DECLARE_int32(max_free_queue_size);     \/\/ in debugallocation.cc$/;"	v
max_heap_address	src/heap-checker.cc	/^static uintptr_t max_heap_address = 0;$/;"	v	file:
max_heap_object_size	src/heap-checker.cc	/^static size_t max_heap_object_size = 0;$/;"	v	file:
max_length	src/thread_cache.h	/^    size_t max_length() const {$/;"	f	class:tcmalloc::ThreadCache::FreeList
max_length_	src/thread_cache.h	/^    uint16_t max_length_;$/;"	m	class:tcmalloc::ThreadCache::FreeList
max_length_	src/thread_cache.h	/^    uint32_t max_length_;  \/\/ Dynamic max list length based on usage.$/;"	m	class:tcmalloc::ThreadCache::FreeList
max_lim_	src/windows/mini_disassembler_types.h	/^  unsigned char max_lim_;$/;"	m	struct:sidestep::OpcodeTable
max_object_size	src/gperftools/malloc_extension.h	/^    size_t max_object_size;$/;"	m	struct:MallocExtension::FreeListInfo
max_size	src/base/stl_allocator.h	/^  size_type max_size() const { return size_t(-1) \/ sizeof(T); }$/;"	f	class:STL_Allocator
max_size_	src/thread_cache.h	/^  size_t        max_size_;              \/\/ size_ > max_size_ --> Scavenge()$/;"	m	class:tcmalloc::ThreadCache
max_stack_depth_	src/memory_region_map.cc	/^int MemoryRegionMap::max_stack_depth_ = 0;$/;"	m	class:MemoryRegionMap	file:
max_stack_depth_	src/memory_region_map.h	/^  static int max_stack_depth_;$/;"	m	class:MemoryRegionMap
maybe_threads_unittest_sh_LDADD	Makefile	/^maybe_threads_unittest_sh_LDADD = $(LDADD)$/;"	m
maybe_threads_unittest_sh_OBJECTS	Makefile	/^maybe_threads_unittest_sh_OBJECTS =  \\$/;"	m
memalign_debug_unittest_CXXFLAGS	Makefile	/^memalign_debug_unittest_CXXFLAGS = $(memalign_unittest_CXXFLAGS)$/;"	m
memalign_debug_unittest_DEPENDENCIES	Makefile	/^memalign_debug_unittest_DEPENDENCIES = libtcmalloc_minimal_debug.la \\$/;"	m
memalign_debug_unittest_LDADD	Makefile	/^memalign_debug_unittest_LDADD = libtcmalloc_minimal_debug.la $(PTHREAD_LIBS)$/;"	m
memalign_debug_unittest_LDFLAGS	Makefile	/^memalign_debug_unittest_LDFLAGS = $(memalign_unittest_LDFLAGS)$/;"	m
memalign_debug_unittest_LINK	Makefile	/^memalign_debug_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
memalign_debug_unittest_OBJECTS	Makefile	/^memalign_debug_unittest_OBJECTS =  \\$/;"	m
memalign_debug_unittest_SOURCES	Makefile	/^memalign_debug_unittest_SOURCES = $(memalign_unittest_SOURCES)$/;"	m
memalign_fraction_	src/tests/tcmalloc_unittest.cc	/^  double memalign_fraction_;$/;"	m	class:testing::AllocatorState	file:
memalign_unittest_CXXFLAGS	Makefile	/^memalign_unittest_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
memalign_unittest_DEPENDENCIES	Makefile	/^memalign_unittest_DEPENDENCIES =  \\$/;"	m
memalign_unittest_LDADD	Makefile	/^memalign_unittest_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)$/;"	m
memalign_unittest_LDFLAGS	Makefile	/^memalign_unittest_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
memalign_unittest_LINK	Makefile	/^memalign_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
memalign_unittest_OBJECTS	Makefile	/^memalign_unittest_OBJECTS = $(am_memalign_unittest_OBJECTS)$/;"	m
memalign_unittest_SOURCES	Makefile	/^memalign_unittest_SOURCES = src\/tests\/memalign_unittest.cc \\$/;"	m
memcpy_cast	src/maybe_threads.cc	/^static T2 memcpy_cast(const T1 &input) {$/;"	f	file:
metadata_bytes	src/tcmalloc.cc	/^  uint64_t metadata_bytes;    \/\/ Bytes alloced for metadata$/;"	m	struct:TCMallocStats	file:
metadata_chunk_alloc_	src/common.cc	/^static char *metadata_chunk_alloc_;$/;"	m	namespace:tcmalloc	file:
metadata_chunk_avail_	src/common.cc	/^static size_t metadata_chunk_avail_;$/;"	m	namespace:tcmalloc	file:
metadata_system_bytes	src/common.cc	/^uint64_t metadata_system_bytes() { return metadata_system_bytes_; }$/;"	f	namespace:tcmalloc
metadata_system_bytes_	src/common.cc	/^static uint64_t metadata_system_bytes_ = 0;$/;"	m	namespace:tcmalloc	file:
mi_check	src/libc_override_osx.h	/^boolean_t mi_check(malloc_zone_t *zone) {$/;"	f	namespace:__anon24
mi_enumerator	src/libc_override_osx.h	/^kern_return_t mi_enumerator(task_t task, void *,$/;"	f	namespace:__anon24
mi_force_lock	src/libc_override_osx.h	/^void mi_force_lock(malloc_zone_t *zone) {$/;"	f	namespace:__anon24
mi_force_unlock	src/libc_override_osx.h	/^void mi_force_unlock(malloc_zone_t *zone) {$/;"	f	namespace:__anon24
mi_good_size	src/libc_override_osx.h	/^size_t mi_good_size(malloc_zone_t *zone, size_t size) {$/;"	f	namespace:__anon24
mi_log	src/libc_override_osx.h	/^void mi_log(malloc_zone_t *zone, void *address) {$/;"	f	namespace:__anon24
mi_print	src/libc_override_osx.h	/^void mi_print(malloc_zone_t *zone, boolean_t verbose) {$/;"	f	namespace:__anon24
mi_statistics	src/libc_override_osx.h	/^void mi_statistics(malloc_zone_t *zone, malloc_statistics_t *stats) {$/;"	f	namespace:__anon24
mi_zone_locked	src/libc_override_osx.h	/^boolean_t mi_zone_locked(malloc_zone_t *zone) {$/;"	f	namespace:__anon24
milc_stdin_redirect_	src/tcmalloc.cc	/^milc_stdin_redirect_(){$/;"	f
min	src/heap-checker.cc	67;"	d	file:
min_heap_address	src/heap-checker.cc	/^static uintptr_t min_heap_address = uintptr_t(-1LL);$/;"	v	file:
min_lim_	src/windows/mini_disassembler_types.h	/^  unsigned char min_lim_;$/;"	m	struct:sidestep::OpcodeTable
min_object_size	src/gperftools/malloc_extension.h	/^    size_t min_object_size;$/;"	m	struct:MallocExtension::FreeListInfo
min_size	src/base/low_level_alloc.cc	/^  size_t min_size;        \/\/ smallest allocation block size$/;"	m	struct:LowLevelAlloc::Arena	file:
min_size	src/tests/tcmalloc_unittest.cc	/^  size_t min_size;$/;"	m	struct:testing::__anon29::RangeCallbackState	file:
min_size_for_slow_path	src/thread_cache.h	/^    size_t min_size_for_slow_path;$/;"	m	struct:tcmalloc::ThreadCache::ThreadLocalData
mips_regs	src/base/elfcore.h	/^    struct mips_regs mips_regs;$/;"	m	struct:Frame	typeref:struct:Frame::mips_regs
mips_regs	src/base/elfcore.h	/^  typedef struct mips_regs {$/;"	s
mips_regs	src/base/elfcore.h	/^  } mips_regs;$/;"	t	typeref:struct:mips_regs
mkdir	src/windows/port.h	/^inline int mkdir(const char *pathname, int) {$/;"	f
mkdir_p	Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mmap	src/base/linux_syscall_support.h	/^    LSS_INLINE void* LSS_NAME(mmap)(void *s, size_t l, int p, int f, int d,$/;"	f
mmap	src/malloc_hook_mmap_freebsd.h	46;"	d
mmap	src/malloc_hook_mmap_linux.h	137;"	d
mmap	src/windows/port.h	/^inline void *mmap(void *addr, size_t length, int prot, int flags,$/;"	f
mmap_calls	src/tests/malloc_hook_test.cc	/^int mmap_calls = 0;$/;"	m	namespace:__anon25	file:
mmap_hooks_	src/malloc_hook.cc	/^HookList<MallocHook::MmapHook> mmap_hooks_ = INIT_HOOK_LIST;$/;"	m	namespace:base::internal	file:
mmap_matching_calls	src/tests/malloc_hook_test.cc	/^int mmap_matching_calls = 0;$/;"	m	namespace:__anon25	file:
mmap_name	src/system-alloc.cc	/^static const char mmap_name[] = "MmapSysAllocator";$/;"	v	file:
mmap_replacement_	src/malloc_hook.cc	/^HookList<MallocHook::MmapReplacement> mmap_replacement_ = { 0 };$/;"	m	namespace:base::internal	file:
mmap_space	src/system-alloc.cc	/^static char mmap_space[sizeof(MmapSysAllocator)];$/;"	v	file:
mmapper_addr	src/tests/heap-checker_unittest.cc	/^static void* (*mmapper_addr)(uintptr_t* addr) = &Mmapper;$/;"	v	file:
mnemonic_	src/windows/mini_disassembler_types.h	/^  const char* mnemonic_;$/;"	m	struct:sidestep::Opcode
mnemonic_	src/windows/mini_disassembler_types.h	/^  const char* mnemonic_;$/;"	m	struct:sidestep::SpecificOpcode
modBaseAddr	src/windows/patch_functions.cc	/^  LPVOID  modBaseAddr;     \/\/ the same as hmodule$/;"	m	struct:__anon9::ModuleEntryCopy	file:
modBaseSize	src/windows/patch_functions.cc	/^  DWORD   modBaseSize;$/;"	m	struct:__anon9::ModuleEntryCopy	file:
module_	src/base/sysinfo.h	/^  MODULEENTRY32 module_;   \/\/ info about current dll (and dll iterator)$/;"	m	class:ProcMapsIterator
module_base	src/windows/nm-pdb.c	/^  ULONG64 module_base;$/;"	m	struct:__anon13	file:
module_base_address_	src/windows/patch_functions.cc	/^  const void *module_base_address_;$/;"	m	class:__anon9::LibcInfo	file:
module_base_size_	src/windows/patch_functions.cc	/^  size_t module_base_size_;$/;"	m	class:__anon9::LibcInfo	file:
module_enter_exit_hook	src/tcmalloc.cc	/^static TCMallocGuard module_enter_exit_hook;$/;"	v	file:
motivation	doc/tcmalloc.html	/^<h2><A name=motivation>Motivation<\/A><\/h2>$/;"	a
mq	src/base/elfcore.h	/^    unsigned long mq;$/;"	m	struct:ppc_regs
mremap	src/base/linux_syscall_support.h	/^  LSS_INLINE void *LSS_NAME(mremap)(void *old_address, size_t old_size,$/;"	f
mremap	src/malloc_hook.cc	40;"	d	file:
mremap	src/malloc_hook.cc	42;"	d	file:
mremap_hooks_	src/malloc_hook.cc	/^HookList<MallocHook::MremapHook> mremap_hooks_ = INIT_HOOK_LIST;$/;"	m	namespace:base::internal	file:
msr	src/base/elfcore.h	/^    unsigned long msr;$/;"	m	struct:ppc_regs
mu	src/base/low_level_alloc.cc	/^  SpinLock mu;            \/\/ protects freelist, allocation_count,$/;"	m	struct:LowLevelAlloc::Arena	file:
mu_	src/base/simple_mutex.h	/^  Mutex * const mu_;$/;"	m	class:MUTEX_NAMESPACE::MutexLock
mu_	src/base/simple_mutex.h	/^  Mutex * const mu_;$/;"	m	class:MUTEX_NAMESPACE::ReaderMutexLock
mu_	src/base/simple_mutex.h	/^  Mutex * const mu_;$/;"	m	class:MUTEX_NAMESPACE::WriterMutexLock
mu_	src/tests/profile-handler_unittest.cc	/^  Mutex mu_;$/;"	m	class:__anon28::BusyThread	file:
munmap	src/windows/port.h	/^inline int munmap(void *addr, size_t length) {$/;"	f
munmap_calls	src/tests/malloc_hook_test.cc	/^int munmap_calls = 0;$/;"	m	namespace:__anon25	file:
munmap_hooks_	src/malloc_hook.cc	/^HookList<MallocHook::MunmapHook> munmap_hooks_ = INIT_HOOK_LIST;$/;"	m	namespace:base::internal	file:
munmap_matching_calls	src/tests/malloc_hook_test.cc	/^int munmap_matching_calls = 0;$/;"	m	namespace:__anon25	file:
munmap_replacement_	src/malloc_hook.cc	/^HookList<MallocHook::MunmapReplacement> munmap_replacement_ = { 0 };$/;"	m	namespace:base::internal	file:
mutex_	src/base/simple_mutex.h	/^  MutexType mutex_;$/;"	m	class:MUTEX_NAMESPACE::Mutex
my_errno	src/base/linuxthreads.cc	/^    int my_errno;$/;"	m	class:__anon39::SysCalls	file:
mz_calloc	src/libc_override_osx.h	/^void* mz_calloc(malloc_zone_t* zone, size_t num_items, size_t size) {$/;"	f	namespace:__anon24
mz_destroy	src/libc_override_osx.h	/^void mz_destroy(malloc_zone_t* zone) {$/;"	f	namespace:__anon24
mz_free	src/libc_override_osx.h	/^void mz_free(malloc_zone_t* zone, void* ptr) {$/;"	f	namespace:__anon24
mz_malloc	src/libc_override_osx.h	/^void* mz_malloc(malloc_zone_t* zone, size_t size) {$/;"	f	namespace:__anon24
mz_memalign	src/libc_override_osx.h	/^void* mz_memalign(malloc_zone_t* zone, size_t align, size_t size) {$/;"	f	namespace:__anon24
mz_realloc	src/libc_override_osx.h	/^void* mz_realloc(malloc_zone_t* zone, void* ptr, size_t size) {$/;"	f	namespace:__anon24
mz_size	src/libc_override_osx.h	/^size_t mz_size(malloc_zone_t* zone, const void* ptr) {$/;"	f	namespace:__anon24
mz_valloc	src/libc_override_osx.h	/^void* mz_valloc(malloc_zone_t* zone, size_t size) {$/;"	f	namespace:__anon24
n1	src/tests/heap-checker_unittest.cc	/^  char n1[5];$/;"	m	struct:Nesting	file:
n2	src/tests/heap-checker_unittest.cc	/^  char n2[11];$/;"	m	struct:Nesting	file:
n3	src/tests/heap-checker_unittest.cc	/^  char n3[27];$/;"	m	struct:Nesting	file:
name	src/base/elf_mem_image.h	/^    const char      *name;      \/\/ E.g. "__vdso_getcpu"$/;"	m	struct:base::ElfMemImage::SymbolInfo
name	src/stacktrace.cc	/^  const char *name;$/;"	m	struct:GetStackImplementation	file:
name	src/tests/tcmalloc_unittest.cc	/^    string      name;$/;"	m	struct:testing::TestHarness::Type	file:
name	src/windows/nm-pdb.c	/^  char *name;$/;"	m	struct:__anon12	file:
name	src/windows/patch_functions.cc	/^    const char* const name;          \/\/ name of fn in a module (eg "malloc")$/;"	m	struct:__anon9::WindowsInfo::FunctionInfo	file:
name_	src/base/googleinit.h	/^  const char* const name_;$/;"	m	class:GoogleInitializer
name_	src/gperftools/heap-checker.h	/^  const char* name_;  \/\/ our remembered name (we own it)$/;"	m	class:HeapLeakChecker
names_	src/system-alloc.cc	/^  const char* names_[kMaxAllocators];$/;"	m	class:DefaultSysAllocator	file:
nanosleep	src/windows/port.h	/^inline int nanosleep(const struct timespec *req, struct timespec *rem) {$/;"	f
new	src/pprof	/^  sub new {$/;"	s
new_hooks_	src/malloc_hook.cc	/^HookList<MallocHook::NewHook> new_hooks_ =$/;"	m	namespace:base::internal	file:
news_handled	src/tests/tcmalloc_unittest.cc	/^static int news_handled = 0;$/;"	m	namespace:testing	file:
next	src/addressmap-inl.h	/^    Cluster* next;                      \/\/ Next cluster in hash table chain$/;"	m	struct:AddressMap::Cluster
next	src/addressmap-inl.h	/^    Entry* next;$/;"	m	struct:AddressMap::Entry
next	src/addressmap-inl.h	/^    Object* next;$/;"	m	struct:AddressMap::Object
next	src/base/low_level_alloc.cc	/^    AllocList *next[kMaxLevel];   \/\/ actually has levels elements.$/;"	m	struct:low_level_alloc_internal::AllocList	file:
next	src/heap-profile-stats.h	/^  HeapProfileBucket* next;  \/\/ Next entry in hash-table.$/;"	m	struct:HeapProfileBucket
next	src/span.h	/^  Span*         next;           \/\/ Used when in link list$/;"	m	struct:tcmalloc::Span
next	src/stack_trace_table.h	/^    Bucket* next;$/;"	m	struct:tcmalloc::StackTraceTable::Bucket
next	src/stacktrace_powerpc-inl.h	/^  struct layout_ppc *next;$/;"	m	struct:layout_ppc	typeref:struct:layout_ppc::layout_ppc
next	src/stacktrace_powerpc-linux-inl.h	/^  struct layout_ppc *next;$/;"	m	struct:layout_ppc	typeref:struct:layout_ppc::layout_ppc
next_	src/thread_cache.h	/^  ThreadCache* next_;$/;"	m	class:tcmalloc::ThreadCache
next_	src/windows/preamble_patcher.h	/^    PreamblePage* next_;$/;"	m	struct:sidestep::PreamblePatcher::PreamblePage
next_key	src/maybe_threads.cc	/^static int next_key;$/;"	v	file:
next_memory_steal_	src/thread_cache.cc	/^ThreadCache* ThreadCache::next_memory_steal_ = NULL;$/;"	m	class:tcmalloc::ThreadCache	file:
next_memory_steal_	src/thread_cache.h	/^  static ThreadCache* next_memory_steal_;$/;"	m	class:tcmalloc::ThreadCache
nexthistory	src/span.h	/^  int nexthistory;$/;"	m	struct:tcmalloc::Span
nextline_	src/base/sysinfo.h	/^  char *nextline_;    \/\/ start of next line$/;"	m	class:ProcMapsIterator
nodist_perftoolsinclude_HEADERS	Makefile	/^nodist_perftoolsinclude_HEADERS = src\/gperftools\/tcmalloc.h$/;"	m
noinst_HEADERS	Makefile	/^noinst_HEADERS = src\/gperftools\/tcmalloc.h.in$/;"	m
noinst_LTLIBRARIES	Makefile	/^noinst_LTLIBRARIES = liblogging.la libsysinfo.la libmaybe_threads.la \\$/;"	m
noinst_PROGRAMS	Makefile	/^noinst_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2) $(am__EXEEXT_3) \\$/;"	m
noinst_SCRIPTS	Makefile	/^noinst_SCRIPTS = $(am__append_21) $(am__append_33) $(am__append_43) \\$/;"	m
nonempty_	src/central_freelist.h	/^  Span     nonempty_;       \/\/ Dummy header for list of non-empty spans$/;"	m	class:tcmalloc::CentralFreeList
normal	src/page_heap.h	/^    Span        normal;$/;"	m	struct:tcmalloc::PageHeap::SpanList
normal_enable_	src/tcmalloc.cc	/^void normal_enable_(const char *bin_path)$/;"	f
normal_length	src/page_heap.h	/^    int64 normal_length[kMaxPages];$/;"	m	struct:tcmalloc::PageHeap::SmallSpanStats
normal_pages	src/page_heap.h	/^    int64 normal_pages;    \/\/ Combined page length of normal large spans$/;"	m	struct:tcmalloc::PageHeap::LargeSpanStats
not_implemented	src/stacktrace_win32-inl.h	/^static int not_implemented(void) {$/;"	f
notify_heap_type_manager_after_malloc	src/tcmalloc.cc	/^notify_heap_type_manager_after_malloc(void *usr_ptr, size_t size) {$/;"	f	file:
notify_heap_type_manager_before_free	src/tcmalloc.cc	/^notify_heap_type_manager_before_free(void *p) {$/;"	f	file:
notify_heap_type_manager_before_malloc	src/tcmalloc.cc	/^notify_heap_type_manager_before_malloc(size_t size) {$/;"	f	file:
nraddr	src/third_party/valgrind.h	/^      unsigned int nraddr; \/* where's the code? *\/$/;"	m	struct:__anon17
nraddr	src/third_party/valgrind.h	/^      unsigned int nraddr; \/* where's the code? *\/$/;"	m	struct:__anon19
nraddr	src/third_party/valgrind.h	/^      unsigned int nraddr; \/* where's the code? *\/$/;"	m	struct:__anon21
nraddr	src/third_party/valgrind.h	/^      unsigned long long int nraddr; \/* where's the code? *\/$/;"	m	struct:__anon18
nraddr	src/third_party/valgrind.h	/^      unsigned long long int nraddr; \/* where's the code? *\/$/;"	m	struct:__anon20
nraddr	src/third_party/valgrind.h	/^      unsigned long long int nraddr; \/* where's the code? *\/$/;"	m	struct:__anon22
num_buckets_	src/heap-profile-table.h	/^  int num_buckets_;$/;"	m	class:HeapProfileTable
num_buckets_	src/memory_region_map.cc	/^int MemoryRegionMap::num_buckets_ = 0;  \/\/ GUARDED_BY(lock_)$/;"	m	class:MemoryRegionMap	file:
num_deleter_pcs	src/debugallocation.cc	/^  int num_deleter_pcs;$/;"	m	struct:MallocBlockQueueEntry	file:
num_evicted_	src/profiledata.h	/^  int           num_evicted_;   \/\/ how many evicted entries?$/;"	m	class:ProfileData
num_objects_to_move	src/common.h	/^  inline int num_objects_to_move(size_t cl) {$/;"	f	class:tcmalloc::SizeMap
num_objects_to_move_	src/common.h	/^  int num_objects_to_move_[kNumClasses];$/;"	m	class:tcmalloc::SizeMap
num_spans_	src/central_freelist.h	/^  size_t   num_spans_;      \/\/ Number of spans in empty_ plus nonempty_$/;"	m	class:tcmalloc::CentralFreeList
num_tests_	src/tests/tcmalloc_unittest.cc	/^  int                   num_tests_;     \/\/ Num tests run so far$/;"	m	class:testing::TestHarness	file:
num_threads_remaining	src/tests/malloc_hook_test.cc	/^static volatile int num_threads_remaining;$/;"	m	namespace:__anon25	file:
obj_makers	src/tests/heap-checker_unittest.cc	/^static list<ObjMakerFunc> obj_makers;  \/\/ list of registered object makers$/;"	v	file:
object_size	src/heap-profile-table.h	/^    size_t object_size;  \/\/ size of the allocation$/;"	m	struct:HeapProfileTable::AllocInfo
objects	src/span.h	/^  void*         objects;        \/\/ Linked list of free objects$/;"	m	struct:tcmalloc::Span
off_t	src/windows/port.h	/^typedef _off_t off_t;$/;"	t
offset	src/tcmalloc.cc	/^	uint32_t offset;$/;"	m	struct:chunk_head	file:
offset_	src/debugallocation.cc	/^  size_t offset_;   \/\/ normally 0 unless memaligned memory$/;"	m	class:MallocBlock	file:
old_value_	src/tests/tcmalloc_unittest.cc	/^  size_t old_value_;$/;"	m	class:testing::AggressiveDecommitChanger	file:
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
on_process_term	src/windows/port.cc	/^static int on_process_term(void) {$/;"	f	file:
on_tls_callback	src/windows/port.cc	/^static void NTAPI on_tls_callback(HINSTANCE h, DWORD dwReason, PVOID pv) {$/;"	f	file:
once	src/malloc_hook.cc	/^pthread_once_t once = PTHREAD_ONCE_INIT;$/;"	m	namespace:__anon49	file:
once_	src/profile-handler.cc	/^  static pthread_once_t once_;$/;"	m	class:ProfileHandler	file:
once_	src/profile-handler.cc	/^pthread_once_t ProfileHandler::once_ = PTHREAD_ONCE_INIT;$/;"	m	class:ProfileHandler	file:
opcode_if_66_prefix_	src/windows/mini_disassembler_types.h	/^  SpecificOpcode opcode_if_66_prefix_;$/;"	m	struct:sidestep::Opcode
opcode_if_f2_prefix_	src/windows/mini_disassembler_types.h	/^  SpecificOpcode opcode_if_f2_prefix_;$/;"	m	struct:sidestep::Opcode
opcode_if_f3_prefix_	src/windows/mini_disassembler_types.h	/^  SpecificOpcode opcode_if_f3_prefix_;$/;"	m	struct:sidestep::Opcode
open	src/base/linux_syscall_support.h	/^    LSS_INLINE int LSS_NAME(open)(const char* p, int f, int m) {$/;"	f
open	src/windows/port.h	/^inline int open(const char *pathname, int flags, int mode = 0) {$/;"	f
operand_bytes_	src/windows/mini_disassembler.h	/^  unsigned int operand_bytes_;$/;"	m	class:sidestep::MiniDisassembler
operand_default_is_32_bits_	src/windows/mini_disassembler.h	/^  bool operand_default_is_32_bits_;$/;"	m	class:sidestep::MiniDisassembler
operand_default_support_64_bits_	src/windows/mini_disassembler.h	/^  bool operand_default_support_64_bits_;$/;"	m	class:sidestep::MiniDisassembler
operand_is_32_bits_	src/windows/mini_disassembler.h	/^  bool operand_is_32_bits_;$/;"	m	class:sidestep::MiniDisassembler
operand_is_64_bits_	src/windows/mini_disassembler.h	/^  bool operand_is_64_bits_;$/;"	m	class:sidestep::MiniDisassembler
operand_size_	src/windows/mini_disassembler_types.h	/^  OperandSize operand_size_;$/;"	m	struct:sidestep::ModrmEntry
operator !=	src/base/elf_mem_image.cc	/^bool ElfMemImage::SymbolIterator::operator!=(const SymbolIterator &rhs) const {$/;"	f	class:base::ElfMemImage::SymbolIterator
operator ()	src/memory_region_map.h	/^    bool operator()(const Region& x, const Region& y) const {$/;"	f	struct:MemoryRegionMap::RegionCmp
operator *	src/base/elf_mem_image.cc	/^const ElfMemImage::SymbolInfo& ElfMemImage::SymbolIterator::operator*() const {$/;"	f	class:base::ElfMemImage::SymbolIterator
operator ++	src/base/elf_mem_image.cc	/^ElfMemImage::SymbolIterator &ElfMemImage::SymbolIterator::operator++() {$/;"	f	class:base::ElfMemImage::SymbolIterator
operator ->	src/base/elf_mem_image.cc	/^const ElfMemImage::SymbolInfo *ElfMemImage::SymbolIterator::operator->() const {$/;"	f	class:base::ElfMemImage::SymbolIterator
operator <	src/heap-profile-table.cc	/^  bool operator<(const Entry& x) const {$/;"	f	struct:HeapProfileTable::Snapshot::Entry
operator =	src/tests/heap-checker_unittest.cc	/^  void operator=(const Array& x) {$/;"	f	struct:Array
operator ==	src/base/elf_mem_image.cc	/^bool ElfMemImage::SymbolIterator::operator==(const SymbolIterator &rhs) const {$/;"	f	class:base::ElfMemImage::SymbolIterator
operator ==	src/base/stl_allocator.h	/^  bool operator==(const STL_Allocator&) const { return true; }$/;"	f	class:STL_Allocator
operator []	src/tests/profiledata_unittest.cc	/^  T& operator[](int i) { return data_[i]; }$/;"	f	class:__anon30::scoped_array
operator []	src/tests/sampler_test.cc	/^  T& operator[](int i) { return p_[i]; }$/;"	f	class:__anon27::scoped_array
operator delete	src/windows/get_mangled_names.cc	/^void operator delete(void* p) throw() { }$/;"	f
operator delete	src/windows/get_mangled_names.cc	/^void operator delete(void* p, const std::nothrow_t&) throw() { }$/;"	f
operator delete[]	src/windows/get_mangled_names.cc	/^void operator delete[](void* p) throw() { }$/;"	f
operator delete[]	src/windows/get_mangled_names.cc	/^void operator delete[](void* p, const std::nothrow_t&) throw() { }$/;"	f
operator new	src/libc_override_redefine.h	/^void* operator new(size_t size)                  { return tc_new(size);       }$/;"	f
operator new	src/tests/heap-checker_unittest.cc	/^void* operator new(size_t size, const Initialized&) {$/;"	f
operator new	src/windows/get_mangled_names.cc	/^void* operator new(size_t size) { return &m; }$/;"	f
operator new	src/windows/get_mangled_names.cc	/^void* operator new(size_t size, const std::nothrow_t&) throw() { return &m; }$/;"	f
operator new[]	src/libc_override_redefine.h	/^void* operator new[](size_t size)                { return tc_newarray(size);  }$/;"	f
operator new[]	src/tests/heap-checker_unittest.cc	/^void* operator new[](size_t size, const Initialized&) {$/;"	f
operator new[]	src/windows/get_mangled_names.cc	/^void* operator new[](size_t size) { return &m; }$/;"	f
operator new[]	src/windows/get_mangled_names.cc	/^void* operator new[](size_t size, const std::nothrow_t&) throw() { return &m; }$/;"	f
options	doc/cpuprofile.html	/^<h3><a name=options>pprof Options<\/a><\/h3>$/;"	a
options	doc/heap_checker.html	/^<h2><a name="options">Tuning the Heap Checker<\/h2>$/;"	a
orig_rax	src/base/elfcore.h	/^    uint64_t  r9,r8,rax,rcx,rdx,rsi,rdi,orig_rax;$/;"	m	struct:i386_regs
original_function	src/windows/auto_testing_hook.h	/^  T original_function() {$/;"	f	class:sidestep::AutoTestingHookImpl
original_function	src/windows/preamble_patcher_test.cc	/^IncrementingFunc original_function = NULL;$/;"	m	namespace:__anon6	file:
original_function_	src/windows/auto_testing_hook.h	/^  T original_function_;  \/\/ always valid$/;"	m	class:sidestep::AutoTestingHookImpl
origstub_fn	src/windows/patch_functions.cc	/^    GenericFnPtr origstub_fn;        \/\/ original fn contents after we patch$/;"	m	struct:__anon9::WindowsInfo::FunctionInfo	file:
origstub_fn_	src/windows/patch_functions.cc	/^  static GenericFnPtr origstub_fn_[kNumFunctions];$/;"	m	class:__anon9::LibcInfoWithPatchFunctions	file:
origstub_fn_	src/windows/patch_functions.cc	/^template<int T> GenericFnPtr LibcInfoWithPatchFunctions<T>::origstub_fn_[] = {$/;"	m	class:__anon9::LibcInfoWithPatchFunctions	file:
other	src/base/stl_allocator.h	/^    typedef STL_Allocator<T1, Alloc> other;$/;"	t	struct:STL_Allocator::rebind
out	src/tcmalloc.cc	/^static char *out;$/;"	v	file:
out_	src/profiledata.h	/^  int           out_;           \/\/ fd for output file.$/;"	m	class:ProfileData
out_path_config	src/tcmalloc.cc	/^out_path_config()$/;"	f	file:
outdir	src/tcmalloc.cc	/^static const char *outdir = "\/root\/grt\/dbg\/";$/;"	v	file:
outposfix	src/tcmalloc.cc	/^static const char *outposfix = "";$/;"	v	file:
overall_thread_cache_size	src/thread_cache.h	/^  static size_t overall_thread_cache_size() {$/;"	f	class:tcmalloc::ThreadCache
overall_thread_cache_size_	src/thread_cache.cc	/^size_t ThreadCache::overall_thread_cache_size_ = kDefaultOverallThreadCacheSize;$/;"	m	class:tcmalloc::ThreadCache	file:
overall_thread_cache_size_	src/thread_cache.h	/^  static size_t overall_thread_cache_size_;$/;"	m	class:tcmalloc::ThreadCache
overflow	src/pprof	/^  sub overflow {$/;"	s
owner_lock_	src/memory_region_map.h	/^  static SpinLock owner_lock_;$/;"	m	class:MemoryRegionMap
p	src/system-alloc.cc	/^  void*  p;$/;"	m	union:MemoryAligner	file:
p1_	src/tests/heap-checker_unittest.cc	/^  P1 p1_;$/;"	m	class:Callback1	file:
p1_	src/tests/heap-checker_unittest.cc	/^  P1 p1_;$/;"	m	class:Callback2	file:
p2_	src/tests/heap-checker_unittest.cc	/^  P2 p2_;$/;"	m	class:Callback2	file:
p_	src/internal_logging.cc	/^  char* p_;$/;"	m	class:tcmalloc::Logger	file:
p_	src/tests/sampler_test.cc	/^  T* p_;$/;"	m	class:__anon27::scoped_array	file:
p_process_term_tcmalloc	src/windows/port.cc	/^int (*p_process_term_tcmalloc)(void) = on_process_term;$/;"	v
p_thread_callback_tcmalloc	src/windows/port.cc	/^void (NTAPI *p_thread_callback_tcmalloc)($/;"	v
packed_cache_test_CXXFLAGS	Makefile	/^packed_cache_test_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS)$/;"	m
packed_cache_test_DEPENDENCIES	Makefile	/^packed_cache_test_DEPENDENCIES = $(LIBTCMALLOC_MINIMAL) \\$/;"	m
packed_cache_test_LDADD	Makefile	/^packed_cache_test_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)$/;"	m
packed_cache_test_LDFLAGS	Makefile	/^packed_cache_test_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
packed_cache_test_LINK	Makefile	/^packed_cache_test_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
packed_cache_test_OBJECTS	Makefile	/^packed_cache_test_OBJECTS = $(am_packed_cache_test_OBJECTS)$/;"	m
packed_cache_test_SOURCES	Makefile	/^packed_cache_test_SOURCES = src\/tests\/packed-cache_test.cc$/;"	m
pad	src/base/elfcore.h	/^    unsigned long pad[6];       \/* Unused padding to match kernel structures *\/$/;"	m	struct:mips_regs
pad1	src/base/linux_syscall_support.h	/^  short              pad1;$/;"	m	struct:kernel_stat
pad2	src/base/linux_syscall_support.h	/^  short              pad2;$/;"	m	struct:kernel_stat
pad_	src/central_freelist.h	/^  char pad_[64 - kFreeListSizeMod64];$/;"	m	class:tcmalloc::CentralFreeListPaddedTo
page_heap_test_CXXFLAGS	Makefile	/^page_heap_test_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS)$/;"	m
page_heap_test_DEPENDENCIES	Makefile	/^page_heap_test_DEPENDENCIES = $(LIBTCMALLOC_MINIMAL) \\$/;"	m
page_heap_test_LDADD	Makefile	/^page_heap_test_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)$/;"	m
page_heap_test_LDFLAGS	Makefile	/^page_heap_test_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
page_heap_test_LINK	Makefile	/^page_heap_test_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
page_heap_test_OBJECTS	Makefile	/^page_heap_test_OBJECTS = $(am_page_heap_test_OBJECTS)$/;"	m
page_heap_test_SOURCES	Makefile	/^page_heap_test_SOURCES = src\/tests\/page_heap_test.cc \\$/;"	m
pageheap	src/static_vars.h	/^  static PageHeap* pageheap(int heap_type = DEFAULT_HEAP_TYPE) { $/;"	f	class:tcmalloc::Static
pageheap	src/tcmalloc.cc	/^  PageHeap::Stats pageheap;   \/\/ Stats from page heap$/;"	m	struct:TCMallocStats	file:
pageheap_	src/static_vars.cc	/^PageHeap* Static::pageheap_[NR_HEAP_TYPE] = {NULL};$/;"	m	class:tcmalloc::Static	file:
pageheap_	src/static_vars.h	/^  static PageHeap* pageheap_[NR_HEAP_TYPE];$/;"	m	class:tcmalloc::Static
pageheap_lock	src/static_vars.h	/^  static SpinLock* pageheap_lock() { return &pageheap_lock_; }$/;"	f	class:tcmalloc::Static
pageheap_lock_	src/static_vars.h	/^  static SpinLock pageheap_lock_;$/;"	m	class:tcmalloc::Static
pagemap_	src/page_heap.h	/^  PageMap *pagemap_;$/;"	m	class:tcmalloc::PageHeap
pagemap_cache_	src/page_heap.h	/^  mutable PageMapCache *pagemap_cache_;$/;"	m	class:tcmalloc::PageHeap
pagemap_unittest_CXXFLAGS	Makefile	/^pagemap_unittest_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
pagemap_unittest_DEPENDENCIES	Makefile	/^pagemap_unittest_DEPENDENCIES = $(LIBTCMALLOC_MINIMAL) \\$/;"	m
pagemap_unittest_LDADD	Makefile	/^pagemap_unittest_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)$/;"	m
pagemap_unittest_LDFLAGS	Makefile	/^pagemap_unittest_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
pagemap_unittest_LINK	Makefile	/^pagemap_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
pagemap_unittest_OBJECTS	Makefile	/^pagemap_unittest_OBJECTS = $(am_pagemap_unittest_OBJECTS)$/;"	m
pagemap_unittest_SOURCES	Makefile	/^pagemap_unittest_SOURCES = src\/tests\/pagemap_unittest.cc \\$/;"	m
pages	src/common.h	/^inline Length pages(size_t bytes) {$/;"	f	namespace:tcmalloc
pagesize	src/base/low_level_alloc.cc	/^  size_t pagesize;        \/\/ ==getpagesize()  (init under mu, then ro)$/;"	m	struct:LowLevelAlloc::Arena	file:
pagesize	src/system-alloc.cc	/^static size_t pagesize = 0;$/;"	v	file:
pagesize_	src/windows/preamble_patcher.cc	/^long PreamblePatcher::pagesize_ = 0;$/;"	m	class:sidestep::PreamblePatcher	file:
pagesize_	src/windows/preamble_patcher.h	/^  static long pagesize_;$/;"	m	class:sidestep::PreamblePatcher
parameter	src/base/linuxthreads.cc	/^  void        *parameter;$/;"	m	struct:ListerParams	file:
parent	src/tests/heap-checker_unittest.cc	/^    Nesting* parent;$/;"	m	struct:Nesting::Inner	file:
parse_bin_name	src/tcmalloc.cc	/^parse_bin_name(const char *s)$/;"	f	file:
passed_	src/tests/tcmalloc_unittest.cc	/^  vector<Object>        passed_;        \/\/ Pending objects passed from others$/;"	m	class:testing::TesterThread	file:
patched	src/windows/patch_functions.cc	/^  bool patched() const { return is_valid(); }$/;"	f	class:__anon9::LibcInfo
pc_offset	src/getpc.h	/^  int pc_offset;$/;"	m	struct:CallUnrollInfo
pclose	src/windows/port.h	/^inline int pclose(FILE *stream) {$/;"	f
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
per_thread_cache_size_	src/thread_cache.cc	/^volatile size_t ThreadCache::per_thread_cache_size_ = kMaxThreadCacheSize;$/;"	m	class:tcmalloc::ThreadCache	file:
per_thread_cache_size_	src/thread_cache.h	/^  static volatile size_t per_thread_cache_size_;$/;"	m	class:tcmalloc::ThreadCache
per_thread_timer_enabled_	src/profile-handler.cc	/^  bool per_thread_timer_enabled_;$/;"	m	class:ProfileHandler	file:
performance	doc/tcmalloc.html	/^<h2><A NAME="performance">Performance Notes<\/A><\/h2>$/;"	a
perftools_fn	src/windows/patch_functions.cc	/^    const GenericFnPtr perftools_fn; \/\/ fn we want to patch in$/;"	m	struct:__anon9::WindowsInfo::FunctionInfo	file:
perftools_fn_	src/windows/patch_functions.cc	/^  static const GenericFnPtr perftools_fn_[kNumFunctions];$/;"	m	class:__anon9::LibcInfoWithPatchFunctions	file:
perftools_fn_	src/windows/patch_functions.cc	/^const GenericFnPtr LibcInfoWithPatchFunctions<T>::perftools_fn_[] = {$/;"	m	class:__anon9::LibcInfoWithPatchFunctions	file:
perftools_pthread_getspecific	src/maybe_threads.cc	/^void *perftools_pthread_getspecific(pthread_key_t key) {$/;"	f
perftools_pthread_getspecific	src/windows/port.h	/^inline void* perftools_pthread_getspecific(DWORD key) {$/;"	f
perftools_pthread_key_create	src/maybe_threads.cc	/^int perftools_pthread_key_create(pthread_key_t *key,$/;"	f
perftools_pthread_key_create	src/windows/port.h	/^inline int perftools_pthread_key_create(pthread_key_t *pkey,$/;"	f
perftools_pthread_key_delete	src/maybe_threads.cc	/^int perftools_pthread_key_delete(pthread_key_t key) {$/;"	f
perftools_pthread_once	src/maybe_threads.cc	/^int perftools_pthread_once(pthread_once_t *ctl,$/;"	f
perftools_pthread_once	src/windows/port.cc	/^extern "C" int perftools_pthread_once(pthread_once_t *once_control,$/;"	f
perftools_pthread_setspecific	src/maybe_threads.cc	/^int perftools_pthread_setspecific(pthread_key_t key, void *val) {$/;"	f
perftools_pthread_setspecific	src/windows/port.h	/^inline int perftools_pthread_setspecific(pthread_key_t key, const void *value) {$/;"	f
perftools_pthread_specific_vals	src/maybe_threads.cc	/^static void *perftools_pthread_specific_vals[MAX_PERTHREAD_VALS];$/;"	v	file:
perftools_vsnprintf	src/base/logging.h	70;"	d
perftools_vsnprintf	src/windows/port.h	/^inline int perftools_vsnprintf(char *str, size_t size, const char *format,$/;"	f
perftoolsinclude_HEADERS	Makefile	/^perftoolsinclude_HEADERS = $(am__append_14) \\$/;"	m
perftoolsincludedir	Makefile	/^perftoolsincludedir = $(includedir)\/gperftools$/;"	m
phinited	src/thread_cache.cc	/^static bool phinited = false;$/;"	m	namespace:tcmalloc	file:
pid_	src/base/sysinfo.h	/^  pid_t pid_;$/;"	m	class:ProcMapsIterator
pid_t	src/windows/port.h	/^typedef int pid_t;$/;"	t
pipe	src/base/linux_syscall_support.h	/^    LSS_INLINE int LSS_NAME(pipe)(int *p) {$/;"	f
pkgconfig_DATA	Makefile	/^pkgconfig_DATA = libtcmalloc.pc libtcmalloc_minimal.pc \\$/;"	m
pkgconfigdir	Makefile	/^pkgconfigdir = $(libdir)\/pkgconfig$/;"	m
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/gperftools$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/gperftools$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/gperftools$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/gperftools$/;"	m
place	src/heap-checker.cc	/^  ObjectPlacement place;  \/\/ where ptr points to$/;"	m	struct:AllocObject	file:
pointer	src/base/stl_allocator.h	/^  typedef T*         pointer;$/;"	t	class:STL_Allocator
pointer_source_alignment	src/heap-checker.cc	/^static size_t pointer_source_alignment = kPointerSourceAlignment;$/;"	v	file:
poll	src/windows/port.h	/^inline int poll(struct pollfd* fds, int nfds, int timeout) {$/;"	f
popen	src/windows/port.h	/^inline FILE *popen(const char *command, const char *type) {$/;"	f
ppc_regs	src/base/elfcore.h	/^  typedef struct ppc_regs {$/;"	s
ppc_regs	src/base/elfcore.h	/^  } ppc_regs;$/;"	t	typeref:struct:ppc_regs
pprof	doc/cpuprofile.html	/^<h1><a name="pprof">Analyzing the Output<\/a><\/h1>$/;"	a
pprof	doc/heapprofile.html	/^<h1><a name="pprof">Analyzing the Output<\/a><\/h1>$/;"	a
preamble_pages_	src/windows/preamble_patcher.cc	/^PreamblePatcher::PreamblePage* PreamblePatcher::preamble_pages_ = NULL;$/;"	m	class:sidestep::PreamblePatcher	file:
preamble_pages_	src/windows/preamble_patcher.h	/^  static PreamblePage* preamble_pages_;$/;"	m	class:sidestep::PreamblePatcher
prefix	Makefile	/^	echo 'prefix=$(prefix)' > "$@".tmp$/;"	m
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
premmap_hooks_	src/malloc_hook.cc	/^HookList<MallocHook::PreMmapHook> premmap_hooks_ =$/;"	m	namespace:base::internal	file:
presbrk_hooks_	src/malloc_hook.cc	/^HookList<MallocHook::PreSbrkHook> presbrk_hooks_ =$/;"	m	namespace:base::internal	file:
prev	src/span.h	/^  Span*         prev;           \/\/ Used when in link list$/;"	m	struct:tcmalloc::Span
prev_	src/thread_cache.h	/^  ThreadCache* prev_;$/;"	m	class:tcmalloc::ThreadCache
print_usage	test-driver	/^print_usage ()$/;"	f
printf	src/internal_logging.cc	/^void TCMalloc_Printer::printf(const char* format, ...) {$/;"	f	class:TCMalloc_Printer
priv_data	src/malloc_hook-inl.h	/^  AtomicWord priv_data[kHookListCapacity];$/;"	m	struct:base::internal::HookList
priv_end	src/malloc_hook-inl.h	/^  AtomicWord priv_end;$/;"	m	struct:base::internal::HookList
prof_handler	src/profiler.cc	/^void CpuProfiler::prof_handler(int sig, siginfo_t*, void* signal_ucontext,$/;"	f	class:CpuProfiler
prof_handler	src/tests/getpc_test.cc	/^static void prof_handler(int sig, siginfo_t*, void* signal_ucontext) {$/;"	f	file:
prof_handler_called	src/tests/getpc_test.cc	/^static volatile bool prof_handler_called = false;$/;"	v	file:
prof_handler_token_	src/profiler.cc	/^  ProfileHandlerToken* prof_handler_token_;$/;"	m	class:CpuProfiler	file:
profile	doc/pprof_remote_servers.html	/^<h2> <A NAME="profile"><code><b>\/pprof\/profile<\/b><\/code><\/A> <\/h2>$/;"	a
profile_handler_unittest_CXXFLAGS	Makefile	/^profile_handler_unittest_CXXFLAGS = $(PTHREAD_CFLAGS)$/;"	m
profile_handler_unittest_DEPENDENCIES	Makefile	/^profile_handler_unittest_DEPENDENCIES =  \\$/;"	m
profile_handler_unittest_LDADD	Makefile	/^profile_handler_unittest_LDADD = $(LIBPROFILER) $(PTHREAD_LIBS)$/;"	m
profile_handler_unittest_LDFLAGS	Makefile	/^profile_handler_unittest_LDFLAGS = $(PTHREAD_CFLAGS)$/;"	m
profile_handler_unittest_LINK	Makefile	/^profile_handler_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
profile_handler_unittest_OBJECTS	Makefile	/^profile_handler_unittest_OBJECTS =  \\$/;"	m
profile_handler_unittest_SOURCES	Makefile	/^profile_handler_unittest_SOURCES = src\/tests\/profile-handler_unittest.cc \\$/;"	m
profile_mmap_	src/heap-profile-table.h	/^  bool profile_mmap_;$/;"	m	class:HeapProfileTable
profile_name	src/gperftools/profiler.h	/^  char   profile_name[1024];  \/* Name of profile file being written, or '\\0' *\/$/;"	m	struct:ProfilerState
profile_name	src/profiledata.h	/^    char     profile_name[1024];  \/\/ Name of file being written, or '\\0'$/;"	m	struct:ProfileData::State
profile_name_prefix	src/heap-checker.cc	/^static const string* profile_name_prefix = NULL;$/;"	v	file:
profile_stats	src/heap-profile-table.h	/^    Stats* profile_stats;  \/\/ stats to update (may be NULL)$/;"	m	struct:HeapProfileTable::DumpArgs
profiledata_unittest_DEPENDENCIES	Makefile	/^profiledata_unittest_DEPENDENCIES =  \\$/;"	m
profiledata_unittest_LDADD	Makefile	/^profiledata_unittest_LDADD = $(LIBPROFILER)$/;"	m
profiledata_unittest_OBJECTS	Makefile	/^profiledata_unittest_OBJECTS = $(am_profiledata_unittest_OBJECTS)$/;"	m
profiledata_unittest_SOURCES	Makefile	/^profiledata_unittest_SOURCES = src\/tests\/profiledata_unittest.cc \\$/;"	m
profiler1_unittest_CXXFLAGS	Makefile	/^profiler1_unittest_CXXFLAGS = -g -DNO_THREADS $(AM_CXXFLAGS)$/;"	m
profiler1_unittest_DEPENDENCIES	Makefile	/^profiler1_unittest_DEPENDENCIES =  \\$/;"	m
profiler1_unittest_LDADD	Makefile	/^profiler1_unittest_LDADD = $(LIBPROFILER)$/;"	m
profiler1_unittest_LINK	Makefile	/^profiler1_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
profiler1_unittest_OBJECTS	Makefile	/^profiler1_unittest_OBJECTS = $(am_profiler1_unittest_OBJECTS)$/;"	m
profiler1_unittest_SOURCES	Makefile	/^profiler1_unittest_SOURCES = $(PROFILER_UNITTEST_SRCS)$/;"	m
profiler2_unittest_CXXFLAGS	Makefile	/^profiler2_unittest_CXXFLAGS = -g -DNO_THREADS $(AM_CXXFLAGS)$/;"	m
profiler2_unittest_DEPENDENCIES	Makefile	/^profiler2_unittest_DEPENDENCIES = $(LIBPROFILER)$/;"	m
profiler2_unittest_LDADD	Makefile	/^profiler2_unittest_LDADD = -lstacktrace -lprofiler$/;"	m
profiler2_unittest_LINK	Makefile	/^profiler2_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
profiler2_unittest_OBJECTS	Makefile	/^profiler2_unittest_OBJECTS = $(am_profiler2_unittest_OBJECTS)$/;"	m
profiler2_unittest_SOURCES	Makefile	/^profiler2_unittest_SOURCES = $(PROFILER_UNITTEST_SRCS)$/;"	m
profiler3_unittest_CXXFLAGS	Makefile	/^profiler3_unittest_CXXFLAGS = -g $(PTHREAD_CFLAGS) $(AM_CXXFLAGS)$/;"	m
profiler3_unittest_DEPENDENCIES	Makefile	/^profiler3_unittest_DEPENDENCIES =  \\$/;"	m
profiler3_unittest_LDADD	Makefile	/^profiler3_unittest_LDADD = $(LIBPROFILER) $(PTHREAD_LIBS)$/;"	m
profiler3_unittest_LDFLAGS	Makefile	/^profiler3_unittest_LDFLAGS = $(PTHREAD_CFLAGS)$/;"	m
profiler3_unittest_LINK	Makefile	/^profiler3_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
profiler3_unittest_OBJECTS	Makefile	/^profiler3_unittest_OBJECTS = $(am_profiler3_unittest_OBJECTS)$/;"	m
profiler3_unittest_SOURCES	Makefile	/^profiler3_unittest_SOURCES = $(PROFILER_UNITTEST_SRCS)$/;"	m
profiler4_unittest_CXXFLAGS	Makefile	/^profiler4_unittest_CXXFLAGS = -g $(PTHREAD_CFLAGS) $(AM_CXXFLAGS)$/;"	m
profiler4_unittest_DEPENDENCIES	Makefile	/^profiler4_unittest_DEPENDENCIES = $(LIBPROFILER)$/;"	m
profiler4_unittest_LDADD	Makefile	/^profiler4_unittest_LDADD = -lstacktrace -lprofiler $(PTHREAD_LIBS)$/;"	m
profiler4_unittest_LDFLAGS	Makefile	/^profiler4_unittest_LDFLAGS = $(PTHREAD_CFLAGS)$/;"	m
profiler4_unittest_LINK	Makefile	/^profiler4_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
profiler4_unittest_OBJECTS	Makefile	/^profiler4_unittest_OBJECTS = $(am_profiler4_unittest_OBJECTS)$/;"	m
profiler4_unittest_SOURCES	Makefile	/^profiler4_unittest_SOURCES = $(PROFILER_UNITTEST_SRCS)$/;"	m
profiler_h	src/tests/simple_compat_test.cc	/^ProfilerOptions* profiler_h;$/;"	v
profiler_unittest_sh_LDADD	Makefile	/^profiler_unittest_sh_LDADD = $(LDADD)$/;"	m
profiler_unittest_sh_OBJECTS	Makefile	/^profiler_unittest_sh_OBJECTS = $(am_profiler_unittest_sh_OBJECTS)$/;"	m
profiler_unittest_sh_SOURCES	Makefile	/^profiler_unittest_sh_SOURCES = src\/tests\/profiler_unittest.sh$/;"	m
program_details	missing	/^program_details ()$/;"	f
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
psdir	Makefile	/^psdir = ${docdir}$/;"	m
pthread_equal	src/windows/port.h	/^inline bool pthread_equal(pthread_t left, pthread_t right) {$/;"	f
pthread_key_t	src/windows/port.h	/^typedef DWORD pthread_key_t;$/;"	t
pthread_once_init	src/maybe_threads.cc	/^static pthread_once_t pthread_once_init = PTHREAD_ONCE_INIT;$/;"	v	file:
pthread_once_t	src/windows/port.h	/^typedef LONG pthread_once_t;$/;"	t
pthread_self	src/windows/port.h	/^inline pthread_t pthread_self(void) {$/;"	f
pthread_t	src/windows/port.h	/^typedef DWORD pthread_t;$/;"	t
ptr	src/debugallocation.cc	/^  void *ptr;$/;"	m	union:__anon53	file:
ptr	src/heap-checker.cc	/^  const void* ptr;        \/\/ the object$/;"	m	struct:AllocObject	file:
ptr	src/internal_logging.h	/^    const void* ptr;$/;"	m	union:tcmalloc::LogItem::__anon1
ptr	src/tests/addressmap_unittest.cc	/^  char* ptr;$/;"	m	struct:PtrAndSize	file:
ptr	src/tests/heap-checker_unittest.cc	/^  T* ptr;$/;"	m	struct:Array	file:
ptr	src/tests/heap-checker_unittest.cc	/^  mutable C* ptr;$/;"	m	class:TClass	file:
ptr	src/tests/heap-checker_unittest.cc	/^  mutable char* ptr;$/;"	m	class:ClassA	file:
ptr	src/tests/low_level_alloc_unittest.cc	/^  char *ptr;      \/\/ pointer to memory$/;"	m	struct:BlockDesc	file:
ptr	src/tests/tcmalloc_unittest.cc	/^    char*       ptr;                    \/\/ Allocated pointer$/;"	m	struct:testing::TesterThread::Object	file:
ptr	src/tests/tcmalloc_unittest.cc	/^  uintptr_t ptr;$/;"	m	struct:testing::__anon29::RangeCallbackState	file:
ptr_	src/raw_printer.h	/^  char* ptr_;           \/\/ Where should we write next$/;"	m	class:base::RawPrinter
ptr_	src/tests/system-alloc_unittest.cc	/^  int ptr_;$/;"	m	class:ArraySysAllocator	file:
ptr_to_function	src/tests/testutil.cc	/^  void (*ptr_to_function)(int);$/;"	m	struct:FunctionAndId	file:
ptrace_detach	src/base/linux_syscall_support.h	/^  LSS_INLINE int LSS_NAME(ptrace_detach)(pid_t pid) {$/;"	f
ptrs	src/pagemap.h	/^    Node* ptrs[INTERIOR_LENGTH];$/;"	m	struct:TCMalloc_PageMap3::Node
pvalloc	src/libc_override_osx.h	/^  void* pvalloc(size_t s)                { return tc_pvalloc(s);      }$/;"	f
pvalloc	src/tests/tcmalloc_unittest.cc	104;"	d	file:
q_	src/debugallocation.cc	/^  QueueEntry q_[kFreeQueueSize];$/;"	m	class:FreeQueue	file:
q_back_	src/debugallocation.cc	/^  int q_back_;$/;"	m	class:FreeQueue	file:
q_front_	src/debugallocation.cc	/^  int q_front_;$/;"	m	class:FreeQueue	file:
r10	src/base/elfcore.h	/^    uint64_t  r15,r14,r13,r12,rbp,rbx,r11,r10;$/;"	m	struct:i386_regs
r11	src/base/elfcore.h	/^    uint64_t  r15,r14,r13,r12,rbp,rbx,r11,r10;$/;"	m	struct:i386_regs
r12	src/base/elfcore.h	/^    uint64_t  r15,r14,r13,r12,rbp,rbx,r11,r10;$/;"	m	struct:i386_regs
r13	src/base/elfcore.h	/^    uint64_t  r15,r14,r13,r12,rbp,rbx,r11,r10;$/;"	m	struct:i386_regs
r14	src/base/elfcore.h	/^    uint64_t  r15,r14,r13,r12,rbp,rbx,r11,r10;$/;"	m	struct:i386_regs
r15	src/base/elfcore.h	/^    uint64_t  r15,r14,r13,r12,rbp,rbx,r11,r10;$/;"	m	struct:i386_regs
r2	src/third_party/valgrind.h	/^      unsigned int r2;  \/* what tocptr do we need? *\/$/;"	m	struct:__anon21
r2	src/third_party/valgrind.h	/^      unsigned long long int r2;  \/* what tocptr do we need? *\/$/;"	m	struct:__anon20
r2	src/third_party/valgrind.h	/^      unsigned long long int r2;  \/* what tocptr do we need? *\/$/;"	m	struct:__anon22
r8	src/base/elfcore.h	/^    uint64_t  r9,r8,rax,rcx,rdx,rsi,rdi,orig_rax;$/;"	m	struct:i386_regs
r9	src/base/elfcore.h	/^    uint64_t  r9,r8,rax,rcx,rdx,rsi,rdi,orig_rax;$/;"	m	struct:i386_regs
random	src/windows/port.h	/^inline long random(void) { return rand(); }$/;"	f
raw_printer_test_CXXFLAGS	Makefile	/^raw_printer_test_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS)$/;"	m
raw_printer_test_DEPENDENCIES	Makefile	/^raw_printer_test_DEPENDENCIES =  \\$/;"	m
raw_printer_test_LDADD	Makefile	/^raw_printer_test_LDADD = $(LIBTCMALLOC) $(PTHREAD_LIBS)$/;"	m
raw_printer_test_LDFLAGS	Makefile	/^raw_printer_test_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
raw_printer_test_LINK	Makefile	/^raw_printer_test_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
raw_printer_test_OBJECTS	Makefile	/^raw_printer_test_OBJECTS = $(am_raw_printer_test_OBJECTS)$/;"	m
raw_printer_test_SOURCES	Makefile	/^raw_printer_test_SOURCES = src\/tests\/raw_printer_test.cc$/;"	m
rax	src/base/elfcore.h	/^    uint64_t  r9,r8,rax,rcx,rdx,rsi,rdi,orig_rax;$/;"	m	struct:i386_regs
rbp	src/base/elfcore.h	/^    uint64_t  r15,r14,r13,r12,rbp,rbx,r11,r10;$/;"	m	struct:i386_regs
rbx	src/base/elfcore.h	/^    uint64_t  r15,r14,r13,r12,rbp,rbx,r11,r10;$/;"	m	struct:i386_regs
rcx	src/base/elfcore.h	/^    uint64_t  r9,r8,rax,rcx,rdx,rsi,rdi,orig_rax;$/;"	m	struct:i386_regs
rdi	src/base/elfcore.h	/^    uint64_t  r9,r8,rax,rcx,rdx,rsi,rdi,orig_rax;$/;"	m	struct:i386_regs
rdx	src/base/elfcore.h	/^    uint64_t  r9,r8,rax,rcx,rdx,rsi,rdi,orig_rax;$/;"	m	struct:i386_regs
read	src/windows/port.h	/^inline ssize_t read(int fd, void *buf, size_t count) {$/;"	f
real_malloced_size	src/debugallocation.cc	/^  static size_t real_malloced_size(size_t size) {$/;"	f	class:MallocBlock	file:
real_mmapped_size	src/debugallocation.cc	/^  static size_t real_mmapped_size(size_t size) {$/;"	f	class:MallocBlock	file:
real_size	src/debugallocation.cc	/^  size_t real_size() {$/;"	f	class:MallocBlock	file:
realloc_debug_unittest_CXXFLAGS	Makefile	/^realloc_debug_unittest_CXXFLAGS = $(realloc_unittest_CXXFLAGS)$/;"	m
realloc_debug_unittest_DEPENDENCIES	Makefile	/^realloc_debug_unittest_DEPENDENCIES =  \\$/;"	m
realloc_debug_unittest_LDADD	Makefile	/^realloc_debug_unittest_LDADD = libtcmalloc_minimal_debug.la $(PTHREAD_LIBS)$/;"	m
realloc_debug_unittest_LDFLAGS	Makefile	/^realloc_debug_unittest_LDFLAGS = $(realloc_unittest_LDFLAGS)$/;"	m
realloc_debug_unittest_LINK	Makefile	/^realloc_debug_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
realloc_debug_unittest_OBJECTS	Makefile	/^realloc_debug_unittest_OBJECTS = $(am_realloc_debug_unittest_OBJECTS)$/;"	m
realloc_debug_unittest_SOURCES	Makefile	/^realloc_debug_unittest_SOURCES = $(realloc_unittest_SOURCES)$/;"	m
realloc_unittest_CXXFLAGS	Makefile	/^realloc_unittest_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
realloc_unittest_DEPENDENCIES	Makefile	/^realloc_unittest_DEPENDENCIES = $(LIBTCMALLOC_MINIMAL) \\$/;"	m
realloc_unittest_LDADD	Makefile	/^realloc_unittest_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)$/;"	m
realloc_unittest_LDFLAGS	Makefile	/^realloc_unittest_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
realloc_unittest_LINK	Makefile	/^realloc_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
realloc_unittest_OBJECTS	Makefile	/^realloc_unittest_OBJECTS = $(am_realloc_unittest_OBJECTS)$/;"	m
realloc_unittest_SOURCES	Makefile	/^realloc_unittest_SOURCES = src\/tests\/realloc_unittest.cc \\$/;"	m
rebind	src/base/stl_allocator.h	/^  template <class T1> struct rebind {$/;"	s	class:STL_Allocator
recursion_count_	src/memory_region_map.cc	/^int MemoryRegionMap::recursion_count_ = 0;  \/\/ GUARDED_BY(owner_lock_)$/;"	m	class:MemoryRegionMap	file:
recursion_count_	src/memory_region_map.h	/^  static int recursion_count_;$/;"	m	class:MemoryRegionMap
recursive	src/stacktrace_libunwind-inl.h	/^static __thread int recursive;$/;"	v
recursive_insert	src/memory_region_map.cc	/^static bool recursive_insert = false;$/;"	v	file:
refcount	src/span.h	/^  unsigned int  refcount : 16;  \/\/ Number of non-free objects$/;"	m	struct:tcmalloc::Span
reference	src/base/stl_allocator.h	/^  typedef T&         reference;$/;"	t	class:STL_Allocator
region_set	src/memory_region_map.cc	/^  RegionSet* region_set() { return reinterpret_cast<RegionSet*>(rep); }$/;"	f	union:MemoryRegionMap::RegionSetRep
regions_	src/memory_region_map.cc	/^MemoryRegionMap::RegionSet* MemoryRegionMap::regions_ = NULL;$/;"	m	class:MemoryRegionMap	file:
regions_	src/memory_region_map.h	/^  static RegionSet* regions_;$/;"	m	class:MemoryRegionMap
regions_rep	src/memory_region_map.cc	/^static MemoryRegionMap::RegionSetRep regions_rep;$/;"	v	file:
release_index_	src/page_heap.h	/^  int release_index_;$/;"	m	class:tcmalloc::PageHeap
rep	src/memory_region_map.cc	/^  char rep[sizeof(RegionSet)];$/;"	m	union:MemoryRegionMap::RegionSetRep	file:
replacement_function_	src/windows/auto_testing_hook.h	/^  T replacement_function_;  \/\/ always valid$/;"	m	class:sidestep::AutoTestingHookImpl
result	src/base/linuxthreads.cc	/^  int         result, err;$/;"	m	struct:ListerParams	file:
result	src/tests/profiler_unittest.cc	/^static int result = 0;$/;"	v	file:
return_addr	src/stacktrace_powerpc-inl.h	/^  void *return_addr;$/;"	m	struct:layout_ppc
return_addr	src/stacktrace_powerpc-linux-inl.h	/^  void *return_addr;$/;"	m	struct:layout_ppc
return_sp_offset	src/getpc.h	/^  int return_sp_offset;$/;"	m	struct:CallUnrollInfo
returned	src/page_heap.h	/^    Span        returned;$/;"	m	struct:tcmalloc::PageHeap::SpanList
returned_length	src/page_heap.h	/^    int64 returned_length[kMaxPages];$/;"	m	struct:tcmalloc::PageHeap::SmallSpanStats
returned_pages	src/page_heap.h	/^    int64 returned_pages;  \/\/ Combined page length of unmapped spans$/;"	m	struct:tcmalloc::PageHeap::LargeSpanStats
rgProcAddresses	src/windows/patch_functions.cc	/^  GenericFnPtr rgProcAddresses[LibcInfo::ctrgProcAddress];$/;"	m	struct:__anon9::ModuleEntryCopy	file:
rip	src/base/elfcore.h	/^    uint64_t  rip,cs,eflags;$/;"	m	struct:i386_regs
rip	src/base/elfcore.h	/^    unsigned long rip;		\/* Program counter.                          *\/$/;"	m	struct:ppc_regs
rnd	src/tests/addressmap_unittest.cc	/^static UniformRandomNumberGenerator rnd;$/;"	v	file:
rnd_	src/sampler.h	/^  uint64_t      rnd_;                   \/\/ Cheap random number generator$/;"	m	class:tcmalloc::Sampler
rnd_	src/tests/sampler_test.cc	/^  uint32_t rnd_;                   \/\/ Cheap random number generator$/;"	m	class:OldSampler	file:
rnd_	src/tests/tcmalloc_unittest.cc	/^  AllocatorState        rnd_;           \/\/ For generating random numbers$/;"	m	class:testing::TesterThread	file:
root_	src/pagemap.h	/^  Leaf* root_[ROOT_LENGTH];             \/\/ Pointers to 32 child nodes$/;"	m	class:TCMalloc_PageMap2
root_	src/pagemap.h	/^  Node* root_;                          \/\/ Root of radix tree$/;"	m	class:TCMalloc_PageMap3
roundup	src/base/low_level_alloc.cc	/^  size_t roundup;         \/\/ lowest power of 2 >= max(16,sizeof (AllocList))$/;"	m	struct:LowLevelAlloc::Arena	file:
rsi	src/base/elfcore.h	/^    uint64_t  r9,r8,rax,rcx,rdx,rsi,rdi,orig_rax;$/;"	m	struct:i386_regs
rsp	src/base/elfcore.h	/^    uint64_t  rsp,ss;$/;"	m	struct:i386_regs
ru_idrss	src/base/linux_syscall_support.h	/^  long               ru_idrss;$/;"	m	struct:kernel_rusage
ru_inblock	src/base/linux_syscall_support.h	/^  long               ru_inblock;$/;"	m	struct:kernel_rusage
ru_isrss	src/base/linux_syscall_support.h	/^  long               ru_isrss;$/;"	m	struct:kernel_rusage
ru_ixrss	src/base/linux_syscall_support.h	/^  long               ru_ixrss;$/;"	m	struct:kernel_rusage
ru_majflt	src/base/linux_syscall_support.h	/^  long               ru_majflt;$/;"	m	struct:kernel_rusage
ru_maxrss	src/base/linux_syscall_support.h	/^  long               ru_maxrss;$/;"	m	struct:kernel_rusage
ru_minflt	src/base/linux_syscall_support.h	/^  long               ru_minflt;$/;"	m	struct:kernel_rusage
ru_msgrcv	src/base/linux_syscall_support.h	/^  long               ru_msgrcv;$/;"	m	struct:kernel_rusage
ru_msgsnd	src/base/linux_syscall_support.h	/^  long               ru_msgsnd;$/;"	m	struct:kernel_rusage
ru_nivcsw	src/base/linux_syscall_support.h	/^  long               ru_nivcsw;$/;"	m	struct:kernel_rusage
ru_nsignals	src/base/linux_syscall_support.h	/^  long               ru_nsignals;$/;"	m	struct:kernel_rusage
ru_nswap	src/base/linux_syscall_support.h	/^  long               ru_nswap;$/;"	m	struct:kernel_rusage
ru_nvcsw	src/base/linux_syscall_support.h	/^  long               ru_nvcsw;$/;"	m	struct:kernel_rusage
ru_oublock	src/base/linux_syscall_support.h	/^  long               ru_oublock;$/;"	m	struct:kernel_rusage
ru_stime	src/base/linux_syscall_support.h	/^  struct kernel_timeval ru_stime;$/;"	m	struct:kernel_rusage	typeref:struct:kernel_rusage::kernel_timeval
ru_utime	src/base/linux_syscall_support.h	/^  struct kernel_timeval ru_utime;$/;"	m	struct:kernel_rusage	typeref:struct:kernel_rusage::kernel_timeval
run_check	heap-checker_debug_unittest.sh	/^run_check() {$/;"	f
run_check	heap-checker_unittest.sh	/^run_check() {$/;"	f
run_check	src/tests/heap-checker_unittest.sh	/^run_check() {$/;"	f
run_check_transfer_num_obj	src/tests/tcmalloc_unittest.sh	/^run_check_transfer_num_obj() {$/;"	f
run_check_transfer_num_obj	tcmalloc_unittest.sh	/^run_check_transfer_num_obj() {$/;"	f
run_hidden_ptr	src/tests/heap-checker_unittest.cc	/^void (*volatile run_hidden_ptr)(Closure* c, int n);$/;"	v
run_unittest	src/tests/tcmalloc_unittest.sh	/^run_unittest() {$/;"	f
run_unittest	tcmalloc_unittest.sh	/^run_unittest() {$/;"	f
runtime	doc/tcmalloc.html	/^<H2><A NAME="runtime">Modifying Runtime Behavior<\/A><\/H2>$/;"	a
s	src/system-alloc.cc	/^  size_t s;$/;"	m	union:MemoryAligner	file:
s_first_opcode_byte	src/windows/ia32_opcode_map.cc	/^const Opcode s_first_opcode_byte[] = {$/;"	m	namespace:sidestep	file:
s_ia16_modrm_map_	src/windows/ia32_modrm_map.cc	/^const ModrmEntry MiniDisassembler::s_ia16_modrm_map_[] = {$/;"	m	class:sidestep::MiniDisassembler	file:
s_ia16_modrm_map_	src/windows/mini_disassembler.h	/^  static const ModrmEntry s_ia16_modrm_map_[];$/;"	m	class:sidestep::MiniDisassembler
s_ia32_modrm_map_	src/windows/ia32_modrm_map.cc	/^const ModrmEntry MiniDisassembler::s_ia32_modrm_map_[] = {$/;"	m	class:sidestep::MiniDisassembler	file:
s_ia32_modrm_map_	src/windows/mini_disassembler.h	/^  static const ModrmEntry s_ia32_modrm_map_[];$/;"	m	class:sidestep::MiniDisassembler
s_ia32_opcode_map_	src/windows/ia32_opcode_map.cc	/^const OpcodeTable MiniDisassembler::s_ia32_opcode_map_[]={$/;"	m	class:sidestep::MiniDisassembler	file:
s_ia32_opcode_map_	src/windows/mini_disassembler.h	/^  static const OpcodeTable s_ia32_opcode_map_[];$/;"	m	class:sidestep::MiniDisassembler
s_opcode_byte_after_0f	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_0f[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_0f00	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_0f00[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_0f01	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_0f01[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_0f18	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_0f18[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_0f71	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_0f71[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_0f72	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_0f72[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_0f73	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_0f73[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_0fae	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_0fae[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_0fba	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_0fba[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_0fc7	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_0fc7[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_80	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_80[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_81	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_81[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_82	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_82[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_83	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_83[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_c0	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_c0[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_c1	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_c1[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_d0	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_d0[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_d1	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_d1[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_d2	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_d2[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_d3	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_d3[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_f6	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_f6[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_f7	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_f7[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_fe	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_fe[] = {$/;"	m	namespace:sidestep	file:
s_opcode_byte_after_ff	src/windows/ia32_opcode_map.cc	/^const Opcode s_opcode_byte_after_ff[] = {$/;"	m	namespace:sidestep	file:
sa_flags	src/base/linux_syscall_support.h	/^  unsigned long      sa_flags;$/;"	m	struct:kernel_old_sigaction
sa_flags	src/base/linux_syscall_support.h	/^  unsigned long      sa_flags;$/;"	m	struct:kernel_sigaction
sa_handler_	src/base/linux_syscall_support.h	/^    void             (*sa_handler_)(int);$/;"	m	union:kernel_old_sigaction::__anon45
sa_handler_	src/base/linux_syscall_support.h	/^    void             (*sa_handler_)(int);$/;"	m	union:kernel_sigaction::__anon46
sa_mask	src/base/linux_syscall_support.h	/^  struct kernel_sigset_t sa_mask;$/;"	m	struct:kernel_sigaction	typeref:struct:kernel_sigaction::kernel_sigset_t
sa_mask	src/base/linux_syscall_support.h	/^  unsigned long      sa_mask;$/;"	m	struct:kernel_old_sigaction
sa_restorer	src/base/linux_syscall_support.h	/^  void               (*sa_restorer)(void);$/;"	m	struct:kernel_old_sigaction
sa_sigaction_	src/base/linux_syscall_support.h	/^    void             (*sa_sigaction_)(int, siginfo_t *, void *);$/;"	m	union:kernel_old_sigaction::__anon45
sa_sigaction_	src/base/linux_syscall_support.h	/^    void             (*sa_sigaction_)(int, siginfo_t *, void *);$/;"	m	union:kernel_sigaction::__anon46
safe_vsnprintf	src/windows/preamble_patcher_test.cc	/^int safe_vsnprintf(char *str, size_t size, const char *format, va_list ap) {$/;"	f
safeclose	src/base/sysinfo.cc	103;"	d	file:
safeclose	src/base/sysinfo.cc	105;"	d	file:
safeopen	src/base/sysinfo.cc	93;"	d	file:
safeopen	src/base/sysinfo.cc	95;"	d	file:
saferead	src/base/sysinfo.cc	100;"	d	file:
saferead	src/base/sysinfo.cc	98;"	d	file:
sample	src/span.h	/^  unsigned int  sample : 1;     \/\/ Sampled object?$/;"	m	struct:tcmalloc::Span
sample_period	src/tests/sampler_test.cc	/^  static uint64_t sample_period;$/;"	m	class:OldSampler	file:
sample_period	src/tests/sampler_test.cc	/^uint64_t OldSampler::sample_period;$/;"	m	class:OldSampler	file:
sampled_objects	src/static_vars.h	/^  static Span* sampled_objects() { return &sampled_objects_; }$/;"	f	class:tcmalloc::Static
sampled_objects_	src/static_vars.cc	/^Span Static::sampled_objects_;$/;"	m	class:tcmalloc::Static	file:
sampled_objects_	src/static_vars.h	/^  static Span sampled_objects_;$/;"	m	class:tcmalloc::Static
sampler_	src/thread_cache.h	/^  Sampler       sampler_;               \/\/ A sampler$/;"	m	class:tcmalloc::ThreadCache
sampler_debug_test_CXXFLAGS	Makefile	/^sampler_debug_test_CXXFLAGS = $(samples_test_CXXFLAGS)$/;"	m
sampler_debug_test_DEPENDENCIES	Makefile	/^sampler_debug_test_DEPENDENCIES = libtcmalloc_debug.la \\$/;"	m
sampler_debug_test_LDADD	Makefile	/^sampler_debug_test_LDADD = libtcmalloc_debug.la $(PTHREAD_LIBS) -lm$/;"	m
sampler_debug_test_LDFLAGS	Makefile	/^sampler_debug_test_LDFLAGS = $(sampler_test_LDFLAGS)$/;"	m
sampler_debug_test_LINK	Makefile	/^sampler_debug_test_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
sampler_debug_test_OBJECTS	Makefile	/^sampler_debug_test_OBJECTS = $(am_sampler_debug_test_OBJECTS)$/;"	m
sampler_debug_test_SOURCES	Makefile	/^sampler_debug_test_SOURCES = $(sampler_test_SOURCES)$/;"	m
sampler_test_CXXFLAGS	Makefile	/^sampler_test_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS)$/;"	m
sampler_test_DEPENDENCIES	Makefile	/^sampler_test_DEPENDENCIES =  \\$/;"	m
sampler_test_LDADD	Makefile	/^sampler_test_LDADD = $(LIBTCMALLOC) $(PTHREAD_LIBS) -lm$/;"	m
sampler_test_LDFLAGS	Makefile	/^sampler_test_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
sampler_test_LINK	Makefile	/^sampler_test_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \\$/;"	m
sampler_test_OBJECTS	Makefile	/^sampler_test_OBJECTS = $(am_sampler_test_OBJECTS)$/;"	m
sampler_test_SOURCES	Makefile	/^sampler_test_SOURCES = src\/tests\/sampler_test.cc \\$/;"	m
samples_gathered	src/gperftools/profiler.h	/^  int    samples_gathered;    \/* Number of samples gathered so far (or 0) *\/$/;"	m	struct:ProfilerState
samples_gathered	src/profiledata.h	/^    int      samples_gathered;    \/\/ Number of samples gathered to far (or 0)$/;"	m	struct:ProfileData::State
sampling_debug_test_CXXFLAGS	Makefile	/^sampling_debug_test_CXXFLAGS = $(sampling_test_CXXFLAGS)$/;"	m
sampling_debug_test_DEPENDENCIES	Makefile	/^sampling_debug_test_DEPENDENCIES = libtcmalloc_debug.la \\$/;"	m
sampling_debug_test_LDADD	Makefile	/^sampling_debug_test_LDADD = libtcmalloc_debug.la $(PTHREAD_LIBS)$/;"	m
sampling_debug_test_LDFLAGS	Makefile	/^sampling_debug_test_LDFLAGS = $(sampling_test_LDFLAGS)$/;"	m
sampling_debug_test_LINK	Makefile	/^sampling_debug_test_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
sampling_debug_test_OBJECTS	Makefile	/^sampling_debug_test_OBJECTS = $(am_sampling_debug_test_OBJECTS)$/;"	m
sampling_debug_test_SOURCES	Makefile	/^sampling_debug_test_SOURCES = $(sampling_test_SOURCES)$/;"	m
sampling_debug_test_sh_LDADD	Makefile	/^sampling_debug_test_sh_LDADD = $(LDADD)$/;"	m
sampling_debug_test_sh_OBJECTS	Makefile	/^sampling_debug_test_sh_OBJECTS = $(am_sampling_debug_test_sh_OBJECTS)$/;"	m
sampling_debug_test_sh_SOURCES	Makefile	/^sampling_debug_test_sh_SOURCES = src\/tests\/sampling_test.sh$/;"	m
sampling_test_CXXFLAGS	Makefile	/^sampling_test_CXXFLAGS = -g $(PTHREAD_CFLAGS) $(AM_CXXFLAGS)$/;"	m
sampling_test_DEPENDENCIES	Makefile	/^sampling_test_DEPENDENCIES =  \\$/;"	m
sampling_test_LDADD	Makefile	/^sampling_test_LDADD = $(LIBTCMALLOC) $(PTHREAD_LIBS)$/;"	m
sampling_test_LDFLAGS	Makefile	/^sampling_test_LDFLAGS = -g $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
sampling_test_LINK	Makefile	/^sampling_test_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
sampling_test_OBJECTS	Makefile	/^sampling_test_OBJECTS = $(am_sampling_test_OBJECTS)$/;"	m
sampling_test_SOURCES	Makefile	/^sampling_test_SOURCES = src\/tests\/sampling_test.cc \\$/;"	m
sampling_test_sh_LDADD	Makefile	/^sampling_test_sh_LDADD = $(LDADD)$/;"	m
sampling_test_sh_OBJECTS	Makefile	/^sampling_test_sh_OBJECTS = $(am_sampling_test_sh_OBJECTS)$/;"	m
sampling_test_sh_SOURCES	Makefile	/^sampling_test_sh_SOURCES = src\/tests\/sampling_test.sh$/;"	m
saved_buckets_	src/memory_region_map.cc	/^HeapProfileBucket MemoryRegionMap::saved_buckets_[20];  \/\/ GUARDED_BY(lock_)$/;"	m	class:MemoryRegionMap	file:
saved_buckets_count_	src/memory_region_map.cc	/^int MemoryRegionMap::saved_buckets_count_ = 0;  \/\/ GUARDED_BY(lock_)$/;"	m	class:MemoryRegionMap	file:
saved_buckets_keys_	src/memory_region_map.cc	/^const void* MemoryRegionMap::saved_buckets_keys_[20][kMaxStackDepth];$/;"	m	class:MemoryRegionMap	file:
saved_regions	src/memory_region_map.cc	/^static MemoryRegionMap::Region saved_regions[20];$/;"	v	file:
saved_regions_count	src/memory_region_map.cc	/^static int saved_regions_count = 0;$/;"	v	file:
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbrk	src/windows/port.h	/^inline void *sbrk(intptr_t increment) {$/;"	f
sbrk_hooks_	src/malloc_hook.cc	/^HookList<MallocHook::SbrkHook> sbrk_hooks_ = INIT_HOOK_LIST;$/;"	m	namespace:base::internal	file:
sbrk_name	src/system-alloc.cc	/^static const char sbrk_name[] = "SbrkSysAllocator";$/;"	v	file:
sbrk_space	src/system-alloc.cc	/^static char sbrk_space[sizeof(SbrkSysAllocator)];$/;"	v	file:
scavenge_counter_	src/page_heap.h	/^  int64_t scavenge_counter_;$/;"	m	class:tcmalloc::PageHeap
schar	src/base/basictypes.h	/^typedef signed char         schar;$/;"	t
sched_yield	src/windows/port.h	/^inline void sched_yield(void) {$/;"	f
scoped_array	src/tests/profiledata_unittest.cc	/^  scoped_array(T* data) : data_(data) { }$/;"	f	class:__anon30::scoped_array
scoped_array	src/tests/profiledata_unittest.cc	/^template<typename T> class scoped_array {$/;"	c	namespace:__anon30	file:
scoped_array	src/tests/sampler_test.cc	/^  scoped_array(T* p) : p_(p) { }$/;"	f	class:__anon27::scoped_array
scoped_array	src/tests/sampler_test.cc	/^template<typename T> class scoped_array {$/;"	c	namespace:__anon27	file:
seed_	src/tests/tcmalloc_unittest.cc	/^    int32 seed_;$/;"	m	class:testing::TesterThread::ACMRandom	file:
self_thread_pid	src/heap-checker.cc	/^static pid_t self_thread_pid = 0;$/;"	v	file:
self_thread_stack_top	src/heap-checker.cc	/^static const void* self_thread_stack_top;$/;"	v	file:
set	src/pagemap.h	/^  void set(Number k, void* v) {$/;"	f	class:TCMalloc_PageMap1
set	src/pagemap.h	/^  void set(Number k, void* v) {$/;"	f	class:TCMalloc_PageMap2
set	src/pagemap.h	/^  void set(Number k, void* v) {$/;"	f	class:TCMalloc_PageMap3
set_base_from	depcomp	/^set_base_from ()$/;"	f
set_bucket	src/heap-profile-table.h	/^    void set_bucket(Bucket* b) { bucket_rep = reinterpret_cast<uintptr_t>(b); }$/;"	f	struct:HeapProfileTable::AllocValue
set_call_stack_depth	src/memory_region_map.h	/^    void set_call_stack_depth(int depth) {$/;"	f	struct:MemoryRegionMap::Region
set_chunk_head_mark	src/tcmalloc.cc	/^set_chunk_head_mark(struct chunk_head *chk_head) {$/;"	f	file:
set_cpu_affinity	src/tcmalloc.cc	/^set_cpu_affinity(int id)$/;"	f	file:
set_data	src/tests/heap-checker_unittest.cc	/^static int set_data[] = { 1, 2, 3, 4, 5, 6, 7, 21, 22, 23, 24, 25, 26, 27 };$/;"	v	file:
set_default_open_	src/tcmalloc.cc	/^void set_default_open_()$/;"	f
set_default_restrict_	src/tcmalloc.cc	/^void set_default_restrict_()$/;"	f
set_dir_from	depcomp	/^set_dir_from ()$/;"	f
set_end_addr	src/memory_region_map.h	/^    void set_end_addr(uintptr_t addr) {$/;"	f	struct:MemoryRegionMap::Region
set_frequency	src/profiledata.h	/^    void set_frequency(int frequency) {$/;"	f	class:ProfileData::Options
set_growth_stacks	src/static_vars.h	/^  static void set_growth_stacks(StackTrace* s) { growth_stacks_ = s; }$/;"	f	class:tcmalloc::Static
set_heap_type	src/tcmalloc.cc	/^set_heap_type(struct chunk_head *chk_head, int type) {$/;"	f	file:
set_ignore	src/heap-profile-table.h	/^    void set_ignore(bool r) {$/;"	f	struct:HeapProfileTable::AllocValue
set_is_stack	src/memory_region_map.h	/^    void set_is_stack() { is_stack = true; }$/;"	f	struct:MemoryRegionMap::Region
set_is_valid	src/windows/patch_functions.cc	/^  void set_is_valid(bool b) { is_valid_ = b; }$/;"	f	class:__anon9::LibcInfo
set_length_overages	src/thread_cache.h	/^    void set_length_overages(size_t new_count) {$/;"	f	class:tcmalloc::ThreadCache::FreeList
set_live	src/heap-profile-table.h	/^    void set_live(bool l) {$/;"	f	struct:HeapProfileTable::AllocValue
set_max_length	src/thread_cache.h	/^    void set_max_length(size_t new_max) {$/;"	f	class:tcmalloc::ThreadCache::FreeList
set_offset	src/debugallocation.cc	/^  void set_offset(int offset) { this->offset_ = offset; }$/;"	f	class:MallocBlock
set_overall_thread_cache_size	src/thread_cache.cc	/^void ThreadCache::set_overall_thread_cache_size(size_t new_size) {$/;"	f	class:tcmalloc::ThreadCache
set_start_addr	src/memory_region_map.h	/^    void set_start_addr(uintptr_t addr) {$/;"	f	struct:MemoryRegionMap::Region
set_stop_work	src/tests/profile-handler_unittest.cc	/^  void set_stop_work(bool stop_work) {$/;"	f	class:__anon28::BusyThread
set_thread_disable_counter	src/heap-checker.cc	/^inline void set_thread_disable_counter(int value) {$/;"	f
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shift_	src/windows/mini_disassembler_types.h	/^  unsigned char shift_;$/;"	m	struct:sidestep::OpcodeTable
should_decode_modrm_	src/windows/mini_disassembler.h	/^  bool should_decode_modrm_;$/;"	m	class:sidestep::MiniDisassembler
should_report_large	src/tcmalloc.cc	/^inline bool should_report_large(Length num_pages) {$/;"	f	namespace:__anon5
should_skip_cache_management	src/tcmalloc.cc	/^should_skip_cache_management() {$/;"	f	file:
should_skip_cache_management	src/tcmalloc.cc	/^should_skip_cache_management(size_t size) {$/;"	f	file:
sidestep	src/windows/auto_testing_hook.h	/^namespace sidestep {$/;"	n
sidestep	src/windows/ia32_modrm_map.cc	/^namespace sidestep {$/;"	n	file:
sidestep	src/windows/ia32_opcode_map.cc	/^namespace sidestep {$/;"	n	file:
sidestep	src/windows/mini_disassembler.cc	/^namespace sidestep {$/;"	n	file:
sidestep	src/windows/mini_disassembler.h	/^namespace sidestep {$/;"	n
sidestep	src/windows/mini_disassembler_types.h	/^namespace sidestep {$/;"	n
sidestep	src/windows/preamble_patcher.cc	/^namespace sidestep {$/;"	n	file:
sidestep	src/windows/preamble_patcher.h	/^namespace sidestep {$/;"	n
sidestep	src/windows/preamble_patcher_test.cc	/^namespace sidestep {$/;"	n	file:
sidestep	src/windows/preamble_patcher_with_stub.cc	/^namespace sidestep {$/;"	n	file:
sig	src/base/linux_syscall_support.h	/^  unsigned long sig[(KERNEL_NSIG + 8*sizeof(unsigned long) - 1)\/$/;"	m	struct:kernel_sigset_t
sig_marker	src/base/linuxthreads.cc	/^static volatile int *sig_pids, sig_num_threads, sig_proc, sig_marker;$/;"	v	file:
sig_num_threads	src/base/linuxthreads.cc	/^static volatile int *sig_pids, sig_num_threads, sig_proc, sig_marker;$/;"	v	file:
sig_pids	src/base/linuxthreads.cc	/^static volatile int *sig_pids, sig_num_threads, sig_proc, sig_marker;$/;"	v	file:
sig_proc	src/base/linuxthreads.cc	/^static volatile int *sig_pids, sig_num_threads, sig_proc, sig_marker;$/;"	v	file:
sigaction	src/base/linux_syscall_support.h	/^    LSS_INLINE int LSS_NAME(sigaction)(int signum,$/;"	f
sigaddset	src/base/linux_syscall_support.h	/^  LSS_INLINE int LSS_NAME(sigaddset)(struct kernel_sigset_t *set,$/;"	f
sigdelset	src/base/linux_syscall_support.h	/^  LSS_INLINE int LSS_NAME(sigdelset)(struct kernel_sigset_t *set,$/;"	f
sigemptyset	src/base/linux_syscall_support.h	/^  LSS_INLINE int LSS_NAME(sigemptyset)(struct kernel_sigset_t *set) {$/;"	f
sigfillset	src/base/linux_syscall_support.h	/^  LSS_INLINE int LSS_NAME(sigfillset)(struct kernel_sigset_t *set) {$/;"	f
sighandler	src/pprof	/^sub sighandler {$/;"	s
signal_lock_	src/profile-handler.cc	/^  SpinLock signal_lock_;$/;"	m	class:ProfileHandler	file:
signal_number_	src/tests/profile-handler_unittest.cc	/^static int signal_number_ = SIGPROF;$/;"	m	namespace:__anon28	file:
sigprocmask	src/base/linux_syscall_support.h	/^    LSS_INLINE int LSS_NAME(sigprocmask)(int how,$/;"	f
simple_compat_test_DEPENDENCIES	Makefile	/^simple_compat_test_DEPENDENCIES =  \\$/;"	m
simple_compat_test_LDADD	Makefile	/^simple_compat_test_LDADD = $(LIBTCMALLOC) $(PTHREAD_LIBS)$/;"	m
simple_compat_test_LDFLAGS	Makefile	/^simple_compat_test_LDFLAGS = $(TCMALLOC_FLAGS)$/;"	m
simple_compat_test_LINK	Makefile	/^simple_compat_test_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
simple_compat_test_OBJECTS	Makefile	/^simple_compat_test_OBJECTS = $(am_simple_compat_test_OBJECTS)$/;"	m
simple_compat_test_SOURCES	Makefile	/^simple_compat_test_SOURCES = src\/tests\/simple_compat_test.cc \\$/;"	m
size	src/base/low_level_alloc.cc	/^      intptr_t size;  \/\/ size of entire region, including this field. Must be$/;"	m	struct:low_level_alloc_internal::AllocList::Header	file:
size	src/common.h	/^  uintptr_t size;          \/\/ Size of object$/;"	m	struct:tcmalloc::StackTrace
size	src/debugallocation.cc	/^  size_t size() const {$/;"	f	class:FreeQueue
size	src/debugallocation.cc	/^  size_t size;$/;"	m	struct:MallocBlockQueueEntry	file:
size	src/heap-checker.cc	/^  uintptr_t size;         \/\/ its size$/;"	m	struct:AllocObject	file:
size	src/tests/addressmap_unittest.cc	/^  size_t size;$/;"	m	struct:PtrAndSize	file:
size	src/tests/heap-checker_unittest.cc	/^  size_t size;$/;"	m	struct:Array	file:
size	src/tests/tcmalloc_unittest.cc	/^    int         size;                   \/\/ Allocated size$/;"	m	struct:testing::TesterThread::Object	file:
size1_	src/debugallocation.cc	/^  size_t size1_;$/;"	m	class:MallocBlock	file:
size2_	src/debugallocation.cc	/^  size_t size2_;$/;"	m	class:MallocBlock	file:
size2_addr	src/debugallocation.cc	/^  const size_t* size2_addr() const {$/;"	f	class:MallocBlock	file:
size2_addr	src/debugallocation.cc	/^  size_t* size2_addr() { return (size_t*)((char*)&size2_ + size1_); }$/;"	f	class:MallocBlock	file:
size_	src/thread_cache.h	/^  size_t        size_;                  \/\/ Combined size of data$/;"	m	class:tcmalloc::ThreadCache
size_class_	src/central_freelist.h	/^  size_t   size_class_;     \/\/ My size class$/;"	m	class:tcmalloc::CentralFreeList
size_type	src/base/stl_allocator.h	/^  typedef size_t     size_type;$/;"	t	class:STL_Allocator
sizeclass	src/span.h	/^  unsigned int  sizeclass : 8;  \/\/ Size-class for small objects (or 0)$/;"	m	struct:tcmalloc::Span
sizemap	src/static_vars.h	/^  static SizeMap* sizemap() { return &sizemap_; }$/;"	f	class:tcmalloc::Static
sizemap_	src/static_vars.cc	/^SizeMap Static::sizemap_;$/;"	m	class:tcmalloc::Static	file:
sizemap_	src/static_vars.h	/^  static SizeMap sizemap_;$/;"	m	class:tcmalloc::Static
sizeof	src/base/atomicops-internals-windows.h	/^COMPILE_ASSERT(sizeof(Atomic64) == sizeof(PVOID), atomic_word_is_atomic);$/;"	m	namespace:base::subtle
skip_cache_manage	src/tcmalloc.cc	/^  bool skip_cache_manage;$/;"	m	struct:CacheManagerData	file:
sleep	src/windows/port.h	/^inline unsigned int sleep(unsigned int seconds) {$/;"	f
small	src/tcmalloc.cc	467;"	d	file:
snapshot_	src/base/sysinfo.h	/^  HANDLE snapshot_;   \/\/ filehandle on dll info$/;"	m	class:ProcMapsIterator
snprintf	src/windows/port.h	/^inline int snprintf(char *str, size_t size, const char *format, ...) {$/;"	f
snum	src/internal_logging.h	/^    int64_t snum;$/;"	m	union:tcmalloc::LogItem::__anon1
socket	src/base/linux_syscall_support.h	/^    LSS_INLINE int LSS_NAME(socket)(int domain, int type, int protocol) {$/;"	f
some_ints	src/tests/heap-checker_unittest.cc	/^static int some_ints[] = { 1, 2, 3, 21, 22, 23, 24, 25 };$/;"	v	file:
space_left	src/raw_printer.h	/^  int space_left() const { return (limit_ - ptr_); }$/;"	f	class:base::RawPrinter
span_allocator	src/static_vars.h	/^  static PageHeapAllocator<Span>* span_allocator() { return &span_allocator_; }$/;"	f	class:tcmalloc::Static
span_allocator_	src/static_vars.cc	/^PageHeapAllocator<Span> Static::span_allocator_;$/;"	m	class:tcmalloc::Static	file:
span_allocator_	src/static_vars.h	/^  static PageHeapAllocator<Span> span_allocator_;$/;"	m	class:tcmalloc::Static
spans	src/page_heap.h	/^    int64 spans;           \/\/ Number of such spans$/;"	m	struct:tcmalloc::PageHeap::LargeSpanStats
spec_config	src/tcmalloc.cc	/^spec_config(const char *path)$/;"	f	file:
srandom	src/windows/port.h	/^inline void srandom(unsigned int seed) { srand(seed); }$/;"	f
srcdir	Makefile	/^srcdir = .$/;"	m
ss	src/base/elfcore.h	/^    uint64_t  rsp,ss;$/;"	m	struct:i386_regs
ssize_t	src/windows/port.h	/^typedef intptr_t ssize_t;$/;"	t
st_atim	src/base/linux_syscall_support.h	/^  kernel_timespec    st_atim;$/;"	m	struct:kernel_stat
st_atim	src/base/linux_syscall_support.h	/^  kernel_timespec    st_atim;$/;"	m	struct:kernel_stat64
st_atime_	src/base/linux_syscall_support.h	/^  long               st_atime_;$/;"	m	struct:kernel_stat
st_atime_	src/base/linux_syscall_support.h	/^  uint64_t           st_atime_;$/;"	m	struct:kernel_stat
st_atime_	src/base/linux_syscall_support.h	/^  unsigned           st_atime_;$/;"	m	struct:kernel_stat
st_atime_	src/base/linux_syscall_support.h	/^  unsigned           st_atime_;$/;"	m	struct:kernel_stat64
st_atime_nsec_	src/base/linux_syscall_support.h	/^  long               st_atime_nsec_;$/;"	m	struct:kernel_stat
st_atime_nsec_	src/base/linux_syscall_support.h	/^  uint64_t           st_atime_nsec_;$/;"	m	struct:kernel_stat
st_atime_nsec_	src/base/linux_syscall_support.h	/^  unsigned           st_atime_nsec_;$/;"	m	struct:kernel_stat
st_atime_nsec_	src/base/linux_syscall_support.h	/^  unsigned           st_atime_nsec_;$/;"	m	struct:kernel_stat64
st_atime_nsec_	src/base/linux_syscall_support.h	/^  unsigned long      st_atime_nsec_;$/;"	m	struct:kernel_stat
st_blksize	src/base/linux_syscall_support.h	/^  int                st_blksize;$/;"	m	struct:kernel_stat
st_blksize	src/base/linux_syscall_support.h	/^  int64_t            st_blksize;$/;"	m	struct:kernel_stat
st_blksize	src/base/linux_syscall_support.h	/^  long long          st_blksize;$/;"	m	struct:kernel_stat64
st_blksize	src/base/linux_syscall_support.h	/^  unsigned           st_blksize;$/;"	m	struct:kernel_stat
st_blksize	src/base/linux_syscall_support.h	/^  unsigned           st_blksize;$/;"	m	struct:kernel_stat64
st_blksize	src/base/linux_syscall_support.h	/^  unsigned long      st_blksize;$/;"	m	struct:kernel_stat
st_blocks	src/base/linux_syscall_support.h	/^  int                st_blocks;$/;"	m	struct:kernel_stat
st_blocks	src/base/linux_syscall_support.h	/^  int64_t            st_blocks;$/;"	m	struct:kernel_stat
st_blocks	src/base/linux_syscall_support.h	/^  long               st_blocks;$/;"	m	struct:kernel_stat
st_blocks	src/base/linux_syscall_support.h	/^  long long          st_blocks;$/;"	m	struct:kernel_stat64
st_blocks	src/base/linux_syscall_support.h	/^  unsigned           st_blocks;$/;"	m	struct:kernel_stat
st_blocks	src/base/linux_syscall_support.h	/^  unsigned long      st_blocks;$/;"	m	struct:kernel_stat
st_blocks	src/base/linux_syscall_support.h	/^  unsigned long long st_blocks;$/;"	m	struct:kernel_stat
st_blocks	src/base/linux_syscall_support.h	/^  unsigned long long st_blocks;$/;"	m	struct:kernel_stat64
st_ctim	src/base/linux_syscall_support.h	/^  kernel_timespec    st_ctim;$/;"	m	struct:kernel_stat
st_ctim	src/base/linux_syscall_support.h	/^  kernel_timespec    st_ctim;$/;"	m	struct:kernel_stat64
st_ctime_	src/base/linux_syscall_support.h	/^  long               st_ctime_;$/;"	m	struct:kernel_stat
st_ctime_	src/base/linux_syscall_support.h	/^  uint64_t           st_ctime_;$/;"	m	struct:kernel_stat
st_ctime_	src/base/linux_syscall_support.h	/^  unsigned           st_ctime_;$/;"	m	struct:kernel_stat
st_ctime_	src/base/linux_syscall_support.h	/^  unsigned           st_ctime_;$/;"	m	struct:kernel_stat64
st_ctime_nsec_	src/base/linux_syscall_support.h	/^  long               st_ctime_nsec_;$/;"	m	struct:kernel_stat
st_ctime_nsec_	src/base/linux_syscall_support.h	/^  uint64_t           st_ctime_nsec_;$/;"	m	struct:kernel_stat
st_ctime_nsec_	src/base/linux_syscall_support.h	/^  unsigned           st_ctime_nsec_;$/;"	m	struct:kernel_stat
st_ctime_nsec_	src/base/linux_syscall_support.h	/^  unsigned           st_ctime_nsec_;$/;"	m	struct:kernel_stat64
st_ctime_nsec_	src/base/linux_syscall_support.h	/^  unsigned long      st_ctime_nsec_;$/;"	m	struct:kernel_stat
st_dev	src/base/linux_syscall_support.h	/^  uint64_t           st_dev;$/;"	m	struct:kernel_stat
st_dev	src/base/linux_syscall_support.h	/^  unsigned           st_dev;$/;"	m	struct:kernel_stat
st_dev	src/base/linux_syscall_support.h	/^  unsigned long      st_dev;$/;"	m	struct:kernel_stat
st_dev	src/base/linux_syscall_support.h	/^  unsigned long long st_dev;$/;"	m	struct:kernel_stat
st_dev	src/base/linux_syscall_support.h	/^  unsigned long long st_dev;$/;"	m	struct:kernel_stat64
st_dev	src/base/linux_syscall_support.h	/^  unsigned short     st_dev;$/;"	m	struct:kernel_stat
st_gid	src/base/linux_syscall_support.h	/^  unsigned           st_gid;$/;"	m	struct:kernel_stat
st_gid	src/base/linux_syscall_support.h	/^  unsigned           st_gid;$/;"	m	struct:kernel_stat64
st_gid	src/base/linux_syscall_support.h	/^  unsigned int       st_gid;$/;"	m	struct:kernel_stat
st_gid	src/base/linux_syscall_support.h	/^  unsigned short     st_gid;$/;"	m	struct:kernel_stat
st_ino	src/base/linux_syscall_support.h	/^  uint64_t           st_ino;$/;"	m	struct:kernel_stat
st_ino	src/base/linux_syscall_support.h	/^  unsigned           st_ino;$/;"	m	struct:kernel_stat
st_ino	src/base/linux_syscall_support.h	/^  unsigned long      st_ino;$/;"	m	struct:kernel_stat
st_ino	src/base/linux_syscall_support.h	/^  unsigned long long st_ino;$/;"	m	struct:kernel_stat
st_ino	src/base/linux_syscall_support.h	/^  unsigned long long st_ino;$/;"	m	struct:kernel_stat64
st_mode	src/base/linux_syscall_support.h	/^  unsigned           st_mode;$/;"	m	struct:kernel_stat
st_mode	src/base/linux_syscall_support.h	/^  unsigned           st_mode;$/;"	m	struct:kernel_stat64
st_mode	src/base/linux_syscall_support.h	/^  unsigned int       st_mode;$/;"	m	struct:kernel_stat
st_mode	src/base/linux_syscall_support.h	/^  unsigned long      st_mode;$/;"	m	struct:kernel_stat
st_mode	src/base/linux_syscall_support.h	/^  unsigned short     st_mode;$/;"	m	struct:kernel_stat
st_mtim	src/base/linux_syscall_support.h	/^  kernel_timespec    st_mtim;$/;"	m	struct:kernel_stat
st_mtim	src/base/linux_syscall_support.h	/^  kernel_timespec    st_mtim;$/;"	m	struct:kernel_stat64
st_mtime_	src/base/linux_syscall_support.h	/^  long               st_mtime_;$/;"	m	struct:kernel_stat
st_mtime_	src/base/linux_syscall_support.h	/^  uint64_t           st_mtime_;$/;"	m	struct:kernel_stat
st_mtime_	src/base/linux_syscall_support.h	/^  unsigned           st_mtime_;$/;"	m	struct:kernel_stat
st_mtime_	src/base/linux_syscall_support.h	/^  unsigned           st_mtime_;$/;"	m	struct:kernel_stat64
st_mtime_nsec_	src/base/linux_syscall_support.h	/^  long               st_mtime_nsec_;$/;"	m	struct:kernel_stat
st_mtime_nsec_	src/base/linux_syscall_support.h	/^  uint64_t           st_mtime_nsec_;$/;"	m	struct:kernel_stat
st_mtime_nsec_	src/base/linux_syscall_support.h	/^  unsigned           st_mtime_nsec_;$/;"	m	struct:kernel_stat
st_mtime_nsec_	src/base/linux_syscall_support.h	/^  unsigned           st_mtime_nsec_;$/;"	m	struct:kernel_stat64
st_mtime_nsec_	src/base/linux_syscall_support.h	/^  unsigned long      st_mtime_nsec_;$/;"	m	struct:kernel_stat
st_nlink	src/base/linux_syscall_support.h	/^  uint64_t           st_nlink;$/;"	m	struct:kernel_stat
st_nlink	src/base/linux_syscall_support.h	/^  unsigned           st_nlink;$/;"	m	struct:kernel_stat
st_nlink	src/base/linux_syscall_support.h	/^  unsigned           st_nlink;$/;"	m	struct:kernel_stat64
st_nlink	src/base/linux_syscall_support.h	/^  unsigned int       st_nlink;$/;"	m	struct:kernel_stat
st_nlink	src/base/linux_syscall_support.h	/^  unsigned long      st_nlink;$/;"	m	struct:kernel_stat
st_nlink	src/base/linux_syscall_support.h	/^  unsigned short     st_nlink;$/;"	m	struct:kernel_stat
st_pad1	src/base/linux_syscall_support.h	/^  int                st_pad1[3];$/;"	m	struct:kernel_stat
st_pad2	src/base/linux_syscall_support.h	/^  int                st_pad2[2];$/;"	m	struct:kernel_stat
st_pad3	src/base/linux_syscall_support.h	/^  int                st_pad3;$/;"	m	struct:kernel_stat
st_pad4	src/base/linux_syscall_support.h	/^  int                st_pad4[14];$/;"	m	struct:kernel_stat
st_rdev	src/base/linux_syscall_support.h	/^  uint64_t           st_rdev;$/;"	m	struct:kernel_stat
st_rdev	src/base/linux_syscall_support.h	/^  unsigned           st_rdev;$/;"	m	struct:kernel_stat
st_rdev	src/base/linux_syscall_support.h	/^  unsigned long      st_rdev;$/;"	m	struct:kernel_stat
st_rdev	src/base/linux_syscall_support.h	/^  unsigned long long st_rdev;$/;"	m	struct:kernel_stat
st_rdev	src/base/linux_syscall_support.h	/^  unsigned long long st_rdev;$/;"	m	struct:kernel_stat64
st_rdev	src/base/linux_syscall_support.h	/^  unsigned short     st_rdev;$/;"	m	struct:kernel_stat
st_size	src/base/linux_syscall_support.h	/^  int64_t            st_size;$/;"	m	struct:kernel_stat
st_size	src/base/linux_syscall_support.h	/^  long               st_size;$/;"	m	struct:kernel_stat
st_size	src/base/linux_syscall_support.h	/^  long long          st_size;$/;"	m	struct:kernel_stat
st_size	src/base/linux_syscall_support.h	/^  long long          st_size;$/;"	m	struct:kernel_stat64
st_size	src/base/linux_syscall_support.h	/^  unsigned           st_size;$/;"	m	struct:kernel_stat
st_uid	src/base/linux_syscall_support.h	/^  unsigned           st_uid;$/;"	m	struct:kernel_stat
st_uid	src/base/linux_syscall_support.h	/^  unsigned           st_uid;$/;"	m	struct:kernel_stat64
st_uid	src/base/linux_syscall_support.h	/^  unsigned int       st_uid;$/;"	m	struct:kernel_stat
st_uid	src/base/linux_syscall_support.h	/^  unsigned short     st_uid;$/;"	m	struct:kernel_stat
stack	src/common.h	/^  void*     stack[kMaxStackDepth];$/;"	m	struct:tcmalloc::StackTrace
stack	src/heap-profile-stats.h	/^  const void** stack;       \/\/ Stack trace.$/;"	m	struct:HeapProfileBucket
stack	src/profiledata.h	/^    Slot stack[kMaxStackDepth];  \/\/ Stack contents$/;"	m	struct:ProfileData::Entry
stack_depth	src/heap-profile-table.h	/^    int stack_depth;                \/\/ Depth of stack trace$/;"	m	struct:HeapProfileTable::AllocContextInfo
stack_depth	src/heap-profile-table.h	/^    int stack_depth;  \/\/ depth of call_stack$/;"	m	struct:HeapProfileTable::AllocInfo
stack_depth	src/stacktrace_instrument-inl.h	/^  int   stack_depth;$/;"	m	struct:__anon16
stack_direction	src/heap-checker.cc	/^static StackDirection stack_direction = UNKNOWN_DIRECTION;$/;"	v	file:
stack_tops	src/heap-checker.cc	/^static StackTopSet* stack_tops = NULL;$/;"	v	file:
stack_trace_table_test_CXXFLAGS	Makefile	/^stack_trace_table_test_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS)$/;"	m
stack_trace_table_test_DEPENDENCIES	Makefile	/^stack_trace_table_test_DEPENDENCIES = $(LIBTCMALLOC_MINIMAL) \\$/;"	m
stack_trace_table_test_LDADD	Makefile	/^stack_trace_table_test_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)$/;"	m
stack_trace_table_test_LDFLAGS	Makefile	/^stack_trace_table_test_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
stack_trace_table_test_LINK	Makefile	/^stack_trace_table_test_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
stack_trace_table_test_OBJECTS	Makefile	/^stack_trace_table_test_OBJECTS = $(am_stack_trace_table_test_OBJECTS)$/;"	m
stack_trace_table_test_SOURCES	Makefile	/^stack_trace_table_test_SOURCES = src\/tests\/stack_trace_table_test.cc \\$/;"	m
stacktrace_allocator	src/static_vars.h	/^  static PageHeapAllocator<StackTrace>* stacktrace_allocator() {$/;"	f	class:tcmalloc::Static
stacktrace_allocator_	src/static_vars.cc	/^PageHeapAllocator<StackTrace> Static::stacktrace_allocator_;$/;"	m	class:tcmalloc::Static	file:
stacktrace_allocator_	src/static_vars.h	/^  static PageHeapAllocator<StackTrace> stacktrace_allocator_;$/;"	m	class:tcmalloc::Static
stacktrace_h	src/tests/simple_compat_test.cc	/^int (*stacktrace_h)(void**, int, int) = &GetStackTrace;$/;"	v
stacktrace_unittest_DEPENDENCIES	Makefile	/^stacktrace_unittest_DEPENDENCIES =  \\$/;"	m
stacktrace_unittest_LDADD	Makefile	/^stacktrace_unittest_LDADD = libstacktrace.la liblogging.la$/;"	m
stacktrace_unittest_OBJECTS	Makefile	/^stacktrace_unittest_OBJECTS = $(am_stacktrace_unittest_OBJECTS)$/;"	m
stacktrace_unittest_SOURCES	Makefile	/^stacktrace_unittest_SOURCES = src\/tests\/stacktrace_unittest.cc \\$/;"	m
start	src/span.h	/^  PageID        start;          \/\/ Starting page number$/;"	m	struct:tcmalloc::Span
start	src/tests/stacktrace_unittest.cc	/^  const void *start, *end;$/;"	m	struct:__anon26::AddressRange	file:
start_addr	src/memory_region_map.h	/^    uintptr_t start_addr;  \/\/ region start address$/;"	m	struct:MemoryRegionMap::Region
start_address	src/heap-checker.cc	/^  uintptr_t start_address;  \/\/ the start of the range$/;"	m	struct:HeapLeakChecker::RangeValue	file:
start_snapshot_	src/gperftools/heap-checker.h	/^  void* start_snapshot_;$/;"	m	class:HeapLeakChecker
start_time	src/gperftools/profiler.h	/^  time_t start_time;          \/* If enabled, when was profiling started? *\/$/;"	m	struct:ProfilerState
start_time	src/profiledata.h	/^    time_t   start_time;          \/\/ If enabled, when was profiling started?$/;"	m	struct:ProfileData::State
start_time_	src/profiledata.h	/^  time_t        start_time_;    \/\/ Start time, or 0$/;"	m	class:ProfileData
stat	src/base/linux_syscall_support.h	/^    LSS_INLINE int LSS_NAME(stat)(const char* p, struct kernel_stat* b) {$/;"	f
static_fn	src/windows/patch_functions.cc	/^  static GenericFnPtr static_fn(int ifunction) {$/;"	f	class:__anon9::LibcInfo
static_fn_	src/windows/patch_functions.cc	/^  static const GenericFnPtr static_fn_[kNumFunctions];$/;"	m	class:__anon9::LibcInfo	file:
static_fn_	src/windows/patch_functions.cc	/^const GenericFnPtr LibcInfo::static_fn_[] = {$/;"	m	class:__anon9::LibcInfo	file:
stats	src/page_heap.h	/^  inline Stats stats() const { return stats_; }$/;"	f	class:tcmalloc::PageHeap
stats_	src/page_heap.h	/^  Stats stats_;$/;"	m	class:tcmalloc::PageHeap
stats_blocks_	src/debugallocation.cc	/^  static int stats_blocks_;$/;"	m	class:MallocBlock	file:
stats_blocks_	src/debugallocation.cc	/^int MallocBlock::stats_blocks_;$/;"	m	class:MallocBlock	file:
stats_buffer	src/internal_logging.cc	/^static char stats_buffer[kStatsBufferSize] = { 0 };$/;"	v	file:
stats_histogram_	src/debugallocation.cc	/^  static int* stats_histogram_;$/;"	m	class:MallocBlock	file:
stats_histogram_	src/debugallocation.cc	/^int* MallocBlock::stats_histogram_;$/;"	m	class:MallocBlock	file:
stats_total_	src/debugallocation.cc	/^  static size_t stats_total_;$/;"	m	class:MallocBlock	file:
stats_total_	src/debugallocation.cc	/^size_t MallocBlock::stats_total_;$/;"	m	class:MallocBlock	file:
std	src/gperftools/tcmalloc.h	/^namespace std {$/;"	n
std	src/windows/gperftools/tcmalloc.h	/^namespace std {$/;"	n
stext_	src/base/sysinfo.h	/^  char *stext_;       \/\/ start of text$/;"	m	class:ProcMapsIterator
stop_work	src/tests/profile-handler_unittest.cc	/^  bool stop_work() {$/;"	f	class:__anon28::BusyThread
stop_work_	src/tests/profile-handler_unittest.cc	/^  bool stop_work_;$/;"	m	class:__anon28::BusyThread	file:
str	src/internal_logging.h	/^    const char* str;$/;"	m	union:tcmalloc::LogItem::__anon1
strsize_	src/base/elf_mem_image.h	/^  size_t strsize_;$/;"	m	class:base::ElfMemImage
strtoll	src/windows/port.h	/^inline long long int strtoll(const char *nptr, char **endptr, int base) {$/;"	f
strtoq	src/windows/port.h	/^inline long long int strtoq(const char *nptr, char **endptr, int base) {$/;"	f
strtoull	src/windows/port.h	/^inline unsigned long long int strtoull(const char *nptr, char **endptr,$/;"	f
strtouq	src/windows/port.h	/^inline unsigned long long int strtouq(const char *nptr, char **endptr,$/;"	f
subdir	Makefile	/^subdir = .$/;"	m
subtle	src/base/atomicops-internals-arm-generic.h	/^namespace subtle {$/;"	n	namespace:base
subtle	src/base/atomicops-internals-arm-v6plus.h	/^namespace subtle {$/;"	n	namespace:base
subtle	src/base/atomicops-internals-gcc.h	/^namespace subtle {$/;"	n	namespace:base
subtle	src/base/atomicops-internals-linuxppc.h	/^namespace subtle {$/;"	n	namespace:base
subtle	src/base/atomicops-internals-macosx.h	/^namespace subtle {$/;"	n	namespace:base
subtle	src/base/atomicops-internals-mips.h	/^namespace subtle {$/;"	n	namespace:base
subtle	src/base/atomicops-internals-windows.h	/^namespace subtle {$/;"	n	namespace:base
subtle	src/base/atomicops-internals-x86.h	/^namespace subtle {$/;"	n	namespace:base
subtle	src/base/atomicops.h	/^namespace subtle {$/;"	n	namespace:base
sym_cmp	src/windows/nm-pdb.c	/^static int sym_cmp(const void *_s1, const void *_s2) {$/;"	f	file:
symbol	src/base/elf_mem_image.h	/^    const ElfW(Sym) *symbol;    \/\/ Symbol in the dynamic symbol table.$/;"	m	struct:base::ElfMemImage::SymbolInfo
symbol_buffer_	src/symbolize.h	/^  char *symbol_buffer_;$/;"	m	class:SymbolTable
symbolization_table_	src/symbolize.h	/^  SymbolMap symbolization_table_;$/;"	m	class:SymbolTable
syms	src/windows/nm-pdb.c	/^  SYM *syms;$/;"	m	struct:__anon13	file:
syms_cap	src/windows/nm-pdb.c	/^  DWORD syms_cap;$/;"	m	struct:__anon13	file:
syms_len	src/windows/nm-pdb.c	/^  DWORD syms_len;$/;"	m	struct:__anon13	file:
sync_signals	src/base/linuxthreads.cc	/^static const int sync_signals[]  = { SIGABRT, SIGILL, SIGFPE, SIGSEGV, SIGBUS,$/;"	v	file:
sys0_sigprocmask	src/base/linuxthreads.cc	609;"	d	file:
sys0_waitpid	src/base/linuxthreads.cc	610;"	d	file:
sys_alloc	src/system-alloc.cc	/^SysAllocator* sys_alloc = NULL;$/;"	v
sys_alloc	src/windows/system-alloc.cc	/^SysAllocator* sys_alloc = NULL;$/;"	v
sys_ptrace	src/heap-checker.cc	1045;"	d	file:
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
system_alloc_inited	src/system-alloc.cc	/^static bool system_alloc_inited = false;$/;"	v	file:
system_alloc_inited	src/windows/system-alloc.cc	/^static bool system_alloc_inited = false;$/;"	v	file:
system_alloc_unittest_CXXFLAGS	Makefile	/^system_alloc_unittest_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
system_alloc_unittest_DEPENDENCIES	Makefile	/^system_alloc_unittest_DEPENDENCIES =  \\$/;"	m
system_alloc_unittest_LDADD	Makefile	/^system_alloc_unittest_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)$/;"	m
system_alloc_unittest_LDFLAGS	Makefile	/^system_alloc_unittest_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
system_alloc_unittest_LINK	Makefile	/^system_alloc_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
system_alloc_unittest_OBJECTS	Makefile	/^system_alloc_unittest_OBJECTS = $(am_system_alloc_unittest_OBJECTS)$/;"	m
system_alloc_unittest_SOURCES	Makefile	/^system_alloc_unittest_SOURCES = src\/config_for_unittests.h \\$/;"	m
system_bytes	src/page_heap.h	/^    uint64_t system_bytes;    \/\/ Total bytes allocated from system$/;"	m	struct:tcmalloc::PageHeap::Stats
table_	src/stack_trace_table.h	/^  Bucket** table_;$/;"	m	class:tcmalloc::StackTraceTable
table_	src/windows/mini_disassembler_types.h	/^  const Opcode* table_;$/;"	m	struct:sidestep::OpcodeTable
table_index_	src/windows/mini_disassembler_types.h	/^  int table_index_;$/;"	m	struct:sidestep::Opcode
table_index_	src/windows/mini_disassembler_types.h	/^  int table_index_;$/;"	m	struct:sidestep::SpecificOpcode
table_offset	src/base/elf_mem_image.cc	/^                         ElfW(Off) table_offset,$/;"	m	namespace:base::__anon44	file:
tag_	src/internal_logging.h	/^  Tag tag_;$/;"	m	class:tcmalloc::LogItem
tail	src/central_freelist.h	/^    void *tail;  \/\/ Tail of chain of objects.$/;"	m	struct:tcmalloc::CentralFreeList::TCEntry
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
target_alias	Makefile	/^target_alias = $/;"	m
target_function_	src/windows/auto_testing_hook.h	/^  T target_function_;  \/\/ always valid$/;"	m	class:sidestep::AutoTestingHookImpl
tc_calloc	src/libc_override_glibc.h	/^  void* __libc_calloc(size_t n, size_t size)      ALIAS(tc_calloc);$/;"	v
tc_cfree	src/libc_override_glibc.h	/^  void __libc_cfree(void* ptr)                    ALIAS(tc_cfree);$/;"	v
tc_free	src/libc_override_glibc.h	/^  void __libc_free(void* ptr)                     ALIAS(tc_free);$/;"	v
tc_get_sysalloc_default	src/windows/system-alloc.cc	/^extern "C" SysAllocator* tc_get_sysalloc_default(SysAllocator *def)$/;"	f
tc_get_sysalloc_override	src/system-alloc.cc	/^SysAllocator *tc_get_sysalloc_override(SysAllocator *def)$/;"	f
tc_get_sysalloc_override	src/windows/system-alloc.cc	/^SysAllocator* tc_get_sysalloc_override(SysAllocator *def)$/;"	f
tc_length	src/central_freelist.cc	/^int CentralFreeList::tc_length() {$/;"	f	class:tcmalloc::CentralFreeList
tc_malloc	src/libc_override_glibc.h	/^  void* __libc_malloc(size_t size)                ALIAS(tc_malloc);$/;"	v
tc_memalign	src/libc_override_glibc.h	/^  void* __libc_memalign(size_t align, size_t s)   ALIAS(tc_memalign);$/;"	v
tc_new	src/debugallocation.cc	/^extern "C" PERFTOOLS_DLL_DECL void* tc_new(size_t size) {$/;"	f
tc_new	src/libc_override_gcc_and_weak.h	/^    ALIAS(tc_new);$/;"	v
tc_new_mode	src/tcmalloc.cc	/^static int tc_new_mode = 0;  \/\/ See tc_set_new_mode().$/;"	v	file:
tc_newarray	src/debugallocation.cc	/^extern "C" PERFTOOLS_DLL_DECL void* tc_newarray(size_t size) {$/;"	f
tc_newarray	src/libc_override_gcc_and_weak.h	/^    ALIAS(tc_newarray);$/;"	v
tc_posix_memalign	src/libc_override_glibc.h	/^  int __posix_memalign(void** r, size_t a, size_t s)  ALIAS(tc_posix_memalign);$/;"	v
tc_pvalloc	src/libc_override_glibc.h	/^  void* __libc_pvalloc(size_t size)               ALIAS(tc_pvalloc);$/;"	v
tc_realloc	src/libc_override_glibc.h	/^  void* __libc_realloc(void* ptr, size_t size)    ALIAS(tc_realloc);$/;"	v
tc_slots_	src/central_freelist.h	/^  TCEntry tc_slots_[kMaxNumTransferEntries];$/;"	m	class:tcmalloc::CentralFreeList
tc_valloc	src/libc_override_glibc.h	/^  void* __libc_valloc(size_t size)                ALIAS(tc_valloc);$/;"	v
tcmalloc	src/base/commandlineflags.h	/^namespace tcmalloc {$/;"	n
tcmalloc	src/base/sysinfo.cc	/^namespace tcmalloc {$/;"	n	file:
tcmalloc	src/base/sysinfo.h	/^namespace tcmalloc {$/;"	n
tcmalloc	src/central_freelist.cc	/^namespace tcmalloc {$/;"	n	file:
tcmalloc	src/central_freelist.h	/^namespace tcmalloc {$/;"	n
tcmalloc	src/common.cc	/^namespace tcmalloc {$/;"	n	file:
tcmalloc	src/common.h	/^namespace tcmalloc {$/;"	n
tcmalloc	src/internal_logging.cc	/^namespace tcmalloc {$/;"	n	file:
tcmalloc	src/internal_logging.h	/^namespace tcmalloc {$/;"	n
tcmalloc	src/linked_list.h	/^namespace tcmalloc {$/;"	n
tcmalloc	src/page_heap.cc	/^namespace tcmalloc {$/;"	n	file:
tcmalloc	src/page_heap.h	/^namespace tcmalloc {$/;"	n
tcmalloc	src/page_heap_allocator.h	/^namespace tcmalloc {$/;"	n
tcmalloc	src/sampler.cc	/^namespace tcmalloc {$/;"	n	file:
tcmalloc	src/sampler.h	/^namespace tcmalloc {$/;"	n
tcmalloc	src/span.cc	/^namespace tcmalloc {$/;"	n	file:
tcmalloc	src/span.h	/^namespace tcmalloc {$/;"	n
tcmalloc	src/stack_trace_table.cc	/^namespace tcmalloc {$/;"	n	file:
tcmalloc	src/stack_trace_table.h	/^namespace tcmalloc {$/;"	n
tcmalloc	src/static_vars.cc	/^namespace tcmalloc {$/;"	n	file:
tcmalloc	src/static_vars.h	/^namespace tcmalloc {$/;"	n
tcmalloc	src/thread_cache.cc	/^namespace tcmalloc {$/;"	n	file:
tcmalloc	src/thread_cache.h	/^namespace tcmalloc {$/;"	n
tcmalloc_and_profiler_unittest_CXXFLAGS	Makefile	/^tcmalloc_and_profiler_unittest_CXXFLAGS = $(tcmalloc_both_unittest_cflags)$/;"	m
tcmalloc_and_profiler_unittest_DEPENDENCIES	Makefile	/^tcmalloc_and_profiler_unittest_DEPENDENCIES = libtcmalloc_and_profiler.la$/;"	m
tcmalloc_and_profiler_unittest_LDADD	Makefile	/^tcmalloc_and_profiler_unittest_LDADD = libtcmalloc_and_profiler.la ${CACHEEX_LIBS}$/;"	m
tcmalloc_and_profiler_unittest_LDFLAGS	Makefile	/^tcmalloc_and_profiler_unittest_LDFLAGS = $(tcmalloc_both_unittest_lflags)$/;"	m
tcmalloc_and_profiler_unittest_LINK	Makefile	/^tcmalloc_and_profiler_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
tcmalloc_and_profiler_unittest_OBJECTS	Makefile	/^tcmalloc_and_profiler_unittest_OBJECTS =  \\$/;"	m
tcmalloc_and_profiler_unittest_SOURCES	Makefile	/^tcmalloc_and_profiler_unittest_SOURCES = $(tcmalloc_both_unittest_srcs)$/;"	m
tcmalloc_both_unittest_CXXFLAGS	Makefile	/^tcmalloc_both_unittest_CXXFLAGS = $(tcmalloc_both_unittest_cflags)$/;"	m
tcmalloc_both_unittest_DEPENDENCIES	Makefile	/^tcmalloc_both_unittest_DEPENDENCIES = $(am__DEPENDENCIES_4)$/;"	m
tcmalloc_both_unittest_LDADD	Makefile	/^tcmalloc_both_unittest_LDADD = $(tcmalloc_both_unittest_ladd)$/;"	m
tcmalloc_both_unittest_LDFLAGS	Makefile	/^tcmalloc_both_unittest_LDFLAGS = $(tcmalloc_both_unittest_lflags)$/;"	m
tcmalloc_both_unittest_LINK	Makefile	/^tcmalloc_both_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
tcmalloc_both_unittest_OBJECTS	Makefile	/^tcmalloc_both_unittest_OBJECTS = $(am_tcmalloc_both_unittest_OBJECTS)$/;"	m
tcmalloc_both_unittest_SOURCES	Makefile	/^tcmalloc_both_unittest_SOURCES = $(tcmalloc_both_unittest_srcs)$/;"	m
tcmalloc_both_unittest_cflags	Makefile	/^tcmalloc_both_unittest_cflags = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
tcmalloc_both_unittest_ladd	Makefile	/^tcmalloc_both_unittest_ladd = $(LIBTCMALLOC) $(LIBTCMALLOC_MINIMAL) \\$/;"	m
tcmalloc_both_unittest_lflags	Makefile	/^tcmalloc_both_unittest_lflags = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
tcmalloc_both_unittest_srcs	Makefile	/^tcmalloc_both_unittest_srcs = src\/tests\/tcmalloc_unittest.cc \\$/;"	m
tcmalloc_debug_unittest_CXXFLAGS	Makefile	/^tcmalloc_debug_unittest_CXXFLAGS = $(tcmalloc_unittest_CXXFLAGS) \\$/;"	m
tcmalloc_debug_unittest_DEPENDENCIES	Makefile	/^tcmalloc_debug_unittest_DEPENDENCIES = libtcmalloc_debug.la \\$/;"	m
tcmalloc_debug_unittest_LDADD	Makefile	/^tcmalloc_debug_unittest_LDADD = libtcmalloc_debug.la $(PTHREAD_LIBS)$/;"	m
tcmalloc_debug_unittest_LDFLAGS	Makefile	/^tcmalloc_debug_unittest_LDFLAGS = $(tcmalloc_unittest_LDFLAGS)$/;"	m
tcmalloc_debug_unittest_LINK	Makefile	/^tcmalloc_debug_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
tcmalloc_debug_unittest_OBJECTS	Makefile	/^tcmalloc_debug_unittest_OBJECTS =  \\$/;"	m
tcmalloc_debug_unittest_SOURCES	Makefile	/^tcmalloc_debug_unittest_SOURCES = $(tcmalloc_unittest_SOURCES)$/;"	m
tcmalloc_h	src/tests/simple_compat_test.cc	/^void* (*tcmalloc_h)(size_t) = &tc_new;$/;"	v
tcmalloc_heap_limit_mb	src/tests/page_heap_test.cc	/^DECLARE_int64(tcmalloc_heap_limit_mb);$/;"	v
tcmalloc_initializer	src/heap-profiler.cc	/^static const TCMallocGuard tcmalloc_initializer;$/;"	v	file:
tcmalloc_large_heap_fragmentation_unittest_CXXFLAGS	Makefile	/^tcmalloc_large_heap_fragmentation_unittest_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
tcmalloc_large_heap_fragmentation_unittest_DEPENDENCIES	Makefile	/^tcmalloc_large_heap_fragmentation_unittest_DEPENDENCIES =  \\$/;"	m
tcmalloc_large_heap_fragmentation_unittest_LDADD	Makefile	/^tcmalloc_large_heap_fragmentation_unittest_LDADD = $(LIBTCMALLOC) $(PTHREAD_LIBS)$/;"	m
tcmalloc_large_heap_fragmentation_unittest_LDFLAGS	Makefile	/^tcmalloc_large_heap_fragmentation_unittest_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
tcmalloc_large_heap_fragmentation_unittest_LINK	Makefile	/^tcmalloc_large_heap_fragmentation_unittest_LINK = $(LIBTOOL) \\$/;"	m
tcmalloc_large_heap_fragmentation_unittest_OBJECTS	Makefile	/^tcmalloc_large_heap_fragmentation_unittest_OBJECTS =  \\$/;"	m
tcmalloc_large_heap_fragmentation_unittest_SOURCES	Makefile	/^tcmalloc_large_heap_fragmentation_unittest_SOURCES = src\/tests\/large_heap_fragmentation_unittest.cc$/;"	m
tcmalloc_large_unittest_CXXFLAGS	Makefile	/^tcmalloc_large_unittest_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
tcmalloc_large_unittest_DEPENDENCIES	Makefile	/^tcmalloc_large_unittest_DEPENDENCIES =  \\$/;"	m
tcmalloc_large_unittest_LDADD	Makefile	/^tcmalloc_large_unittest_LDADD = $(LIBTCMALLOC) $(PTHREAD_LIBS)$/;"	m
tcmalloc_large_unittest_LDFLAGS	Makefile	/^tcmalloc_large_unittest_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
tcmalloc_large_unittest_LINK	Makefile	/^tcmalloc_large_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
tcmalloc_large_unittest_OBJECTS	Makefile	/^tcmalloc_large_unittest_OBJECTS =  \\$/;"	m
tcmalloc_large_unittest_SOURCES	Makefile	/^tcmalloc_large_unittest_SOURCES = src\/tests\/tcmalloc_large_unittest.cc$/;"	m
tcmalloc_minimal_debug_unittest_CXXFLAGS	Makefile	/^tcmalloc_minimal_debug_unittest_CXXFLAGS = $(tcmalloc_minimal_unittest_CXXFLAGS) \\$/;"	m
tcmalloc_minimal_debug_unittest_DEPENDENCIES	Makefile	/^tcmalloc_minimal_debug_unittest_DEPENDENCIES =  \\$/;"	m
tcmalloc_minimal_debug_unittest_LDADD	Makefile	/^tcmalloc_minimal_debug_unittest_LDADD = libtcmalloc_minimal_debug.la $(PTHREAD_LIBS)$/;"	m
tcmalloc_minimal_debug_unittest_LDFLAGS	Makefile	/^tcmalloc_minimal_debug_unittest_LDFLAGS = $(tcmalloc_minimal_unittest_LDFLAGS)$/;"	m
tcmalloc_minimal_debug_unittest_LINK	Makefile	/^tcmalloc_minimal_debug_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
tcmalloc_minimal_debug_unittest_OBJECTS	Makefile	/^tcmalloc_minimal_debug_unittest_OBJECTS =  \\$/;"	m
tcmalloc_minimal_debug_unittest_SOURCES	Makefile	/^tcmalloc_minimal_debug_unittest_SOURCES = $(tcmalloc_minimal_unittest_SOURCES)$/;"	m
tcmalloc_minimal_large_heap_fragmentation_unittest_CXXFLAGS	Makefile	/^tcmalloc_minimal_large_heap_fragmentation_unittest_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
tcmalloc_minimal_large_heap_fragmentation_unittest_DEPENDENCIES	Makefile	/^tcmalloc_minimal_large_heap_fragmentation_unittest_DEPENDENCIES =  \\$/;"	m
tcmalloc_minimal_large_heap_fragmentation_unittest_LDADD	Makefile	/^tcmalloc_minimal_large_heap_fragmentation_unittest_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)$/;"	m
tcmalloc_minimal_large_heap_fragmentation_unittest_LDFLAGS	Makefile	/^tcmalloc_minimal_large_heap_fragmentation_unittest_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
tcmalloc_minimal_large_heap_fragmentation_unittest_LINK	Makefile	/^tcmalloc_minimal_large_heap_fragmentation_unittest_LINK = $(LIBTOOL) \\$/;"	m
tcmalloc_minimal_large_heap_fragmentation_unittest_OBJECTS	Makefile	/^tcmalloc_minimal_large_heap_fragmentation_unittest_OBJECTS = $(am_tcmalloc_minimal_large_heap_fragmentation_unittest_OBJECTS)$/;"	m
tcmalloc_minimal_large_heap_fragmentation_unittest_SOURCES	Makefile	/^tcmalloc_minimal_large_heap_fragmentation_unittest_SOURCES = src\/tests\/large_heap_fragmentation_unittest.cc$/;"	m
tcmalloc_minimal_large_unittest_CXXFLAGS	Makefile	/^tcmalloc_minimal_large_unittest_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
tcmalloc_minimal_large_unittest_DEPENDENCIES	Makefile	/^tcmalloc_minimal_large_unittest_DEPENDENCIES = $(LIBTCMALLOC_MINIMAL) \\$/;"	m
tcmalloc_minimal_large_unittest_LDADD	Makefile	/^tcmalloc_minimal_large_unittest_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)$/;"	m
tcmalloc_minimal_large_unittest_LDFLAGS	Makefile	/^tcmalloc_minimal_large_unittest_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
tcmalloc_minimal_large_unittest_LINK	Makefile	/^tcmalloc_minimal_large_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
tcmalloc_minimal_large_unittest_OBJECTS	Makefile	/^tcmalloc_minimal_large_unittest_OBJECTS =  \\$/;"	m
tcmalloc_minimal_large_unittest_SOURCES	Makefile	/^tcmalloc_minimal_large_unittest_SOURCES = src\/tests\/tcmalloc_large_unittest.cc$/;"	m
tcmalloc_minimal_unittest_CXXFLAGS	Makefile	/^tcmalloc_minimal_unittest_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
tcmalloc_minimal_unittest_DEPENDENCIES	Makefile	/^tcmalloc_minimal_unittest_DEPENDENCIES = $(LIBTCMALLOC_MINIMAL) \\$/;"	m
tcmalloc_minimal_unittest_LDADD	Makefile	/^tcmalloc_minimal_unittest_LDADD = $(LIBTCMALLOC_MINIMAL) \\$/;"	m
tcmalloc_minimal_unittest_LDFLAGS	Makefile	/^tcmalloc_minimal_unittest_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
tcmalloc_minimal_unittest_LINK	Makefile	/^tcmalloc_minimal_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
tcmalloc_minimal_unittest_OBJECTS	Makefile	/^tcmalloc_minimal_unittest_OBJECTS =  \\$/;"	m
tcmalloc_minimal_unittest_SOURCES	Makefile	/^tcmalloc_minimal_unittest_SOURCES = src\/tests\/tcmalloc_unittest.cc \\$/;"	m
tcmalloc_release_rate	src/tcmalloc.cc	/^DECLARE_double(tcmalloc_release_rate);$/;"	v
tcmalloc_sample_parameter	src/tests/sampler_test.cc	/^DECLARE_int64(tcmalloc_sample_parameter);$/;"	v
tcmalloc_sample_parameter	src/tests/tcmalloc_unittest.cc	/^DECLARE_int64(tcmalloc_sample_parameter);$/;"	v
tcmalloc_unittest_CXXFLAGS	Makefile	/^tcmalloc_unittest_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
tcmalloc_unittest_DEPENDENCIES	Makefile	/^tcmalloc_unittest_DEPENDENCIES =  \\$/;"	m
tcmalloc_unittest_INCLUDES	Makefile	/^tcmalloc_unittest_INCLUDES = src\/config_for_unittests.h \\$/;"	m
tcmalloc_unittest_LDADD	Makefile	/^tcmalloc_unittest_LDADD = $(LIBTCMALLOC) liblogging.la $(PTHREAD_LIBS)$/;"	m
tcmalloc_unittest_LDFLAGS	Makefile	/^tcmalloc_unittest_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
tcmalloc_unittest_LINK	Makefile	/^tcmalloc_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
tcmalloc_unittest_OBJECTS	Makefile	/^tcmalloc_unittest_OBJECTS = $(am_tcmalloc_unittest_OBJECTS)$/;"	m
tcmalloc_unittest_SOURCES	Makefile	/^tcmalloc_unittest_SOURCES = src\/tests\/tcmalloc_unittest.cc \\$/;"	m
tcmalloc_unittest_sh_LDADD	Makefile	/^tcmalloc_unittest_sh_LDADD = $(LDADD)$/;"	m
tcmalloc_unittest_sh_OBJECTS	Makefile	/^tcmalloc_unittest_sh_OBJECTS = $(am_tcmalloc_unittest_sh_OBJECTS)$/;"	m
tcmalloc_unittest_sh_SOURCES	Makefile	/^tcmalloc_unittest_sh_SOURCES = src\/tests\/tcmalloc_unittest.sh$/;"	m
tcmallocguard_refcount	src/tcmalloc.cc	/^static int tcmallocguard_refcount = 0;  \/\/ no lock needed: runs before main()$/;"	v	file:
temp_	src/central_freelist.cc	/^  SpinLock *held_, *temp_;$/;"	m	class:tcmalloc::__anon51::LockInverter	file:
test_arithmetic	src/tests/sampler_test.cc	/^void test_arithmetic(uint64_t rnd) {$/;"	f
test_counter	src/tests/debugallocation_test.cc	/^static int test_counter = 0;    \/\/ incremented every time the macro is called$/;"	v	file:
test_main_thread	src/tests/profiler_unittest.cc	/^static void test_main_thread() {$/;"	f	file:
test_other_thread	src/tests/profiler_unittest.cc	/^static void test_other_thread() {$/;"	f	file:
test_to_run	src/tests/debugallocation_test.cc	/^static int test_to_run = 0;     \/\/ set in main() based on argv$/;"	v	file:
testing	src/tests/tcmalloc_unittest.cc	/^namespace testing {$/;"	n	file:
thread_	src/tests/profile-handler_unittest.cc	/^  pthread_t thread_;$/;"	m	class:__anon28::Thread	file:
thread_back_trace	src/stacktrace_instrument-inl.h	/^static BACK_TRACE thread_back_trace[MAX_THREAD];$/;"	v
thread_bytes	src/tcmalloc.cc	/^  uint64_t thread_bytes;      \/\/ Bytes in thread caches$/;"	m	struct:TCMallocStats	file:
thread_dealloc_unittest_CXXFLAGS	Makefile	/^thread_dealloc_unittest_CXXFLAGS = $(PTHREAD_CFLAGS) $(AM_CXXFLAGS) $(NO_BUILTIN_CXXFLAGS)$/;"	m
thread_dealloc_unittest_DEPENDENCIES	Makefile	/^thread_dealloc_unittest_DEPENDENCIES = $(LIBTCMALLOC_MINIMAL) \\$/;"	m
thread_dealloc_unittest_LDADD	Makefile	/^thread_dealloc_unittest_LDADD = $(LIBTCMALLOC_MINIMAL) $(PTHREAD_LIBS)$/;"	m
thread_dealloc_unittest_LDFLAGS	Makefile	/^thread_dealloc_unittest_LDFLAGS = $(PTHREAD_CFLAGS) $(TCMALLOC_FLAGS)$/;"	m
thread_dealloc_unittest_LINK	Makefile	/^thread_dealloc_unittest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \\$/;"	m
thread_dealloc_unittest_OBJECTS	Makefile	/^thread_dealloc_unittest_OBJECTS =  \\$/;"	m
thread_dealloc_unittest_SOURCES	Makefile	/^thread_dealloc_unittest_SOURCES = src\/tests\/thread_dealloc_unittest.cc \\$/;"	m
thread_disable_counter	src/heap-checker.cc	/^static __thread int thread_disable_counter$/;"	v	file:
thread_disable_counter_key	src/heap-checker.cc	/^static pthread_key_t thread_disable_counter_key;$/;"	v	file:
thread_heap_count_	src/thread_cache.cc	/^int ThreadCache::thread_heap_count_ = 0;$/;"	m	class:tcmalloc::ThreadCache	file:
thread_heap_count_	src/thread_cache.h	/^  static int thread_heap_count_;$/;"	m	class:tcmalloc::ThreadCache
thread_heaps_	src/thread_cache.cc	/^ThreadCache* ThreadCache::thread_heaps_ = NULL;$/;"	m	class:tcmalloc::ThreadCache	file:
thread_heaps_	src/thread_cache.h	/^  static ThreadCache* thread_heaps_;$/;"	m	class:tcmalloc::ThreadCache
thread_listing_status	src/heap-checker.cc	/^} thread_listing_status = CALLBACK_NOT_STARTED;$/;"	v	typeref:enum:__anon34	file:
thread_timer_key	src/profile-handler.cc	/^  pthread_key_t thread_timer_key;$/;"	m	class:ProfileHandler	file:
threadcache_allocator	src/thread_cache.cc	/^PageHeapAllocator<ThreadCache> threadcache_allocator;$/;"	m	namespace:tcmalloc	file:
threadcount_lock	src/tests/malloc_hook_test.cc	/^static Mutex threadcount_lock;$/;"	m	namespace:__anon25	file:
threads	src/tests/tcmalloc_unittest.cc	/^static TesterThread** threads;$/;"	m	namespace:testing	file:
threads_have_separate_timers	src/tests/profile-handler_unittest.cc	/^static bool threads_have_separate_timers() {$/;"	f	namespace:__anon28
tid	src/base/elfcore.h	/^    pid_t            tid;$/;"	m	struct:Frame
tid	src/base/elfcore.h	/^    pid_t           tid;$/;"	m	struct:Frame
tid	src/base/elfcore.h	/^    pid_t tid;$/;"	m	struct:Frame
tid_	src/thread_cache.h	/^  pthread_t     tid_;                   \/\/ Which thread owns it$/;"	m	class:tcmalloc::ThreadCache
timer_id_holder	src/profile-handler.cc	/^  timer_id_holder(timer_t _timerid) : timerid(_timerid) {}$/;"	f	struct:timer_id_holder
timer_id_holder	src/profile-handler.cc	/^struct timer_id_holder {$/;"	s	file:
timer_separate_	src/tests/profile-handler_unittest.cc	/^static bool timer_separate_ = false;$/;"	m	namespace:__anon28	file:
timer_type_	src/profile-handler.cc	/^  int timer_type_;$/;"	m	class:ProfileHandler	file:
timer_type_	src/tests/profile-handler_unittest.cc	/^static int timer_type_ = ITIMER_PROF;$/;"	m	namespace:__anon28	file:
timerid	src/profile-handler.cc	/^  timer_t timerid;$/;"	m	struct:timer_id_holder	file:
timespec	src/windows/port.h	/^struct timespec {$/;"	s
tiny_chunk	src/cacheex.h	23;"	d
to	src/base/spinlock_internal.h	/^  int32 to;$/;"	m	struct:base::internal::SpinLockWaitTransition
tonto_enable_	src/tcmalloc.cc	/^void tonto_enable_()$/;"	f
top_build_prefix	Makefile	/^top_build_prefix = $/;"	m
top_builddir	Makefile	/^top_builddir = .$/;"	m
top_distdir	Makefile	/^top_distdir = $(distdir)$/;"	m
top_srcdir	Makefile	/^top_srcdir = .$/;"	m
total	src/heap-profile-table.h	/^  const Stats& total() const { return total_; }$/;"	f	class:HeapProfileTable
total	src/heap-profile-table.h	/^  const Stats& total() const { return total_; }$/;"	f	class:HeapProfileTable::Snapshot
total_	src/heap-profile-table.h	/^  Bucket total_;$/;"	m	class:HeapProfileTable
total_	src/heap-profile-table.h	/^  Bucket total_;$/;"	m	class:HeapProfileTable::Snapshot
total_bytes_	src/profiledata.h	/^  size_t        total_bytes_;   \/\/ How much output$/;"	m	class:ProfileData
total_bytes_free	src/gperftools/malloc_extension.h	/^    size_t total_bytes_free;$/;"	m	struct:MallocExtension::FreeListInfo
total_weight_	src/tests/tcmalloc_unittest.cc	/^  int                   total_weight_;  \/\/ Total weight of all types$/;"	m	class:testing::TestHarness	file:
trace	src/stack_trace_table.h	/^    StackTrace trace;$/;"	m	struct:tcmalloc::StackTraceTable::Bucket
transfer_bytes	src/tcmalloc.cc	/^  uint64_t transfer_bytes;    \/\/ Bytes in central transfer cache$/;"	m	struct:TCMallocStats	file:
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
tsd_inited_	src/thread_cache.cc	/^bool ThreadCache::tsd_inited_ = false;$/;"	m	class:tcmalloc::ThreadCache	file:
tsd_inited_	src/thread_cache.h	/^  static bool tsd_inited_;$/;"	m	class:tcmalloc::ThreadCache
tv_nsec	src/base/linux_syscall_support.h	/^  long               tv_nsec;$/;"	m	struct:kernel_timespec
tv_nsec	src/windows/port.h	/^  int tv_nsec;$/;"	m	struct:timespec
tv_sec	src/base/linux_syscall_support.h	/^  long               tv_sec;$/;"	m	struct:kernel_timespec
tv_sec	src/base/linux_syscall_support.h	/^  long               tv_sec;$/;"	m	struct:kernel_timeval
tv_sec	src/windows/port.h	/^  int tv_sec;$/;"	m	struct:timespec
tv_usec	src/base/linux_syscall_support.h	/^  long               tv_usec;$/;"	m	struct:kernel_timeval
tweaking	doc/heap_checker.html	/^<h3><A NAME="tweaking">Tweaking whole-program checking<\/A><\/h3>$/;"	a
type	src/gperftools/malloc_extension.h	/^    const char* type;$/;"	m	struct:MallocExtension::FreeListInfo
type	src/gperftools/malloc_extension.h	/^  Type type;            \/\/ Type of this range$/;"	m	struct:base::MallocRange
type	src/tests/tcmalloc_unittest.cc	/^    int         type;$/;"	m	struct:testing::TestHarness::Type	file:
type_	src/central_freelist.h	/^  int type_;$/;"	m	class:tcmalloc::CentralFreeList
type_	src/page_heap.h	/^  int type_;$/;"	m	class:tcmalloc::PageHeap
type_	src/thread_cache.h	/^  int type_;			  \/\/ heap type, i.e. cache mapping type$/;"	m	class:tcmalloc::ThreadCache
type_	src/windows/mini_disassembler_types.h	/^  InstructionType type_;$/;"	m	struct:sidestep::Opcode
type_	src/windows/mini_disassembler_types.h	/^  InstructionType type_;$/;"	m	struct:sidestep::SpecificOpcode
types	doc/heap_checker.html	/^<h3><a name="types">Flavors of Heap Checking<\/a><\/h3>$/;"	a
types_	src/tests/tcmalloc_unittest.cc	/^  vector<Type>*         types_;         \/\/ Registered types$/;"	m	class:testing::TestHarness	file:
u_	src/internal_logging.h	/^  } u_;$/;"	m	class:tcmalloc::LogItem	typeref:union:tcmalloc::LogItem::__anon1
ucontext_t	src/getpc.h	/^typedef int ucontext_t;$/;"	t
ucontext_t	src/getpc.h	/^typedef ucontext ucontext_t;$/;"	t
ucontext_t	src/profiler.cc	/^typedef int ucontext_t;   \/\/ just to quiet the compiler, mostly$/;"	t	file:
ucontext_t	src/profiler.cc	/^typedef ucontext ucontext_t;$/;"	t	file:
ucontext_t	src/stacktrace_powerpc-linux-inl.h	/^typedef ucontext ucontext_t;$/;"	t
ucontext_t	src/stacktrace_x86-inl.h	/^typedef ucontext ucontext_t;$/;"	t
uint16	src/base/basictypes.h	/^typedef uint16_t           uint16;$/;"	t
uint16_t	src/windows/port.h	/^typedef unsigned __int16 uint16_t;$/;"	t
uint32	src/base/basictypes.h	/^typedef uint32_t           uint32;$/;"	t
uint32_t	src/windows/port.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint64	src/base/basictypes.h	/^typedef uint64_t           uint64;$/;"	t
uint64_t	src/windows/port.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8	src/base/basictypes.h	/^typedef uint8_t            uint8;$/;"	t
uint8_t	src/windows/port.h	/^typedef unsigned __int8 uint8_t;$/;"	t
unclaimed_cache_space_	src/thread_cache.cc	/^ssize_t ThreadCache::unclaimed_cache_space_ = kDefaultOverallThreadCacheSize;$/;"	m	class:tcmalloc::ThreadCache	file:
unclaimed_cache_space_	src/thread_cache.h	/^  static ssize_t unclaimed_cache_space_;$/;"	m	class:tcmalloc::ThreadCache
unhooked_arena	src/base/low_level_alloc.cc	/^static struct LowLevelAlloc::Arena unhooked_arena;$/;"	v	typeref:struct:Arena	file:
unhooked_async_sig_safe_arena	src/base/low_level_alloc.cc	/^static struct LowLevelAlloc::Arena unhooked_async_sig_safe_arena;$/;"	v	typeref:struct:Arena	file:
unmap_size_	src/memory_region_map.cc	/^int64 MemoryRegionMap::unmap_size_ = 0;$/;"	m	class:MemoryRegionMap	file:
unmap_size_	src/memory_region_map.h	/^  static int64 unmap_size_;$/;"	m	class:MemoryRegionMap
unmapped_bytes	src/page_heap.h	/^    uint64_t unmapped_bytes;  \/\/ Total bytes on returned freelists$/;"	m	struct:tcmalloc::PageHeap::Stats
unum	src/internal_logging.h	/^    uint64_t unum;$/;"	m	union:tcmalloc::LogItem::__anon1
unused	src/base/elfcore.h	/^    unsigned long unused;$/;"	m	struct:mips_regs
uregs	src/base/elfcore.h	/^    long uregs[18];$/;"	m	struct:arm_regs
uregs	src/base/elfcore.h	/^    struct i386_regs uregs;$/;"	m	struct:Frame	typeref:struct:Frame::i386_regs
uregs	src/base/elfcore.h	/^    unsigned long uregs[32];	\/* General Purpose Registers - r0-r31.       *\/$/;"	m	struct:ppc_regs
uregs	src/base/elfcore.h	/^    unsigned long uregs[32];    \/* General purpose registers.                *\/$/;"	m	struct:mips_regs
usage	src/pprof	/^sub usage {$/;"	s
usage	src/windows/addr2line-pdb.c	/^void usage() {$/;"	f
usage	src/windows/nm-pdb.c	/^void usage() {$/;"	f
usage_error	test-driver	/^usage_error ()$/;"	f
usage_string	src/pprof	/^sub usage_string {$/;"	s
use_main_thread_counter	src/heap-checker.cc	/^static bool use_main_thread_counter = true;$/;"	v	file:
use_sib_byte_	src/windows/mini_disassembler_types.h	/^  bool use_sib_byte_;$/;"	m	struct:sidestep::ModrmEntry
used_slots_	src/central_freelist.h	/^  int32_t used_slots_;$/;"	m	class:tcmalloc::CentralFreeList
using_chunk_head	src/tcmalloc.cc	/^using_chunk_head(void *usr_ptr) {$/;"	f	file:
using_low_level_alloc	src/tests/low_level_alloc_unittest.cc	/^static bool using_low_level_alloc = false;$/;"	v	file:
using_maps_backing_	src/base/sysinfo.h	/^  bool using_maps_backing_; \/\/ true if we are looking at maps_backing instead of maps.$/;"	m	class:ProcMapsIterator
usr_ptr2chk_head	src/tcmalloc.cc	/^usr_ptr2chk_head(void *usr_ptr) {$/;"	f	file:
usr_ptr2malloc_ptr	src/tcmalloc.cc	/^usr_ptr2malloc_ptr(void *usr_ptr) {$/;"	f	file:
val	src/tests/heap-checker_unittest.cc	/^  mutable C val;$/;"	m	class:TClass	file:
valloc	src/tests/tcmalloc_unittest.cc	103;"	d	file:
value	src/addressmap-inl.h	/^    Value  value;$/;"	m	struct:AddressMap::Entry
value	src/span.h	/^  int value[64];$/;"	m	struct:tcmalloc::Span
value_type	src/base/stl_allocator.h	/^  typedef T          value_type;$/;"	t	class:STL_Allocator
values	src/pagemap.h	/^    void* values[LEAF_LENGTH];$/;"	m	struct:TCMalloc_PageMap2::Leaf
values	src/pagemap.h	/^    void* values[LEAF_LENGTH];$/;"	m	struct:TCMalloc_PageMap3::Leaf
vdso_base_	src/base/vdso_support.cc	/^const void *VDSOSupport::vdso_base_ = ElfMemImage::kInvalidBase;$/;"	m	class:base::VDSOSupport	file:
vdso_base_	src/base/vdso_support.h	/^  static const void *vdso_base_;$/;"	m	class:base::VDSOSupport
vdso_init_helper	src/base/vdso_support.cc	/^} vdso_init_helper;$/;"	m	namespace:base	typeref:class:base::VDSOInitHelper	file:
verbose	src/base/logging.h	/^DECLARE_int32(verbose);$/;"	v
verdef_	src/base/elf_mem_image.h	/^  const ElfW(Verdef) *verdef_;$/;"	m	class:base::ElfMemImage
verdefnum_	src/base/elf_mem_image.h	/^  size_t verdefnum_;$/;"	m	class:base::ElfMemImage
version	packages/deb/rules	/^version=`ls src\/.libs\/lib*.so.* | \\$/;"	m
version	src/base/elf_mem_image.h	/^    const char      *version;   \/\/ E.g. "LINUX_2.6", could be ""$/;"	m	struct:base::ElfMemImage::SymbolInfo
version_string	src/pprof	/^sub version_string {$/;"	s
versym_	src/base/elf_mem_image.h	/^  const ElfW(Versym) *versym_;$/;"	m	class:base::ElfMemImage
virtual_space	src/windows/system-alloc.cc	/^static char virtual_space[sizeof(VirtualSysAllocator)];$/;"	v	file:
virtual_timer_	src/tests/profile-handler_unittest.cc	/^  struct itimerval virtual_timer_;$/;"	m	class:__anon28::VirtualTimerGetterThread	typeref:struct:__anon28::VirtualTimerGetterThread::itimerval	file:
void_function	src/gperftools/heap-checker.h	/^  typedef void (*void_function)(void);$/;"	t	class:HeapCleaner
waitpid	src/base/linux_syscall_support.h	/^    LSS_INLINE pid_t LSS_NAME(waitpid)(pid_t pid, int *status, int options){$/;"	f
weight	src/tests/tcmalloc_unittest.cc	/^    int         weight;$/;"	m	struct:testing::TestHarness::Type	file:
whole_program	doc/heap_checker.html	/^<h2><a name="whole_program">Whole-program Heap Leak Checking<\/a><\/h2>$/;"	a
windows_fn	src/windows/patch_functions.cc	/^    GenericFnPtr windows_fn;         \/\/ the fn whose name we call (&malloc)$/;"	m	struct:__anon9::WindowsInfo::FunctionInfo	file:
windows_fn	src/windows/patch_functions.cc	/^  GenericFnPtr windows_fn(int ifunction) const {$/;"	f	class:__anon9::LibcInfo
windows_fn_	src/windows/patch_functions.cc	/^  GenericFnPtr windows_fn_[kNumFunctions];$/;"	m	class:__anon9::LibcInfo	file:
wipe_stack_ptr	src/tests/heap-checker_unittest.cc	/^void (*volatile wipe_stack_ptr)(int n);$/;"	v
wrf_enable_	src/tcmalloc.cc	/^void wrf_enable_()$/;"	f
write	src/windows/port.h	/^inline ssize_t write(int fd, const void *buf, size_t count) {$/;"	f
xeq	src/base/elfcore.h	/^    unsigned long xeq;$/;"	m	struct:ppc_regs
~AddressMap	src/addressmap-inl.h	/^AddressMap<Value>::~AddressMap() {$/;"	f	class:AddressMap
~AggressiveDecommitChanger	src/tests/tcmalloc_unittest.cc	/^  ~AggressiveDecommitChanger() {$/;"	f	class:testing::AggressiveDecommitChanger
~AllocatorState	src/tests/tcmalloc_unittest.cc	/^  virtual ~AllocatorState() {}$/;"	f	class:testing::AllocatorState
~ArenaLock	src/base/low_level_alloc.cc	/^    ~ArenaLock() { RAW_CHECK(this->left_, "haven't left Arena region"); }$/;"	f	class:__anon43::ArenaLock
~Array	src/tests/heap-checker_unittest.cc	/^  ~Array() { delete [] ptr; }$/;"	f	struct:Array
~AutoTestingHookBase	src/windows/auto_testing_hook.h	/^  virtual ~AutoTestingHookBase() {}$/;"	f	class:sidestep::AutoTestingHookBase
~AutoTestingHookHolder	src/windows/auto_testing_hook.h	/^  ~AutoTestingHookHolder() { delete hook_; }$/;"	f	class:sidestep::AutoTestingHookHolder
~AutoTestingHookImpl	src/windows/auto_testing_hook.h	/^  ~AutoTestingHookImpl() {$/;"	f	class:sidestep::AutoTestingHookImpl
~ClassB	src/tests/heap-checker_unittest.cc	/^  virtual ~ClassB() { }$/;"	f	class:ClassB
~ClassB2	src/tests/heap-checker_unittest.cc	/^  virtual ~ClassB2() { }$/;"	f	class:ClassB2
~Closure	src/tests/heap-checker_unittest.cc	/^  virtual ~Closure() { }$/;"	f	class:Closure
~CpuProfiler	src/profiler.cc	/^CpuProfiler::~CpuProfiler() {$/;"	f	class:CpuProfiler
~DeleteUnsignedCharArray	src/windows/preamble_patcher.cc	/^  ~DeleteUnsignedCharArray() {$/;"	f	class:sidestep::DeleteUnsignedCharArray
~Disabler	src/heap-checker.cc	/^HeapLeakChecker::Disabler::~Disabler() {$/;"	f	class:HeapLeakChecker::Disabler
~FileDescriptor	src/tests/profiledata_unittest.cc	/^  ~FileDescriptor() {$/;"	f	struct:__anon30::FileDescriptor
~GoogleInitializer	src/base/googleinit.h	/^  ~GoogleInitializer() {$/;"	f	class:GoogleInitializer
~HeapLeakChecker	src/heap-checker.cc	/^HeapLeakChecker::~HeapLeakChecker() {$/;"	f	class:HeapLeakChecker
~HeapLeakCheckerGlobalPrePost	src/heap-checker-bcad.cc	/^  ~HeapLeakCheckerGlobalPrePost() {$/;"	f	class:HeapLeakCheckerGlobalPrePost
~HeapProfileEndWriter	src/heap-profiler.cc	/^  ~HeapProfileEndWriter() {$/;"	f	struct:HeapProfileEndWriter
~HeapProfileTable	src/heap-profile-table.cc	/^HeapProfileTable::~HeapProfileTable() {$/;"	f	class:HeapProfileTable
~InterfaceA	src/tests/heap-checker_unittest.cc	/^  virtual ~InterfaceA() { }$/;"	f	class:InterfaceA
~InterfaceB	src/tests/heap-checker_unittest.cc	/^  virtual ~InterfaceB() { }$/;"	f	class:InterfaceB
~InterfaceC	src/tests/heap-checker_unittest.cc	/^  virtual ~InterfaceC() { }$/;"	f	class:InterfaceC
~LockHolder	src/memory_region_map.h	/^    ~LockHolder() { Unlock(); }$/;"	f	class:MemoryRegionMap::LockHolder
~LockInverter	src/central_freelist.cc	/^  inline ~LockInverter() { temp_->Unlock(); held_->Lock();  }$/;"	f	class:tcmalloc::__anon51::LockInverter
~MallocExtension	src/malloc_extension.cc	/^MallocExtension::~MallocExtension() { }$/;"	f	class:MallocExtension
~Mutex	src/base/simple_mutex.h	/^Mutex::~Mutex()            { assert(mutex_ == 0); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
~Mutex	src/base/simple_mutex.h	/^Mutex::~Mutex()            { if (destroy_) DeleteCriticalSection(&mutex_); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
~Mutex	src/base/simple_mutex.h	/^Mutex::~Mutex()       { if (destroy_) SAFE_PTHREAD(pthread_mutex_destroy); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
~Mutex	src/base/simple_mutex.h	/^Mutex::~Mutex()       { if (destroy_) SAFE_PTHREAD(pthread_rwlock_destroy); }$/;"	f	class:MUTEX_NAMESPACE::Mutex
~MutexLock	src/base/simple_mutex.h	/^  ~MutexLock() { mu_->Unlock(); }$/;"	f	class:MUTEX_NAMESPACE::MutexLock
~ProcMapsIterator	src/base/sysinfo.cc	/^ProcMapsIterator::~ProcMapsIterator() {$/;"	f	class:ProcMapsIterator
~ProfileData	src/profiledata.cc	/^ProfileData::~ProfileData() {$/;"	f	class:ProfileData
~ProfileHandler	src/profile-handler.cc	/^ProfileHandler::~ProfileHandler() {$/;"	f	class:ProfileHandler
~ReaderMutexLock	src/base/simple_mutex.h	/^  ~ReaderMutexLock() { mu_->ReaderUnlock(); }$/;"	f	class:MUTEX_NAMESPACE::ReaderMutexLock
~STL_Allocator	src/base/stl_allocator.h	/^  ~STL_Allocator() { }$/;"	f	class:STL_Allocator
~SpinLockHolder	src/base/spinlock.h	/^  inline ~SpinLockHolder() \/*UNLOCK_FUNCTION()*\/ { lock_->Unlock(); }$/;"	f	class:SpinLockHolder
~StackTraceTable	src/stack_trace_table.cc	/^StackTraceTable::~StackTraceTable() {$/;"	f	class:tcmalloc::StackTraceTable
~SymbolTable	src/symbolize.h	/^  ~SymbolTable() {$/;"	f	class:SymbolTable
~SysAllocator	src/malloc_extension.cc	/^SysAllocator::~SysAllocator() {}$/;"	f	class:SysAllocator
~TCMallocGuard	src/tcmalloc.cc	/^TCMallocGuard::~TCMallocGuard() {$/;"	f	class:TCMallocGuard
~TestHarness	src/tests/tcmalloc_unittest.cc	/^  ~TestHarness() {$/;"	f	class:testing::TestHarness
~TesterThread	src/tests/tcmalloc_unittest.cc	/^  virtual ~TesterThread() {$/;"	f	class:testing::TesterThread
~WriterMutexLock	src/base/simple_mutex.h	/^  ~WriterMutexLock() { mu_->WriterUnlock(); }$/;"	f	class:MUTEX_NAMESPACE::WriterMutexLock
~scoped_array	src/tests/profiledata_unittest.cc	/^  ~scoped_array() { delete[] data_; }$/;"	f	class:__anon30::scoped_array
~scoped_array	src/tests/sampler_test.cc	/^  ~scoped_array() { delete[] p_; }$/;"	f	class:__anon27::scoped_array
